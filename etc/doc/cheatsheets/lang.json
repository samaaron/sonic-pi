{
  "all_sample_names": {
    "summary": "Get all sample names",
    "doc": "Return a list of all the sample names available",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "assert": {
    "summary": "Ensure arg is valid",
    "doc": "Raises an exception if the argument is either nil or false.",
    "introduced": "v2.8",
    "args": {
      "required": {
        "arg": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nassert true  \nassert 1     \nassert \"foo\"\nassert false \n",
        "comments": "# Simple assertions\n# As true is neither nil or false, this assertion passes\n# Similarly, 1 passes\n# As do string\n# This will raise an exception\n"
      },
      {
        "code": "\nassert false, \"oops\"\n",
        "comments": "# Communicating error messages\n# This will raise an exception containing the message \"oops\"\n"
      },
      {
        "code": "\nassert (1 + 1) == 2\nassert [:a, :b, :c].size == 3\n",
        "comments": "# More interesting assertions\n# Ensure that arithmetic is sane!\n# ensure lists can be correctly counted\n"
      }
    ]
  },
  "assert_equal": {
    "summary": "Ensure args are equal",
    "doc": "Raises an exception if both arguments aren't equal. ",
    "introduced": "v2.8",
    "args": {
      "required": {
        "arg1": {
          "type": "anything"
        },
        "arg2": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nassert_equal 1, 1",
        "comments": "# Simple assertions\n \n"
      },
      {
        "code": "\nassert_equal 1 + 1, 2\nassert_equal [:a, :b, :c].size,  3\n",
        "comments": "# More interesting assertions\n# Ensure that arithmetic is sane!\n# ensure lists can be correctly counted\n"
      },
      {
        "code": "\nassert_equal 3, 5, \"something is seriously wrong!\"",
        "comments": "# Add messages to the exceptions\n \n"
      }
    ]
  },
  "assert_error": {
    "summary": "Ensure block throws an error",
    "doc": "Runs the block and ensures that it raises the correct Exception. Useful for asserting that an Exception will be raised. You may specify the particular Exception class, which defaults to `Exception`.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "class": {
          "type": "Exception"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "assert_error do\n  play 70\nend                        \n                           \n",
        "comments": " \n \n# Will throw an exception: \"Assert error failed!\" as the block\n# contains no errors.\n"
      },
      {
        "code": "assert_error do\n  1 / 0\nend                        \n",
        "comments": " \n \n# Will not throw an exception as the block contains an error.\n"
      },
      {
        "code": "assert_error ZeroDivisionError do\n  1 / 0\nend                        \n",
        "comments": " \n \n# Will not throw an exception as the block contains a ZeroDivisionError.\n"
      },
      {
        "code": "assert_error ThreadError do\n  1 / 0\nend                        \n                           \n",
        "comments": " \n \n# Will throw an exception as the block contains a ZeroDivisionError rather than\n# a ThreadError.\n"
      }
    ]
  },
  "assert_not": {
    "summary": "Ensure arg is not valid",
    "doc": "Raises an exception if the argument is not either nil or false.",
    "introduced": "v3.3",
    "args": {
      "required": {
        "arg": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nassert_not false  \nassert_not nil    \nassert_not 1 == 5 \nassert true \n",
        "comments": "# Simple assertions\n# As false is either nil or false, this assertion passes\n# As nil is either nil or false, this assertion passes\n# These numbers are not equal\n# This will raise an exception\n"
      },
      {
        "code": "\nassert_not true , \"oops\"\n",
        "comments": "# Communicating error messages\n# This will raise an exception containing the message \"oops\"\n"
      }
    ]
  },
  "assert_not_equal": {
    "summary": "Ensure args are not equal",
    "doc": "Raises an exception if both arguments are qual. ",
    "introduced": "v3.3",
    "args": {
      "required": {
        "arg1": {
          "type": "anything"
        },
        "arg2": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nassert_not_equal 1, 3\nassert_not_equal 1, -1\nassert_not_equal 1, :foo",
        "comments": "# Simple assertions\n \n \n \n"
      },
      {
        "code": "\nassert_not_equal 3, 3, \"something is seriously wrong!\"",
        "comments": "# Add messages to the exceptions\n \n"
      }
    ]
  },
  "assert_similar": {
    "summary": "Ensure args are similar",
    "doc": "Raises an exception if both arguments aren't similar.\n\nCurrently similarity is only defined for numbers - all other types are compared for equality with assert_equal.\n\nUseful for testing in cases where floating point imprecision stops you from being able to use `assert_equal`. ",
    "introduced": "v3.0",
    "args": {
      "required": {
        "arg1": {
          "type": "anything"
        },
        "arg2": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nassert_similar 1, 1\n",
        "comments": "# Simple assertions\n#=> True\n"
      },
      {
        "code": "\nassert_similar(4.9999999999, 5.0)\n",
        "comments": "# Handles floating point imprecision\n#=> True\n"
      }
    ]
  },
  "at": {
    "summary": "Asynchronous Time. Run a block at the given time(s)",
    "doc": "Given a list of times, run the block once after waiting each given time. If passed an optional params list, will pass each param individually to each block call. If size of params list is smaller than the times list, the param values will act as rings (rotate through). If the block is given 1 arg, the times are fed through. If the block is given 2 args, both the times and the params are fed through. A third block arg will receive the index of the time.\n\nNote, all code within the block is executed in its own thread. Therefore despite inheriting all thread locals such as the random stream and ticks, modifications will be isolated to the block and will not affect external code.\n\n`at` is just-in-time scheduling using multiple isolated threads. See `time_warp` for ahead-of-time scheduling within the current thread.",
    "introduced": "v2.1",
    "usage": {
      "function": "at",
      "args": {
        "times": "list",
        "params": "list"
      }
    },
    "opts": {
    },
    "examples": [
      {
        "code": "at 4 do\n    sample :ambi_choir   \n  end",
        "comments": " \n# play sample after waiting for 4 beats\n \n"
      },
      {
        "code": "at [1, 2, 4] do \n    play 75          \n  end                \n",
        "comments": "# plays a note after waiting 1 beat,\n# then after 1 more beat,\n# then after 2 more beats (4 beats total)\n"
      },
      {
        "code": "at [1, 2, 3], [75, 76, 77] do |n| \n    play n\n  end",
        "comments": "# plays 3 different notes\n \n \n"
      },
      {
        "code": "at [1, 2, 3],\n      [{:amp=>0.5}, {:amp=> 0.8}] do |p|\n    sample :drum_cymbal_open, p         \n  end",
        "comments": " \n# alternate soft and loud\n# cymbal hits three times\n \n"
      },
      {
        "code": "at [0, 1, 2] do |t|\n    puts t\n  end",
        "comments": "# when no params are given to at, the times are fed through to the block\n#=> prints 0, 1, then 2\n \n"
      },
      {
        "code": "at [0, 1, 2], [:a, :b] do |t, b| \n    puts [t, b]\n  end",
        "comments": "#If you specify the block with 2 args, it will pass through both the time and the param\n#=> prints out [0, :a], [1, :b], then [2, :a]\n \n"
      },
      {
        "code": "at [0, 0.5, 2] do |t, idx| \n    puts [t, idx]\n  end",
        "comments": "#If you specify the block with 2 args, and no param list to at, it will pass through both the time and the index\n#=> prints out [0, 0], [0.5, 1], then [2, 2]\n \n"
      },
      {
        "code": "at [0, 0.5, 2], [:a, :b] do |t, b, idx| \n    puts [t, b, idx]\n  end",
        "comments": "#If you specify the block with 3 args, it will pass through the time, the param and the index\n#=> prints out [0, :a, 0], [0.5, :b, 1], then [2, :a, 2]\n \n"
      },
      {
        "code": "\nputs \"main: \", rand \nrand_back\nat 1 do        \n               \n  puts \"at:\", rand\n  puts \"at:\", rand\nend\n\nsleep 2\nputs \"main: \", rand\n",
        "comments": "# at does not consume & interfere with the outer random stream\n# 0.75006103515625\n \n# the random stream inside the at block is separate and\n# isolated from the outer stream.\n# 0.9287109375\n# 0.1043701171875\n \n \n \n# value is still 0.75006103515625\n"
      },
      {
        "code": "\nat [1, 2] do\n           \n  puts rand\n  puts rand\nend\n           \n           \n           \n",
        "comments": "# Each block run within at has its own isolated random stream:\n \n# first time round (after 1 beat) prints:\n# 0.9287109375\n# 0.1043701171875\n \n# second time round (after 2 beats) prints:\n# 0.1043701171875\n# 0.764617919921875\n"
      }
    ]
  },
  "beat": {
    "summary": "Get current beat",
    "doc": "Returns the beat value for the current thread/live_loop. Beats are advanced only by calls to `sleep` and `sync`. Beats are distinct from virtual time (the value obtained by calling `vt`) in that it has no notion of rate. It is just essentially a counter for sleeps. After a `sync`, the beat is overridden with the beat value from the thread which called `cue`. ",
    "introduced": "v2.10",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 120 \n  puts beat   \n  sleep 1\n  puts beat   \n  use_bpm 2000\n  sleep 2\n  puts beat   \n",
        "comments": "# The current BPM makes no difference\n#=> 0\n \n#=> 1\n \n \n#=> 3\n"
      }
    ]
  },
  "block_duration": {
    "summary": "Return block duration",
    "doc": "Given a block, runs it and returns the amount of time that has passed. This time is in seconds and is not scaled to the current BPM. Any threads spawned in the block are not accounted for.",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "dur = block_duration do\n  play 50\n  sleep 1\n  play 62\n  sleep 2\nend\n\nputs dur\n",
        "comments": " \n \n \n \n \n \n \n#=> Returns 3 as 3 seconds have passed within the block\n"
      },
      {
        "code": "use_bpm 120\ndur = block_duration do\n  play 50\n  sleep 1\n  play 62\n  sleep 2\nend\n\nputs dur\n        \n",
        "comments": " \n \n \n \n \n \n \n \n#=> Returns 1.5 as 1.5 seconds have passed within the block\n#   (due to the BPM being 120)\n"
      }
    ]
  },
  "block_slept?": {
    "summary": "Determine if block contains sleep time",
    "doc": "Given a block, runs it and returns whether or not the block contained sleeps or syncs",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "slept = block_slept? do\n  play 50\n  sleep 1\n  play 62\n  sleep 2\nend\n\nputs slept\n",
        "comments": " \n \n \n \n \n \n \n#=> Returns true as there were sleeps in the block\n"
      },
      {
        "code": "in_thread do\n  sleep 1\n  cue :foo \nend\n\nslept = block_slept? do\n  sync :foo \n  play 62\nend\n\nputs slept\n",
        "comments": " \n \n# trigger a cue on a different thread\n \n \n \n# wait for the cue before playing the note\n \n \n \n#=> Returns true as the block contained a sync.\n"
      },
      {
        "code": "slept = block_slept? do\n  play 50\n  play 62\nend\n\nputs slept\n",
        "comments": " \n \n \n \n \n#=> Returns false as there were no sleeps in the block\n"
      }
    ]
  },
  "bools": {
    "summary": "Create a ring of boolean values",
    "doc": "Create a new ring of booleans values from 1s and 0s, which can be easier to write and manipulate in a live setting.",
    "introduced": "v2.2",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(bools 1, 0)   \n",
        "comments": "#=> (ring true, false)\n"
      },
      {
        "code": "(bools 1, 0, true, false, nil)\n",
        "comments": "#=> (ring true, false, true, false, false)\n"
      }
    ]
  },
  "bt": {
    "summary": "Beat time conversion",
    "doc": "Beat time representation. Scales the time to the current BPM. Useful for adding bpm scaling",
    "introduced": "v2.8",
    "args": {
      "required": {
        "seconds": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 120 \n  puts bt(1)\n  use_bpm 60  \n  puts bt(1)\n  use_bpm 30  \n  puts bt(1)\n",
        "comments": "# Set the BPM to be double the default\n# 0.5\n# BPM is now default\n# 1\n# BPM is now half the default\n# 2\n"
      }
    ]
  },
  "buffer": {
    "summary": "Initialise or return named buffer",
    "doc": "Initialise or return a named buffer with a specific duration (defaults to 8 beats). Useful for working with the `:record` FX. If the buffer is requested with a different duration, then a new buffer will be initialised and the old one recycled.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "symbol": {
          "type": "name"
        },
        "number": {
          "type": "duration"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "buffer(:foo)\nb = buffer(:foo)\nputs b.duration \n",
        "comments": "# load a 8s buffer and name it :foo\n# return cached buffer and bind it to b\n#=> 8.0\n"
      },
      {
        "code": "buffer(:foo, 16)\n",
        "comments": "# load a 16s buffer and name it :foo\n"
      },
      {
        "code": "use_bpm 120\nbuffer(:foo, 16)\n                \n                \n",
        "comments": " \n# load a 8s buffer and name it :foo\n# (this isn't 16s as the BPM has been\n# doubled from the default of 60)\n"
      },
      {
        "code": "buffer(:foo)    \nbuffer(:foo, 8) \nbuffer(:foo, 10)\nbuffer(:foo, 10)\nbuffer(:foo)    \nbuffer(:foo)    \n",
        "comments": "# init a 8s buffer and name it :foo\n# return cached 8s buffer (has the same duration)\n# init a new 10s buffer and name it :foo\n# return cached 10s buffer\n# init a 8s buffer and name it :foo\n# return cached 8s buffer (has the same duration)\n"
      }
    ]
  },
  "choose": {
    "summary": "Random list selection",
    "doc": "Choose an element at random from a list (array).\n\nIf no arguments are given, will return a lambda function which when called takes an argument which will be a list to be chosen from. This is useful for choosing random `onset:` vals for samples\n\nAlways returns a single element (or nil)",
    "introduced": "v2.0",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "loop do\n    play choose([60, 64, 67])\n    sleep 1\n    play chord(:c, :major).choose\n    sleep 1\n  end",
        "comments": " \n#=> plays one of 60, 64 or 67 at random\n \n#=> You can also call .choose on the list\n \n \n"
      },
      {
        "code": "\nlive_loop :foo do\n  sample :loop_amen, onset: choose  \n  sleep 0.125\nend",
        "comments": "# Using choose for random sample onsets\n \n# choose a random onset value each time\n \n \n"
      }
    ]
  },
  "chord": {
    "summary": "Create chord",
    "doc": "Creates an immutable ring of Midi note numbers when given a tonic note and a chord type. If only passed a chord type, will default the tonic to 0. See examples.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "tonic": {
          "type": "symbol"
        },
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
        "invert": {
          "desc": "Apply the specified num inversions to chord. See the fn `chord_invert`."
        },
        "num_octaves": {
          "desc": "Create an arpeggio of the chord over n octaves"
        }
      }
    },
    "examples": [
      {
        "code": "puts (chord :e, :minor)\n",
        "comments": "# returns a ring of midi notes - (ring 64, 67, 71)\n"
      },
      {
        "code": "\nplay (chord :e, :minor)",
        "comments": "# Play all the notes together\n \n"
      },
      {
        "code": "\nplay (chord :e3, :minor, invert: 0)\nplay (chord :e3, :minor, invert: 1)\nplay (chord :e3, :minor, invert: 2)\n",
        "comments": "# Chord inversions (see the fn chord_invert)\n# Play the basic :e3, :minor chord - (ring 52, 55, 59)\n# Play the first inversion of :e3, :minor - (ring 55, 59, 64)\n# Play the first inversion of :e3, :minor - (ring 59, 64, 67)\n"
      },
      {
        "code": "\nputs (chord :minor)\n",
        "comments": "# You can create a chord without a tonic:\n#=> (ring 0, 3, 7)\n"
      },
      {
        "code": "\nlive_loop :arp do\n  play chord(:e, :minor, num_octaves: 2).tick, release: 0.1\n  sleep 0.125\nend",
        "comments": "# chords are great for arpeggiators\n \n \n \n \n"
      },
      {
        "code": "\n\n(chord :C, '1')\n(chord :C, '5')\n(chord :C, '+5')\n(chord :C, 'm+5')\n(chord :C, :sus2)\n(chord :C, :sus4)\n(chord :C, '6')\n(chord :C, :m6)\n(chord :C, '7sus2')\n(chord :C, '7sus4')\n(chord :C, '7-5')\n(chord :C, 'm7-5')\n(chord :C, '7+5')\n(chord :C, 'm7+5')\n(chord :C, '9')\n(chord :C, :m9)\n(chord :C, 'm7+9')\n(chord :C, :maj9)\n(chord :C, '9sus4')\n(chord :C, '6*9')\n(chord :C, 'm6*9')\n(chord :C, '7-9')\n(chord :C, 'm7-9')\n(chord :C, '7-10')\n(chord :C, '9+5')\n(chord :C, 'm9+5')\n(chord :C, '7+5-9')\n(chord :C, 'm7+5-9')\n(chord :C, '11')\n(chord :C, :m11)\n(chord :C, :maj11)\n(chord :C, '11+')\n(chord :C, 'm11+')\n(chord :C, '13')\n(chord :C, :m13)\n(chord :C, :add2)\n(chord :C, :add4)\n(chord :C, :add9)\n(chord :C, :add11)\n(chord :C, :add13)\n(chord :C, :madd2)\n(chord :C, :madd4)\n(chord :C, :madd9)\n(chord :C, :madd11)\n(chord :C, :madd13)\n(chord :C, :major)\n(chord :C, :M)\n(chord :C, :minor)\n(chord :C, :m)\n(chord :C, :major7)\n(chord :C, :dom7)\n(chord :C, '7')\n(chord :C, :M7)\n(chord :C, :minor7)\n(chord :C, :m7)\n(chord :C, :augmented)\n(chord :C, :a)\n(chord :C, :diminished)\n(chord :C, :dim)\n(chord :C, :i)\n(chord :C, :diminished7)\n(chord :C, :dim7)\n(chord :C, :i7)",
        "comments": "# Sonic Pi supports a large range of chords\n# Notice that the more exotic ones have to be surrounded by ' quotes\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
      }
    ]
  },
  "chord_degree": {
    "summary": "Construct chords of stacked thirds, based on scale degrees",
    "doc": "In music we build chords from scales. For example, a C major chord is made by taking the 1st, 3rd and 5th notes of the C major scale (C, E and G). If you do this on a piano you might notice that you play one, skip one, play one, skip one etc. If we use the same spacing and start from the second note in C major (which is a D), we get a D minor chord which is the 2nd, 4th and 6th notes in C major (D, F and A). We can move this pattern all the way up or down the scale to get different types of chords. `chord_degree` is a helper method that returns a ring of midi note numbers when given a degree (starting point in a scale) which is a symbol `:i`, `:ii`, `:iii`, `:iv`, `:v`, `:vi`, `:vii` or a number `1`-`7`. The second argument is the tonic note of the scale, the third argument is the scale type and finally the fourth argument is number of notes to stack up in the chord. If we choose 4 notes from degree `:i` of the C major scale, we take the 1st, 3rd, 5th and 7th notes of the scale to get a C major 7 chord.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "degree": {
          "type": "symbol_or_number"
        },
        "tonic": {
          "type": "symbol"
        },
        "scale": {
          "type": "symbol"
        },
        "number_of_notes": {
          "type": "number"
        }
      },
      "optional": {
        "invert": {
          "desc": "Apply the specified num inversions to chord. See the fn `chord_invert`."
        }
      }
    },
    "examples": [
      {
        "code": "puts (chord_degree :i, :A3, :major)\n",
        "comments": "# returns a ring of midi notes - (ring 57, 61, 64, 68) - an A major 7 chord\n"
      },
      {
        "code": "play (chord_degree :i, :A3, :major, 3)",
        "comments": " \n"
      },
      {
        "code": "play (chord_degree :ii, :A3, :major, 3)\n",
        "comments": "# Chord ii in A major is a B minor chord\n"
      },
      {
        "code": "play (chord_degree :iii, :A3, :major, 3)\n",
        "comments": "# Chord iii in A major is a C# minor chord\n"
      },
      {
        "code": "play (chord_degree :iv, :A3, :major, 3)\n",
        "comments": "# Chord iv in A major is a D major chord\n"
      },
      {
        "code": "play (chord_degree :i, :C4, :major, 4)\n",
        "comments": "# Taking four notes is the default. This gives us 7th chords - here it plays a C major 7\n"
      },
      {
        "code": "play (chord_degree :i, :C4, :major, 5)\n",
        "comments": "# Taking five notes gives us 9th chords - here it plays a C major 9 chord\n"
      },
      {
        "code": "play (chord_degree :i, :C4, :major, 3, invert: 1)\n",
        "comments": "# Play the first inversion of chord i in C major - (ring 64, 67, 72)\n"
      }
    ]
  },
  "chord_invert": {
    "summary": "Chord inversion",
    "doc": "Given a set of notes, apply a number of inversions indicated by the `shift` parameter. Inversions being an increase to notes if `shift` is positive or decreasing the notes if `shift` is negative.\n\nAn inversion is simply rotating the chord and shifting the wrapped notes up or down an octave. For example, consider the chord :e3, :minor - `(ring 52, 55, 59)`. When we invert it once, we rotate the notes around to `(ring 55, 59, 52)`. However, because note 52 is wrapped round, it's shifted up an octave (12 semitones) so the actual first inversion of the chord :e3, :minor is `(ring 55, 59, 52 + 12)` or `(ring 55, 59, 64)`.\n\nNote that it's also possible to directly invert chords on creation with the `invert:` opt - `(chord :e3, :minor, invert: 2)`",
    "introduced": "v2.6",
    "args": {
      "required": {
        "notes": {
          "type": "list"
        },
        "shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play (chord_invert (chord :A3, \"M\"), 0)\nsleep 1\nplay (chord_invert (chord :A3, \"M\"), 1)\nsleep 1\nplay (chord_invert (chord :A3, \"M\"), 2)\n",
        "comments": "#No inversion     - (ring 57, 61, 64)\n \n#First inversion  - (ring 61, 64, 69)\n \n#Second inversion - (ring 64, 69, 73)\n"
      }
    ]
  },
  "chord_names": {
    "summary": "All chord names",
    "doc": "Returns a ring containing all chord names known to Sonic Pi",
    "introduced": "v2.6",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts chord_names\n",
        "comments": "#=>  prints a list of all the chords\n"
      }
    ]
  },
  "clear": {
    "summary": "Clear all thread locals to defaults",
    "doc": "All settings such as the current synth, BPM, random stream and tick values will be reset to their defaults. Consider using `reset` to reset all these values to those inherited from the parent thread.",
    "introduced": "v2.11",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "Clear wipes out the threads locals\nuse_synth :blade\nuse_octave 3\n\nputs \"before\"        \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\nat do\n  use_synth :tb303\n  puts rand              \n  clear\n  puts \"thread\"        \n\n\n                         \n                         \n                         \n                         \n  puts current_synth     \n\n                         \n  puts current_octave    \n\n                         \n                         \n  puts rand              \n  puts tick              \nend",
        "comments": " \n \n \n \n#=> \"before\"\n#=> :blade\n#=> 3\n#=> 0.75006103515625\n#=> 0\n \n \n \n#=> 0.9287109375\n \n#=> \"thread\"\n \n \n# The clear reset the current synth to the default\n# of :beep. We are therefore ignoring any inherited\n# synth settings. It is as if the thread was a completely\n# new Run.\n#=> :beep\n \n# The current octave defaults back to 0\n#=> 0\n \n# The random stream defaults back to the standard\n# stream used by every new Run.\n#=> 0.75006103515625\n#=> 0\n \n"
      }
    ]
  },
  "comment": {
    "summary": "Block level commenting",
    "doc": "Does not evaluate any of the code within the block. However, any optional args passed before the block *will* be evaluated although they will be ignored. See `uncomment` for switching commenting off without having to remove the comment form.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "comment do\n    play 50\n    sleep 1\n    play 62\n  end",
        "comments": "# starting a block level comment:\n# not played\n# no sleep happens\n# not played\n \n"
      }
    ]
  },
  "control": {
    "summary": "Control running synth",
    "doc": "Control a running synth node by passing new parameters to it. A synth node represents a running synth and can be obtained by assigning the return value of a call to play or sample or by specifying a parameter to the do/end block of an FX. You may modify any of the parameters you can set when triggering the synth, sample or FX. See documentation for opt details. If the synth to control is a chord, then control will change all the notes of that chord group at once to a new target set of notes - see example. Also, you may use the on: opt to conditionally trigger the control - see the docs for the `synth` and `sample` fns for more information.\n\nIf no synth to control is specified, then the last synth triggered by the current (or parent) thread will be controlled - see example below.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "node": {
          "type": "synth_node"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\nmy_node = play 50, release: 5, cutoff: 60\nsleep 1\ncontrol my_node, cutoff: 70\nsleep 1\ncontrol my_node, cutoff: 90\n",
        "comments": "# Basic control\n \n# play note 50 with release of 5 and cutoff of 60. Assign return value to variable my_node\n# Sleep for a second\n# Now modify cutoff from 60 to 70, sound is still playing\n# Sleep for another second\n# Now modify cutoff from 70 to 90, sound is still playing\n"
      },
      {
        "code": "\n\ns = synth :prophet, note: :e1, cutoff: 70, cutoff_slide: 8, release: 8\ncontrol s, cutoff: 130\n                      \n",
        "comments": "# Combining control with slide opts allows you to create nice transitions.\n \n# start synth and specify slide time for cutoff opt\n# Change the cutoff value with a control.\n# Cutoff will now slide over 8 beats from 70 to 130\n"
      },
      {
        "code": "\n\nnotes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n\ns = synth :beep, note: :e3, sustain: 8, note_slide: 0.05\n64.times do\n  control s, note: notes.tick                           \n  sleep 0.125\nend",
        "comments": "# Use a short slide time and many controls to create a sliding melody\n \n# get a random ordering of a scale\n \n# Start our synth running with a long sustain and short note slide time\n \n# Keep quickly changing the note by ticking through notes repeatedly\n \n \n"
      },
      {
        "code": "\n\nwith_fx :bitcrusher, sample_rate: 1000, sample_rate_slide: 8 do |bc|\n                                                                    \n                                                                    \n  sample :loop_garzul, rate: 1\n  control bc, sample_rate: 5000                                     \n                                                                    \nend",
        "comments": "# Controlling FX\n \n# Start FX but also use the handy || goalposts\n# to grab a handle on the running FX. We can call\n# our handle anything we want. Here we've called it bc\n \n# We can use our handle bc now just like we used s in the\n# previous example to modify the FX as it runs.\n \n"
      },
      {
        "code": "\n\ncg = play (chord :e4, :minor), sustain: 2 \nsleep 1\ncontrol cg, notes: (chord :c3, :major)    \n                                          \n                                          \n",
        "comments": "# Controlling chords\n \n# start a chord\n \n# transition to new chord.\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord.\n"
      },
      {
        "code": "\n\ncg = play (chord :e4, :minor), sustain: 4, note_slide: 3 \nsleep 1\ncontrol cg, notes: (chord :c3, :major)                   \n                                                         \n                                                         \n",
        "comments": "# Sliding between chords\n \n# start a chord\n \n# slide to new chord.\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord.\n"
      },
      {
        "code": "\n\ncg = play (chord :e3, :m13), sustain: 4, note_slide: 3 \nsleep 1\ncontrol cg, notes: (chord :c3, :major)                   \n                                                         \n                                                         \n                                                         \n                                                         \n",
        "comments": "# Sliding from a larger to smaller chord\n \n# start a chord with 7 notes\n \n# slide to new chord with fewer notes (3)\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord using ring-like indexing.\n# This means that the 4th note in the original chord will\n# be mapped onto the 1st note in the second chord and so-on.\n"
      },
      {
        "code": "\ncg = play (chord :c3, :major), sustain: 4, note_slide: 3 \nsleep 1\ncontrol cg, notes: (chord :e3, :m13)                    \n                                                         \n                                                         \n                                                         \n                                                         \n                                                         \n",
        "comments": "# Sliding from a smaller to larger chord\n# start a chord with 3 notes\n \n# slide to new chord with more notes (7)\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord.\n# This means that the 4th note in the new chord\n# will not sound as there is no 4th note in the\n# original chord.\n"
      },
      {
        "code": "\n\ns = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 8\nsleep 1                                                               \ncontrol s, cutoff: 130                                                \nsleep 3                                                               \ncontrol s, cutoff_slide: 1                                            \n                                                                      \n                                                                      \n",
        "comments": "# Changing the slide rate\n \n# Start a synth playing with a long cutoff slide\n# wait a beat\n# change the cutoff so it starts sliding slowly\n# wait for 3 beats\n# Change the cutoff_slide - the cutoff now slides more quickly to 130\n# it will now take 1 beat to slide from its *current* value\n# (somewhere between 70 and 130) to 130\n"
      },
      {
        "code": "\n\nsynth :prophet, note: :e1, release: 8                                 \nsleep 1\n16.times do\n  control note: (octs :e1, 3).tick                                    \n  sleep 0.125                                                         \nend",
        "comments": "# Controlling the last triggered synth\n \n# Every time a synth is triggered, Sonic Pi automatically remembers the node\n \n \n# This means we don't need to use an explicit variable to control the synth\n# we last triggered.\n \n"
      },
      {
        "code": "\n\nsynth :beep, release: 4                 \nsleep 0.1\ncontrol note: :e5                       \nsleep 0.5\nsynth :dsaw, release: 4                 \nsleep 0.1\ncontrol note: :e4                       \n",
        "comments": "# Controlling multiple synths without variables\n \n# Trigger a beep synth\n \n# Control last triggered synth (:beep)\n \n# Next, trigger a dsaw synth\n \n# Control last triggered synth (:dsaw)\n"
      }
    ]
  },
  "cue": {
    "summary": "Cue other threads",
    "doc": "Send a heartbeat synchronisation message containing the (virtual) timestamp of the current thread. Useful for syncing up external threads via the `sync` fn. Any opts which are passed are given to the thread which syncs on the `cue_id`. The values of the opts must be immutable. Currently numbers, symbols, booleans, nil and frozen strings, or vectors/rings/frozen arrays/maps of immutable values are supported.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "cue_id": {
          "type": "symbol"
        }
      },
      "optional": {
        "your_key": {
          "desc": "Your value"
        },
        "another_key": {
          "desc": "Another value"
        },
        "key": {
          "desc": "All these opts are passed through to the thread which syncs"
        }
      }
    },
    "examples": [
      {
        "code": "in_thread do\n    sync :foo\n    sample :ambi_lunar_land\n  end\n\n  sleep 5\n\n  cue :foo\n           \n",
        "comments": " \n# this parks the current thread waiting for a foo cue message to be received.\n \n \n \n \n \n# We send a cue message from the main thread.\n# This then unblocks the thread above and we then hear the sample\n"
      },
      {
        "code": "in_thread do  \n    loop do     \n      cue :tick \n      sleep 0.5 \n    end\n  end\n\n \n  loop do                   \n    sync :tick              \n    sample :drum_heavy_kick \n  end",
        "comments": "# Start a metronome thread\n# Loop forever:\n# sending tick heartbeat messages\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome.\n# In the main thread, just loop\n# waiting for :tick cue messages\n# after which play the drum kick sample\n \n"
      },
      {
        "code": "in_thread do  \n    loop do     \n      cue [:foo, :bar, :baz].choose\n      sleep 0.5 \n    end\n  end\n\n \n\n  in_thread do\n    loop do             \n      sync :foo         \n      sample :elec_beep \n    end\n  end\n\n  in_thread do\n    loop do             \n      sync :bar         \n      sample :elec_flip \n    end\n  end\n\n  in_thread do\n    loop do             \n      sync :baz         \n      sample :elec_blup \n    end\n  end",
        "comments": "# Start a metronome thread\n# Loop forever:\n# sending one of three tick heartbeat messages randomly\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome:\n \n \n# In the main thread, just loop\n# waiting for :foo cue messages\n# after which play the elec beep sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :bar cue messages\n# after which play the elec flip sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :baz cue messages\n# after which play the elec blup sample\n \n \n"
      },
      {
        "code": "in_thread do\n    loop do\n      cue :tick, foo: 64 \n      sleep 0.5\n    end\n  end\n\n \n\n  loop do\n    values = sync :tick\n    play values[:foo]   \n  end",
        "comments": " \n \n# sending tick heartbeat messages with a value :foo\n \n \n \n \n# The value for :foo can now be used in synced threads\n \n \n \n# play the note value from :foo\n \n"
      }
    ]
  },
  "current_arg_checks": {
    "summary": "Get current arg checking status",
    "doc": "Returns the current arg checking setting (`true` or `false`).\n\nThis can be set via the fns `use_arg_checks` and `with_arg_checks`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_arg_checks\n",
        "comments": "# Print out the current arg check setting\n"
      }
    ]
  },
  "current_beat_duration": {
    "summary": "Duration of current beat",
    "doc": "Get the duration of the current beat in seconds. This is the actual length of time which will elapse with `sleep 1`.\n\nAffected by calls to `use_bpm`, `with_bpm`, `use_sample_bpm` and `with_sample_bpm`.",
    "introduced": "v2.6",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 60\n  puts current_beat_duration\n\n  use_bpm 120\n  puts current_beat_duration\n",
        "comments": " \n#=> 1\n \n \n#=> 0.5\n"
      }
    ]
  },
  "current_bpm": {
    "summary": "Get current tempo",
    "doc": "Returns the current tempo as a bpm value.\n\nThis can be set via the fns `use_bpm`, `with_bpm`, `use_sample_bpm` and `with_sample_bpm`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_bpm\n",
        "comments": "# Print out the current bpm\n"
      }
    ]
  },
  "current_cent_tuning": {
    "summary": "Get current cent shift",
    "doc": "Returns the cent shift value.\n\nThis can be set via the fns `use_cent_tuning` and `with_cent_tuning`.",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_cent_tuning\n",
        "comments": "# Print out the current cent shift\n"
      }
    ]
  },
  "current_debug": {
    "summary": "Get current debug status",
    "doc": "Returns the current debug setting (`true` or `false`).\n\nThis can be set via the fns `use_debug` and `with_debug`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_debug\n",
        "comments": "# Print out the current debug setting\n"
      }
    ]
  },
  "current_midi_defaults": {
    "summary": "Get current MIDI defaults",
    "doc": "Returns the current MIDI defaults. This is a map of opt names to values\n\nThis can be set via the fns `use_midi_defaults`, `with_midi_defaults`, `use_merged_midi_defaults` and `with_merged_midi_defaults`.",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_midi_defaults channel: 1, port: \"foo\"\nmidi_note_on :e1\ncurrent_midi_defaults\n",
        "comments": " \n# Sends MIDI :e1 note on to channel 1 on port \"foo\"\n#=> Prints {channel: 1, port: \"foo\"}\n"
      }
    ]
  },
  "current_octave": {
    "summary": "Get current octave shift",
    "doc": "Returns the octave shift value.\n\nThis can be set via the fns `use_octave` and `with_octave`.",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_octave\n",
        "comments": "# Print out the current octave shift\n"
      }
    ]
  },
  "current_random_seed": {
    "summary": "Get current random seed",
    "doc": "Returns the current random seed.\n\nThis can be set via the fns `use_random_seed` and `with_random_seed`. It is incremented every time you use the random number generator via fns such as `choose` and `rand`.",
    "introduced": "v2.10",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_random_seed\n",
        "comments": "# Print out the current random seed\n"
      },
      {
        "code": "\nputs rand              \nputs rand              \na = current_random_seed\nputs rand              \nputs rand              \nuse_random_seed a      \n                       \nputs rand              \nputs rand              \n",
        "comments": "# Resetting the seed back to a known place\n#=>  0.75006103515625\n#=>  0.733917236328125\n# Grab the current seed\n#=> 0.464202880859375\n#=> 0.24249267578125\n# Restore the seed\n# we'll now get the same random values:\n#=> 0.464202880859375\n#=> 0.24249267578125\n"
      }
    ]
  },
  "current_sample_defaults": {
    "summary": "Get current sample defaults",
    "doc": "Returns the current sample defaults. This is a map of synth arg names to either values or functions.\n\nThis can be set via the fns `use_sample_defaults`, `with_sample_defaults`, `use_merged_sample_defaults` and `with_merged_sample_defaults`.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_sample_defaults amp: 0.5, cutoff: 80\nsample :loop_amen\nputs current_sample_defaults\n",
        "comments": " \n# Plays amen break with amp 0.5 and cutoff 80\n#=> Prints {amp: 0.5, cutoff: 80}\n"
      }
    ]
  },
  "current_sched_ahead_time": {
    "summary": "Get current sched ahead time",
    "doc": "Returns the current schedule ahead time.\n\nThis can be set via the fn `set_sched_ahead_time!`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_sched_ahead_time! 0.5\nputs current_sched_ahead_time\n",
        "comments": " \n# Prints 0.5\n"
      }
    ]
  },
  "current_synth": {
    "summary": "Get current synth",
    "doc": "Returns the current synth name.\n\nThis can be set via the fns `use_synth` and `with_synth`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_synth\n",
        "comments": "# Print out the current synth name\n"
      }
    ]
  },
  "current_synth_defaults": {
    "summary": "Get current synth defaults",
    "doc": "Returns the current synth defaults. This is a map of synth arg names to values.\n\nThis can be set via the fns `use_synth_defaults`, `with_synth_defaults`, `use_merged_synth_defaults` and `with_merged_synth_defaults`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_synth_defaults amp: 0.5, cutoff: 80\nplay 50\nputs current_synth_defaults\n",
        "comments": " \n# Plays note 50 with amp 0.5 and cutoff 80\n#=> Prints {amp: 0.5, cutoff: 80}\n"
      }
    ]
  },
  "current_time": {
    "summary": "Get current (logically quantized) time",
    "doc": "Returns the current logical time. This is a 'wall-clock' time which should typically be pretty similar to Time.now but quantised to a nearby sleep point in the thread. May be quite different to Time.now within a time_warp!\n\nUnlike `Time.now`, Multiple calls to `current_time` with no interleaved calls to `sleep` or `sync` will return the same value.",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_time\n",
        "comments": "# 2017-03-19 23:37:57 +0000\n"
      },
      {
        "code": "\n\n\n\nputs \"A\", Time.now.to_f\nputs \"B\", __system_thread_locals.get(:sonic_pi_spider_time).to_f\nputs \"C\", Time.now.to_f\nputs \"D\", __system_thread_locals.get(:sonic_pi_spider_time).to_f\nputs \"E\", __system_thread_locals.get(:sonic_pi_spider_time).to_f\n",
        "comments": "# The difference between current_time and Time.now\n# See that Time.now is continuous and current_time is discrete\n#\n# {run: 19, time: 0.0}\n# ├─ \"A\" 1489966042.761211\n# ├─ \"B\" 1489966042.760181\n# ├─ \"C\" 1489966042.761235\n# ├─ \"D\" 1489966042.760181\n# └─ \"E\" 1489966042.760181\n"
      }
    ]
  },
  "current_transpose": {
    "summary": "Get current transposition",
    "doc": "Returns the current transpose value.\n\nThis can be set via the fns `use_transpose` and `with_transpose`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_transpose\n",
        "comments": "# Print out the current transpose value\n"
      }
    ]
  },
  "current_volume": {
    "summary": "Get current volume",
    "doc": "Returns the current volume.\n\nThis can be set via the fn `set_volume!`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts current_volume\n",
        "comments": "# Print out the current volume\n"
      },
      {
        "code": "set_volume! 2\nputs current_volume\n",
        "comments": " \n#=> 2\n"
      }
    ]
  },
  "dec": {
    "summary": "Decrement",
    "doc": "Decrement a number by `1`. Equivalent to `n - 1`",
    "introduced": "v2.1",
    "args": {
      "required": {
        "n": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "dec 1\n",
        "comments": "# returns 0\n"
      },
      {
        "code": "dec -1\n",
        "comments": "# returns -2\n"
      }
    ]
  },
  "define": {
    "summary": "Define a new function",
    "doc": "Allows you to group a bunch of code and give it your own name for future re-use. Functions are very useful for structuring your code. They are also the gateway into live coding as you may redefine a function whilst a thread is calling it, and the next time the thread calls your function, it will use the latest definition.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  define :foo do\n    play 50\n    sleep 1\n  end\n\n \n  foo\n\n \n \n  3.times do\n    foo\n  end",
        "comments": "# Define a new function called foo\n \n \n \n \n \n# Call foo on its own\n \n \n# You can use foo anywhere you would use normal code.\n# For example, in a block:\n \n \n \n"
      }
    ]
  },
  "defonce": {
    "summary": "Define a named value only once",
    "doc": "Allows you to assign the result of some code to a name, with the property that the code will only execute once - therefore stopping re-definitions. This is useful for defining values that you use in your compositions but you don't want to reset every time you press run. You may force the block to execute again regardless of whether or not it has executed once already by using the override option (see examples).",
    "introduced": "v2.0",
    "args": {
      "required": {
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
        "override": {
          "desc": "If set to true, re-definitions are allowed and this acts like define"
        }
      }
    },
    "examples": [
      {
        "code": "defonce :foo do \n    sleep 1       \n                  \n                  \n    puts \"hello\"\n    10            \n  end\n\n \n  puts foo\n\n \n  puts foo\n\n\n\n  defonce :foo do\n    puts \"you can't redefine me\"\n    15\n  end\n\n  puts foo\n\n \n \n  3.times do\n    play foo \n  end",
        "comments": "# Define a new function called foo\n# Sleep for a beat in the function definition. Note that this amount\n# of time in seconds will depend on the current BPM of the live_loop\n# or thread calling this function.\n# Print hello\n# Return a value of 10\n \n \n# Call foo on its own\n# The run sleeps for a beat and prints \"hello\" before returning 10\n \n# Try it again:\n# This time the run doesn't sleep or print anything out. However, 10 is still returned.\n \n \n \n# Try redefining foo\n \n \n \n \n# We still don't see any printing or sleeping, and the result is still 10\n \n# You can use foo anywhere you would use normal code.\n# For example, in a block:\n \n# play 10\n \n"
      },
      {
        "code": "defonce :bar do\n    50\n  end\n\n  play bar\n\n  defonce :bar do\n    70\n  end\n\n  play bar\n\n  defonce :bar, override: true do \n    80\n  end\n\n  play bar\n",
        "comments": " \n \n \n \n# plays 50\n \n# This redefinition doesn't work due to the behaviour of defonce\n \n \n \n# Still plays 50\n \n# Force definition to take place with override option\n \n \n \n# plays 80\n"
      }
    ]
  },
  "degree": {
    "summary": "Convert a degree into a note",
    "doc": "For a given scale and tonic it takes a symbol/string/number and resolves it to a midi note. The degree can be either a decimal number or a roman numeral (if it's a string or symbol), and may optionally be prefixed an augmentation (`a`/`d` for an augmented/diminished interval, `aa`/`dd` for double augmented/diminished or `p` for a perfect (unchanged) interval).",
    "introduced": "v2.1",
    "args": {
      "required": {
        "degree": {
          "type": "symbol_or_number"
        },
        "tonic": {
          "type": "symbol"
        },
        "scale": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play degree(:iii, :D3, :major)\nplay degree(3, :C3, :minor)\nplay degree('d5', :B3, :major)\n",
        "comments": "# major third up from :D3\n# minor third up from :C3\n# diminished fifth up from :B3\n"
      },
      {
        "code": "chrd = []\n[:i, :iii, :v, :dvii, :dix, :Axi, :xiii].each do |d| \n  chrd.append (degree d, :Fs, :major) \nend\nplay chrd \n",
        "comments": " \n# for each degree in the chord\n# add the corresponding note\n \n# play an F# 13+11-9 chord, using roman numeral symbols\n"
      },
      {
        "code": "chrd = []\n['1', '3', '5', 'd7', 'd9', 'A11', '13'].each do |d|\n  chrd.append (degree d, :Fs, :major)\nend\nplay chrd \n",
        "comments": " \n \n \n \n# the same chord as above, but using decimal number strings\n"
      }
    ]
  },
  "density": {
    "summary": "Squash and repeat time",
    "doc": "Runs the block `d` times with the bpm for the block also multiplied by `d`. Great for repeating sections a number of times faster yet keeping within a fixed time. If `d` is less than 1, then time will be stretched accordingly and the block will take longer to complete.",
    "introduced": "v2.3",
    "args": {
      "required": {
        "d": {
          "type": "density"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 60  \n\n  density 2 do      \n                    \n    sample :bd_haus\n    sleep 0.5       \n  end",
        "comments": "# Set the BPM to 60\n \n# BPM for block is now 120\n# block is called 2.times\n# sample is played twice\n# sleep is 0.25s\n \n"
      },
      {
        "code": "density 2 do |idx|\n    puts idx        \n    sleep 0.5       \n  end",
        "comments": "# You may also pass a param to the block similar to n.times\n# prints out 0, 1\n# sleep is 0.25s\n \n"
      },
      {
        "code": "density 0.5 do         \n                         \n                         \n    play 80, release: 1  \n    sleep 0.5            \n  end",
        "comments": "# Specifying a density val of < 1 will stretch out time\n# A density of 0.5 will double the length of the block's\n# execution time.\n# plays note 80 with 2s release\n# sleep is 1s\n \n"
      }
    ]
  },
  "dice": {
    "summary": "Random dice throw",
    "doc": "Throws a dice with the specified num_sides (defaults to `6`) and returns the score as a number between `1` and `num_sides`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "num_sides": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "dice\n      \n",
        "comments": "# will return a number between 1 and 6 inclusively\n# (with an even probability distribution).\n"
      },
      {
        "code": "dice 3\n",
        "comments": "# will return a number between 1 and 3 inclusively\n"
      }
    ]
  },
  "doubles": {
    "summary": "Create a ring of successive doubles",
    "doc": "Create a ring containing the results of successive doubling of the `start` value. If `num_doubles` is negative, will return a ring of `halves`.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "start": {
          "type": "number"
        },
        "num_doubles": {
          "type": "int"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(doubles 60, 2) \n",
        "comments": "#=> (ring 60, 120)\n"
      },
      {
        "code": "(doubles 1.5, 3)\n",
        "comments": "#=> (ring 1.5, 3, 6)\n"
      },
      {
        "code": "(doubles 1.5, 5)\n",
        "comments": "#=> (ring 1.5, 3, 6, 12, 24)\n"
      },
      {
        "code": "(doubles 100, -4)\n",
        "comments": "#=> (ring 100, 50, 25, 12.5)\n"
      }
    ]
  },
  "eval_file": {
    "summary": "Evaluate the contents of the file inline in the current thread like a function.",
    "doc": "Reads the full contents of the file with `path` and executes within the current thread like a function call.",
    "introduced": "v3.2",
    "args": {
      "required": {
        "filename": {
          "type": "path"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "eval_file \"~/path/to/sonic-pi-code.rb\"\n",
        "comments": "#=> will run the contents of this file\n"
      }
    ]
  },
  "factor?": {
    "summary": "Factor test",
    "doc": "Test to see if factor is indeed a factor of `val`. In other words, can `val` be divided exactly by factor.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "val": {
          "type": "number"
        },
        "factor": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "factor?(10, 2)\n",
        "comments": "# true - 10 is a multiple of 2 (2 * 5 = 10)\n"
      },
      {
        "code": "factor?(11, 2)\n",
        "comments": "#false - 11 is not a multiple of 2\n"
      },
      {
        "code": "factor?(2, 0.5)\n",
        "comments": "#true - 2 is a multiple of 0.5 (0.5 * 4 = 2)\n"
      }
    ]
  },
  "fx_names": {
    "summary": "Get all FX names",
    "doc": "Return a list of all the FX available",
    "introduced": "v2.10",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "get": {
    "summary": "Get information from the Time State",
    "doc": "Retrieve information from Time State set prior to the current time from either the current or any other thread. If called multiple times will always return the same value unless a call to `sleep`, `sync`, `set` or `cue` is interleaved. Also, calls to `get` will always return the same value across Runs for deterministic behaviour - which means you may safely use it in your compositions for repeatable music. If no value is stored with the relevant key, will return `nil`.\n\nMay be used within a `time_warp` to retrieve past events. If in a time warp, `get` can not be called from a future position. Does not advance time.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "time_state_key": {
          "type": "default"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "get :foo\n",
        "comments": "#=> returns the last value set as :foo, or nil\n"
      },
      {
        "code": "set :foo, 3\nget[:foo]\n",
        "comments": " \n#=> returns 3\n"
      },
      {
        "code": "in_thread do\n  set :foo, 3\nend\n\nin_thread do\n  puts get[:foo] \nend",
        "comments": " \n \n \n \n \n#=> always returns 3 (no race conditions here!)\n \n"
      }
    ]
  },
  "halves": {
    "summary": "Create a ring of successive halves",
    "doc": "Create a ring containing the results of successive halving of the `start` value. If `num_halves` is negative, will return a ring of `doubles`.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "start": {
          "type": "number"
        },
        "num_halves": {
          "type": "int"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(halves 60, 2) \n",
        "comments": "#=> (ring 60, 30)\n"
      },
      {
        "code": "(halves 120, 3)\n",
        "comments": "#=> (ring 120, 60, 30)\n"
      },
      {
        "code": "(halves 120, 5)\n",
        "comments": "#=> (ring 120, 60, 30, 15, 7.5)\n"
      },
      {
        "code": "(halves 30, -5)\n",
        "comments": "#=> (ring 30, 60, 120, 240, 480)\n"
      }
    ]
  },
  "hz_to_midi": {
    "summary": "Hz to MIDI conversion",
    "doc": "Convert a frequency in hz to a midi note. Note that the result isn't an integer and there is a potential for some very minor rounding errors.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "freq": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "hz_to_midi(261.63)\n",
        "comments": "#=> 60.0003\n"
      }
    ]
  },
  "in_thread": {
    "summary": "Run code block at the same time",
    "doc": "Execute a given block (between `do` ... `end`) in a new thread. Use for playing multiple 'parts' at once. Each new thread created inherits all the use/with defaults of the parent thread such as the time, current synth, bpm, default synth args, etc. Despite inheriting defaults from the parent thread, any modifications of the defaults in the new thread will *not* affect the parent thread. Threads may be named with the `name:` optional arg. Named threads will print their name in the logging pane when they print their activity. If you attempt to create a new named thread with a name that is already in use by another executing thread, no new thread will be created.\n\nIt is possible to delay the initial trigger of the thread on creation with both the `delay:` and `sync:` opts. See their respective docstrings. If both `delay:` and `sync:` are specified, on initial thread creation first the delay will be honoured and then the sync.\n",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
        "name": {
          "desc": "Make this thread a named thread with name. If a thread with this name already exists, a new thread will not be created."
        },
        "delay": {
          "desc": "Initial delay in beats before the thread starts. Default is 0."
        },
        "sync": {
          "desc": "Initial sync symbol. Will sync with this symbol before the thread starts."
        },
        "sync_bpm": {
          "desc": "Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol."
        }
      }
    },
    "examples": [
      {
        "code": "loop do     \n    play 50   \n    sleep 1   \n  end\n\n  loop do     \n    play 55\n    sleep 0.5\n  end",
        "comments": "# If you write two loops one after another like this,\n# then only the first loop will execute as the loop acts\n# like a trap not letting the flow of control out\n \n \n# This code is never executed.\n \n \n \n"
      },
      {
        "code": "\n \n \n\n \n \n \n \n\n  in_thread do\n   \n    loop do\n     \n      play 50\n      sleep 1\n    end\n  end\n\n \n\n  loop do     \n    play 55\n    sleep 0.5\n  end",
        "comments": "# In order to play two loops at the same time, the first loops need to\n# be in a thread (note that it's probably more idiomatic to use live_loop\n# when performing):\n \n# By wrapping our loop in an in_thread block, we split the\n# control flow into two parts. One flows into the loop (a) and\n# the other part flows immediately after the in_thread block (b).\n# both parts of the control flow execute at exactly the same time.\n \n \n# (a)\n \n# (a)\n \n \n \n \n \n# (b)\n \n# This loop is executed thanks to the thread above\n \n \n \n"
      },
      {
        "code": "use_bpm 120 \n  use_synth :dsaw \n\n  in_thread do    \n    play 50       \n    use_synth :fm \n    sleep 1       \n    play 38       \n  end\n\n  play 62         \n  sleep 2         \n  play 67         \n",
        "comments": "# Set the bpm to be double rate\n# Set the current synth to be :dsaw\n \n# Create a new thread\n# Play note 50 at time 0\n# Switch to fm synth (only affects this thread)\n# sleep for 0.5 seconds (as we're double rate)\n# Play note 38 at time 0.5\n \n \n# Play note 62 at time 0 (with dsaw synth)\n# sleep 1s\n# Play note 67 at time 1s (also with dsaw synth)\n"
      },
      {
        "code": "in_thread(name: :foo) do\n    loop do\n      sample :drum_bass_hard\n      sleep 1\n    end\n  end\n\n  in_thread(name: :foo) do\n    loop do               \n      sample :elec_chime  \n      sleep 0.5\n    end\n  end",
        "comments": "# Here we've created a named thread\n \n \n \n \n \n \n# This thread isn't created as the name is\n# the same as the previous thread which is\n# still executing.\n \n \n \n"
      },
      {
        "code": "\n  define :foo do \n    play 50      \n    sleep 1      \n  end\n\n  in_thread(name: :main) do \n    loop do                 \n      foo                   \n    end\n  end\n\n \n \n \n \n \n",
        "comments": "# Named threads work well with functions for live coding:\n# Create a function foo\n# which does something simple\n# and sleeps for some time\n \n \n# Create a named thread\n# which loops forever\n# calling our function\n \n \n \n# We are now free to modify the contents of :foo and re-run the entire buffer.\n# We'll hear the effect immediately without having to stop and re-start the code.\n# This is because our fn has been redefined, (which our thread will pick up) and\n# due to the thread being named, the second re-run will not create a new similarly\n# named thread. This is a nice pattern for live coding and is the basis of live_loop.\n"
      },
      {
        "code": "\n  in_thread delay: 1 do\n    sample :ambi_lunar_land\n  end\n\n  play 80                  \n",
        "comments": "#Delaying the start of a thread\n \n# this sample is not triggered at time 0 but after 1 beat\n \n \n# Note 80 is played at time 0\n"
      }
    ]
  },
  "inc": {
    "summary": "Increment",
    "doc": "Increment a number by `1`. Equivalent to `n + 1`",
    "introduced": "v2.1",
    "args": {
      "required": {
        "n": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "inc 1\n",
        "comments": "# returns 2\n"
      },
      {
        "code": "inc -1\n",
        "comments": "# returns 0\n"
      }
    ]
  },
  "kill": {
    "summary": "Kill synth",
    "doc": "Kill a running synth sound or sample. In order to kill a sound, you need to have stored a reference to it in a variable.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "node": {
          "type": "synth_node"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nfoo = play 50, release: 4\nsleep 1\n\nkill foo",
        "comments": "# store a reference to a running synth in a variable called foo:\n \n \n# foo is still playing, but we can kill it early:\n \n"
      },
      {
        "code": "bar = sample :loop_amen\nsleep 0.5\nkill bar",
        "comments": " \n \n \n"
      }
    ]
  },
  "knit": {
    "summary": "Knit a sequence of repeated values",
    "doc": "Knits a series of value, count pairs to create a ring buffer where each value is repeated count times.",
    "introduced": "v2.2",
    "args": {
      "required": {
        "value": {
          "type": "anything"
        },
        "count": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(knit 1, 5)   \n",
        "comments": "#=> (ring 1, 1, 1, 1, 1)\n"
      },
      {
        "code": "(knit :e2, 2, :c2, 3)\n",
        "comments": "#=> (ring :e2, :e2, :c2, :c2, :c2)\n"
      }
    ]
  },
  "line": {
    "summary": "Create a ring buffer representing a straight line",
    "doc": "Create a ring buffer representing a straight line between start and finish of steps elements. Steps defaults to `4`. Indexes wrap around positively and negatively. Similar to `range`.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "start": {
          "type": "number"
        },
        "finish": {
          "type": "number"
        }
      },
      "optional": {
        "steps": {
          "desc": "number of slices or segments along the line"
        },
        "inclusive": {
          "desc": "boolean value representing whether or not to include finish value in line"
        }
      }
    },
    "examples": [
      {
        "code": "(line 0, 4, steps: 4)   \n",
        "comments": "#=> (ring 0.0, 1.0, 2.0, 3.0)\n"
      },
      {
        "code": "(line 5, 0, steps: 5)   \n",
        "comments": "#=> (ring 5.0, 4.0, 3.0, 2.0, 1.0)\n"
      },
      {
        "code": "(line 0, 3, inclusive: true)\n",
        "comments": "#=> (ring 0.0, 1.0, 2.0, 3.0)\n"
      }
    ]
  },
  "live_audio": {
    "summary": "A named audio stream live from your soundcard",
    "doc": "Create a named synthesiser which works similar to `play`, `sample` or `synth`. Rather than synthesising the sound mathematically or playing back recorded audio, it streams audio live from your sound card.\n\nHowever, unlike `play`, `sample` and `synth`, which allow multiple similar synths to play at the same time (i.e. a chord) only one `live_audio` synth of a given name may exist in the system at any one time. This is similar to `live_loop` where only one live loop of each name may exist at any one time. See examples for further information.\n\nAn additional difference is that `live_audio` will create an infinitely long synth rather than be timed to an envelope like the standard `synth` and `sample` synths. This is particularly suitable for working with continuous incoming audio streams where the source of the audio is unknown (for example, it may be a guitar, an analog synth or an electronic violin). If the source is continuous, then it may not be suited to being stitched together by successive enveloped calls to something like: `synth :sound_in, attack: 0, sustain: 4, release: 0`. If we were to `live_loop` this with a `sleep 4` to match the sustain duration, we would get something that emulated a continuous stream, but for certain inputs you'll hear clicking at the seams between each successive call to `synth` where the final part of the audio signal from the previous synth doesn't precisely match up with the start of the signal in the next synth due to very minor timing differences.\n\nAnother important feature of `live_audio` is that it will automatically move an existing `live_audio` synth into the current FX context. This means you can live code the FX chain around the live stream and it will update automatically. See examples.\n\nTo stop a `live_audio` synth, use the `:stop` arg: `live_audio :foo, :stop`.\n.\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
        "input": {
          "desc": "The audio card input to read audio from."
        },
        "stereo": {
          "desc": "If set to truthy value (true, 1) will read from two consecutive audio card inputs."
        }
      }
    },
    "examples": [
      {
        "code": "\nlive_audio :foo \n",
        "comments": "# Basic usage\n# Play whatever audio is coming into the sound card on input 1\n"
      },
      {
        "code": "\nlive_audio :foo, input: 3 \n",
        "comments": "# Specify an input\n# Play whatever audio is coming into the sound card on input 3\n"
      },
      {
        "code": "\nlive_audio :foo, input: 3, stereo: true \n                                        \n",
        "comments": "# Work with stereo input\n# Play whatever audio is coming into the sound card on inputs 3 and 4\n# as a stereo stream\n"
      },
      {
        "code": "\nlive_audio :guitar    \n\nsleep 2               \n\nwith_fx :reverb do\n  live_audio :guitar  \nend\n\nsleep 2               \n\nlive_audio :guitar    \n",
        "comments": "# Switching audio contexts (i.e. changing FX)\n# Play whatever audio is coming into the sound card on input 1\n \n# Wait for 2 seconds then...\n \n \n# Add reverb to the audio from input 1\n \n \n# Wait for another 2 seconds then...\n \n# Remove the reverb from input 1\n"
      },
      {
        "code": "\n\nlive_loop :foo do\n  with_fx [:reverb, :distortion, :echo].choose do  \n    live_audio :voice                              \n  end                                              \n  sleep 8\nend",
        "comments": "# Working with live_loops\n \n \n# chooses a new FX each time round the live loop\n# the audio stream from input 1 will be moved to the\n# new FX and the old FX will complete and finish as normal.\n \n \n"
      },
      {
        "code": "\n\nlive_audio :foo           \nlive_audio :bar, input: 2 \n\nsleep 3                   \n\nlive_audio :foo, :stop    \n                          \n",
        "comments": "# Stopping\n \n#=> start playing audio from input 1\n#=> start playing audio from input 2\n \n#=> wait for 3s...\n \n#=> stop playing audio from input 1\n#=> (live_audio :bar is still playing)\n"
      }
    ]
  },
  "live_loop": {
    "summary": "A loop for live coding",
    "doc": "Loop the do/end block forever. However, unlike a basic loop, a live_loop has two special properties. Firstly it runs in a thread - so you can have any number of live loops running at the same time (concurrently). Secondly, you can change the behaviour of a live loop whilst it is still running without needing to stop it. Live loops are therefore the secret to live coding with Sonic Pi.\n\nAs live loops are excecuted within a named in_thread, they behave similarly. See the in_thread documentation for all the details. However, it's worth mentioning a few important points here. Firstly, only one live loop with a given name can run at any one time. Therefore, if you define two or more `live_loop`s called `:foo` only one will be running. Another important aspect of `live_loop`s is that they manage their own thread locals set with the `use_*` and `with_*` fns. This means that each `live_loop` can have its own separate default synth, BPM and sample defaults. When a `live_loop` is *first* created, it inherits the thread locals from the parent thread, but once it has started, the only way to change them is by re-defining the do/end body of the `live_loop`. See the examples below for details. Finally, as mentioned above, provided their names are different, you may have many `live_loop`s executing at once.\n\nA typical way of live coding with live loops is to define a number of them in a buffer, hit Run to start them and then to modify their do/end blocks and then hit Run again. This will not create any more thread, but instead just modify the behaviour of the existing threads. The changes will *not* happen immediately. Instead, they will only happen the next time round the loop. This is because the behaviour of each live loop is implemented with a standard function. When a live loop is updated, the function definition is also updated. Each time round the live loop, the function is called, so the new behviour is only observed next time round the loop.\n\nAlso sends a `cue` with the same name each time the `live_loop` repeats. This may be used to `sync` with other threads and `live_loop`s.\n\nIf the `live_loop` block is given a parameter, this is given the result of the last run of the loop (with initial value either being `0` or an init arg). This allows you to 'thread' values across loops.\n\nFinally, it is possible to delay the initial trigger of the live_loop on creation with both the `delay:` and `sync:` opts. See their respective docstrings. If both `delay:` and `sync:` are specified, on initial live_loop creation first the delay will be honoured and then the sync.\n",
    "introduced": "v2.1",
    "args": {
      "required": {
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
        "init": {
          "desc": "initial value for optional block arg"
        },
        "auto_cue": {
          "desc": "enable or disable automatic cue (default is true)"
        },
        "delay": {
          "desc": "Initial delay in beats before the live_loop starts. Default is 0."
        },
        "sync": {
          "desc": "Initial sync symbol. Will sync with this symbol before the live_loop starts."
        },
        "sync_bpm": {
          "desc": "Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol."
        },
        "seed": {
          "desc": "override initial random generator seed before starting loop."
        }
      }
    },
    "examples": [
      {
        "code": "\n\nlive_loop :ping do \n  sample :elec_ping\n  sleep 1          \nend",
        "comments": "# Define and start a simple live loop\n \n# Create a live loop called :ping\n# This live loops plays the :elec_ping sample\n# Then sleeps for 1 beat before repeating\n \n"
      },
      {
        "code": "\n\nlive_loop :ping do \n  sample :elec_ping\n                   \n                   \n                   \nend",
        "comments": "# Every live loop must sleep or sync\n \n# Create a live loop called :ping\n# This live loops plays the :elec_ping sample\n# However, because the do/end lock of the live loop does not\n# contain any calls to sleep or sync, the live loop stops at\n# the end of the first loop with a 'Did not sleep' error.\n \n"
      },
      {
        "code": "\nlive_loop :foo do \n  play 70\n  sleep 1\nend\n\nlive_loop :bar do \n  sample :bd_haus \n  sleep 0.5       \nend",
        "comments": "# Multiple live loops will play at the same time\n# Start a live loop called :foo\n \n \n \n \n# Start another live loop called :bar\n# Both :foo and :bar will be playing\n# at the same time.\n \n"
      },
      {
        "code": "\nuse_bpm 30\nlive_loop :foo do\n  play 70          \n  sleep 1          \nend",
        "comments": "# Live loops inherit external use_* thread locals\n \n \n# live loop :foo now has a BPM of 30\n# This sleep will be for 2 seconds\n \n"
      },
      {
        "code": "\nlive_loop :foo do\n  use_bpm 30      \n  play 70\n  sleep 1         \nend\n\nlive_loop :bar do\n  use_bpm 120     \n  play 82\n  sleep 1         \nend",
        "comments": "# Live loops can have their own thread locals\n \n# Set the BPM of live loop :foo to 30\n \n# This sleep will be for 2 seconds\n \n \n \n# Set the BPM of live loop :bar to 120\n \n# This sleep will be for 0.5 seconds\n \n"
      },
      {
        "code": "\nlive_loop :foo do |a| \n  puts a              \n  sleep 1\n  a += 1              \nend",
        "comments": "# Live loops can pass values between iterations\n# pass a param (a) to the block (inits to 0)\n# prints out all the integers\n \n# increment a by 1 (last value is passed back into the loop)\n \n"
      },
      {
        "code": "\nlive_loop :foo do \n  play 70\n  sleep 1\nend\n\nlive_loop :foo do \n  sample :bd_haus \n  sleep 0.5       \n                  \nend               \n                  \n",
        "comments": "# Live loop names must be unique\n# Start a live loop called :foo\n \n \n \n \n# Attempt to start another also called :foo\n# With a different do/end block\n# This will not start another live loop\n# but instead replace the behaviour of the first.\n# There will only be one live loop running playing\n# The bass drum\n"
      },
      {
        "code": "\nlive_loop :foo, sync: :bar do\n play 70                     \n sleep 1                     \nend\n\nsleep 4                      \n\nlive_loop :bar do            \n  sample :bd_haus            \n  sleep 0.5                  \nend                          \n\n                             \n                             \n                             \n                             \n                             \n                             \n                             \n",
        "comments": "# You can sync multiple live loops together\n# Wait for a :bar cue event before starting :foo\n# Live loop :foo is therefore blocked and does\n# not make a sound initially\n \n \n# Wait for 4 beats\n \n# Start a live loop called :foo which will emit a :bar\n# cue message therefore releasing the :foo live loop.\n# Live loop :foo therefore starts and also inherits the\n# logical time of live loop :bar.\n \n# This pattern is also useful to re-sync live loops after\n# errors are made. For example, when modifying live loop :foo\n# it is possible to introduce a runtime error which will stop\n# :foo but not :bar (as they are separate, isolated threads).\n# Once the error has been fixed and the code is re-run, :foo\n# will automatically wait for :bar to loop round and restart\n# in sync with the correct virtual clock.\n"
      }
    ]
  },
  "load_buffer": {
    "summary": "Load the contents of a file to the current buffer",
    "doc": "Given a path to a file, will read the contents and load it into the current buffer. This will replace any previous content.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "load_buffer \"~/sonic-pi-tracks/phat-beats.rb\"\n",
        "comments": "# will replace content of current buffer with contents of the file\n"
      }
    ]
  },
  "load_example": {
    "summary": "Load a built-in example",
    "doc": "Given a keyword representing an example, will load it into the current buffer. This will replace any previous content.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "load_example :rerezzed\n",
        "comments": "# will replace content of current buffer with the rerezzed example\n"
      }
    ]
  },
  "load_sample": {
    "summary": "Pre-load first matching sample",
    "doc": "Given a path to a `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` file, pre-loads the sample into memory.\n\nYou may also specify the same set of source and filter pre-args available to `sample` itself. `load_sample` will then load all matching samples. See `sample`'s docs for more information.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "load_sample :elec_blip\nsample :elec_blip\n",
        "comments": "# :elec_blip is now loaded and ready to play as a sample\n# No delay takes place when attempting to trigger it\n"
      },
      {
        "code": "\ndir = \"/path/to/sample/dir\"\nload_sample dir\nload_sample dir, 1\nload_sample dir, :foo\nload_sample dir, \"quux\"\nload_sample dir, /[Bb]ar/\n",
        "comments": "# Using source and filter pre-args\n \n# loads first matching sample in \"/path/to/sample/dir\"\n# loads sample with index 1 in \"/path/to/sample/dir\"\n# loads sample with name \"foo\" in \"/path/to/sample/dir\"\n# loads first sample with file name containing \"quux\" in \"/path/to/sample/dir\"\n# loads first sample which matches regex /[Bb]ar/ in \"/path/to/sample/dir\"\n"
      }
    ]
  },
  "load_samples": {
    "summary": "Pre-load all matching samples",
    "doc": "Given a directory containing multiple `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` files, pre-loads all the samples into memory.\n\n You may also specify the same set of source and filter pre-args available to `sample` itself. `load_sample` will load all matching samples (not just the sample `sample` would play given the same opts) - see `sample`'s docs for more information.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "paths": {
          "type": "list"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "load_sample :elec_blip\n sample :elec_blip\n",
        "comments": "# :elec_blip is now loaded and ready to play as a sample\n# No delay takes place when attempting to trigger it\n"
      },
      {
        "code": "\n dir = \"/path/to/sample/dir\"\n load_sample dir\n load_sample dir, 1\n load_sample dir, :foo\n load_sample dir, \"quux\"\n load_sample dir, /[Bb]ar/\n",
        "comments": "# Using source and filter pre-args\n \n# loads all samples in \"/path/to/sample/dir\"\n# loads sample with index 1 in \"/path/to/sample/dir\"\n# loads sample with name \"foo\" in \"/path/to/sample/dir\"\n# loads all samples with file names containing \"quux\" in \"/path/to/sample/dir\"\n# loads all samples which match regex /[Bb]ar/ in \"/path/to/sample/dir\"\n"
      }
    ]
  },
  "load_synthdefs": {
    "summary": "Load external synthdefs",
    "doc": "Load all pre-compiled synth designs in the specified directory. The binary files containing synth designs need to have the extension `.scsyndef`. This is useful if you wish to use your own SuperCollider synthesiser designs within Sonic Pi.\n\n## Important notes\n\nYou may not trigger external synthdefs unless you enable the following GUI preference:\n\n```\nStudio -> Synths and FX -> Enable external synths and FX\n```\n\nAlso, if you wish your synth to work with Sonic Pi's automatic stereo sound infrastructure *you need to ensure your synth outputs a stereo signal* to an audio bus with an index specified by a synth arg named `out_bus`. For example, the following synth would work nicely:\n\n\n    (\n    SynthDef(\\piTest,\n             {|freq = 200, amp = 1, out_bus = 0 |\n               Out.ar(out_bus,\n                      SinOsc.ar([freq,freq],0,0.5)* Line.kr(1, 0, 5, amp, doneAction: 2))}\n    ).writeDefFile(\"/Users/sam/Desktop/\")\n    )\n\n\n    ",
    "introduced": "v2.0",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "load_synthdefs \"~/Desktop/my_noises\"\n",
        "comments": "# Load all synthdefs in my_noises folder\n"
      }
    ]
  },
  "look": {
    "summary": "Obtain value of a tick",
    "doc": "Read and return value of default tick. If a `key` is specified, read the value of that specific tick. Ticks are `in_thread` and `live_loop` local, so the tick read will be the tick of the current thread calling `look`.",
    "introduced": "v2.6",
    "args": {
      "required": {
      },
      "optional": {
        "offset": {
          "desc": "Offset to add to index returned. Useful when calling look on lists, rings and vectors to offset the returned value"
        }
      }
    },
    "examples": [
      {
        "code": "puts look\n  puts look\n  puts look\n",
        "comments": "#=> 0\n#=> 0\n#=> 0 # look doesn't advance the tick, it just returns the current value\n"
      },
      {
        "code": "puts look\n  tick\n  puts look\n  tick\n  puts look\n  puts look\n  tick\n  puts look\n",
        "comments": "#=> 0 # A look is always 0 before the first tick\n# advance the tick\n#=> 0 # Note: a look is still 0 after the first tick.\n \n#=> 1\n#=> 1 # making multiple calls to look doesn't affect tick value\n \n#=> 2\n"
      },
      {
        "code": "tick(:foo)\n  tick(:foo)\n  puts look(:foo)\n  puts look\n  puts look(:bar)\n",
        "comments": " \n \n#=> 1 (keyed look :foo has been advanced)\n#=> 0 (default look hasn't been advanced)\n#=> 0 (other keyed looks haven't been advanced either)\n"
      },
      {
        "code": "\n  live_loop :foo do\n    tick                                     \n    use_synth :beep\n    play (scale :e3, :minor_pentatonic).look \n    sleep 0.5\n    use_synth :square\n    play (ring :e1, :e2, :e3).look, release: 0.25\n    sleep 0.25\n  end",
        "comments": "# You can call look on lists and rings\n \n# advance the default tick\n \n# look into the default tick to play all notes in sequence\n \n \n# use the same look on another ring\n \n \n"
      },
      {
        "code": "\nputs look(0)    \nputs look(4)    \nputs look(-4)   \nputs look(20.3) \n",
        "comments": "# Returns numbers unchanged if single argument\n#=> 0\n#=> 4\n#=> -4\n#=> 20.3\n"
      }
    ]
  },
  "loop": {
    "summary": "Repeat do/end block forever",
    "doc": "Given a do/end block, repeats it forever. Note that once the program enters the loop - it will not move on but will instead stay within the loop. Plain loops like this are like black holes - instead of sucking in the light they suck in the program.\n\nThe loop must either `sleep` or `sync` each time round otherwise it will stop and throw an error. This is to stop the loop from spinning out of control and locking the system.\n\nFor a more powerful, flexible loop built for live coding see `live_loop`.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 70      \n\nloop do\n  play 50    \n  sleep 1\n  play 62\n  sleep 2\nend\n\nplay 80     \n",
        "comments": "# note 70 is played\n \n \n# This loop will repeat notes 50 and 62 forever\n \n \n \n \n \n# This is *never* played as the program is trapped in the loop above\n"
      }
    ]
  },
  "map": {
    "summary": "Create an immutable map",
    "doc": "Create a new immutable key/value map from args. ",
    "introduced": "v2.11",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(map foo: 1, bar: 2)[:foo]\n",
        "comments": "#=> 1\n"
      },
      {
        "code": "(map foo: 1, bar: 2)[:bar]\n",
        "comments": "#=> 2\n"
      },
      {
        "code": "(map foo: 1, bar: 2)[:quux]\n",
        "comments": "#=> nil\n"
      }
    ]
  },
  "mc_block_id": {
    "summary": "Minecraft Pi - normalise block code",
    "doc": "Given a block name or id will return a number representing the id of the block or throw an exception if the name or id isn't valid",
    "introduced": "v2.5",
    "args": {
      "required": {
        "name": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_block_id :air\n",
        "comments": "#=> 0\n"
      },
      {
        "code": "puts mc_block_id 0 \n",
        "comments": "#=> 0\n"
      },
      {
        "code": "puts mc_block_id 19\n",
        "comments": "#=> Throws an invalid block id exception\n"
      },
      {
        "code": "puts mc_block_id :foo\n",
        "comments": "#=> Throws an invalid block name exception\n"
      }
    ]
  },
  "mc_block_ids": {
    "summary": "Minecraft Pi - list all block ids",
    "doc": "Returns a list of all the valid block ids as numbers. Note not all numbers are valid block ids. For example, 19 is not a valid block id.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_block_ids\n",
        "comments": "#=> [0, 1, 2, 3, 4, 5...\n"
      }
    ]
  },
  "mc_block_name": {
    "summary": "Minecraft Pi - normalise block name",
    "doc": "Given a block id or a block name will return a symbol representing the block name or throw an exception if the id or name isn't valid.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "id": {
          "type": "number_or_symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_block_name :air\n",
        "comments": "#=> :air\n"
      },
      {
        "code": "puts mc_block_name 0  \n",
        "comments": "#=> :air\n"
      },
      {
        "code": "puts mc_block_name 19\n",
        "comments": "#=> Throws an invalid block id exception\n"
      },
      {
        "code": "puts mc_block_name :foo\n",
        "comments": "#=> Throws an invalid block name exception\n"
      }
    ]
  },
  "mc_block_names": {
    "summary": "Minecraft Pi - list all block names",
    "doc": "Returns a list of all the valid block names as symbols",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_block_names\n",
        "comments": "#=> [:air, :stone, :grass, :dirt, :cobblestone...\n"
      }
    ]
  },
  "mc_camera_fixed": {
    "summary": "Minecraft Pi - fixed camera mode",
    "doc": "Set the camera mode to fixed.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_camera_normal": {
    "summary": "Minecraft Pi - normal camera mode",
    "doc": "Set the camera mode to normal.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_camera_set_location": {
    "summary": "Minecraft Pi - move camera",
    "doc": "Move the camera to a new location.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_camera_third_person": {
    "summary": "Minecraft Pi - third person camera mode",
    "doc": "Set the camera mode to third person",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_chat_post": {
    "summary": "Minecraft Pi - synonym for mc_message",
    "doc": "See mc_message",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "mc_checkpoint_restore": {
    "summary": "Minecraft Pi - restore checkpoint",
    "doc": "Restore the world to the last snapshot taken with `mc_checkpoint_save`.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_checkpoint_save": {
    "summary": "Minecraft Pi - save checkpoint",
    "doc": "Take a snapshot of the world and save it. Restore back with `mc_checkpoint_restore`",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_get_block": {
    "summary": "Minecraft Pi - get type of block at coords",
    "doc": "Returns the type of the block at the coords `x`, `y`, `z` as a symbol.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_get_block 40, 50, 60\n",
        "comments": "#=> :air\n"
      }
    ]
  },
  "mc_get_height": {
    "summary": "Minecraft Pi - synonym for mc_ground_height",
    "doc": "See `mc_ground_height`",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "mc_get_pos": {
    "summary": "Minecraft Pi - synonym for mc_location",
    "doc": "See `mc_location`",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "mc_get_tile": {
    "summary": "Minecraft Pi - get location of current tile/block",
    "doc": "Returns the coordinates of the nearest block that the player is next to. This is more course grained than `mc_location` as it only returns whole number coordinates.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_get_tile\n",
        "comments": "#=> [10, 20, 101]\n"
      }
    ]
  },
  "mc_ground_height": {
    "summary": "Minecraft Pi - get ground height at x, z coords",
    "doc": "Returns the height of the ground at the specified `x` and `z` coords.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "x": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_ground_height 40, 50\n",
        "comments": "#=> 43 (height of world at x=40, z=50)\n"
      }
    ]
  },
  "mc_location": {
    "summary": "Minecraft Pi - get current location",
    "doc": "Returns a list of floats `[x, y, z]` coords of the current location for Steve. The coordinates are finer grained than raw block coordinates but may be used anywhere you might use block coords.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts mc_location   \n",
        "comments": "#=> [10.1, 20.67, 101.34]\n"
      },
      {
        "code": "x, y, z = mc_location      \n",
        "comments": "#=> Find the current location and store in x, y and z variables.\n"
      }
    ]
  },
  "mc_message": {
    "summary": "Minecraft Pi - post a chat message",
    "doc": "Post contents of `msg` on the Minecraft chat display. You may pass multiple arguments and all will be joined to form a single message (with spaces).",
    "introduced": "v2.5",
    "args": {
      "required": {
        "msg": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "mc_message \"Hello from Sonic Pi\"\n",
        "comments": "#=> Displays \"Hello from Sonic Pi\" on Minecraft's chat display\n"
      }
    ]
  },
  "mc_set_area": {
    "summary": "Minecraft Pi - set area of blocks",
    "doc": "Set an area/box of blocks of type `block_name` defined by two distinct sets of coordinates.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "block_name": {
          "type": "symbol_or_number"
        },
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        },
        "x2": {
          "type": "number"
        },
        "y2": {
          "type": "number"
        },
        "z2": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "mc_set_block": {
    "summary": "Minecraft Pi - set block at specific coord",
    "doc": "Change the block type of the block at coords `x`, `y`, `z` to `block_type`. The block type may be specified either as a symbol such as `:air` or a number. See `mc_block_ids` and `mc_block_types` for lists of valid symbols and numbers.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        },
        "block_name": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "mc_set_block :glass, 40, 50, 60\n",
        "comments": "#=> set block at coords 40, 50, 60 to type glass\n"
      }
    ]
  },
  "mc_set_pos": {
    "summary": "Minecraft Pi - synonym for mc_teleport",
    "doc": "See `mc_teleport`",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "mc_set_tile": {
    "summary": "Minecraft Pi - set location to coords of specified tile/block",
    "doc": "",
    "introduced": "v2.5",
    "args": {
      "required": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "",
        "comments": ""
      }
    ]
  },
  "mc_surface_teleport": {
    "summary": "Minecraft Pi - teleport to world surface at x and z coords",
    "doc": "Teleports you to the specified x and z coordinates with the y automatically set to place you on the surface of the world. For example, if the x and z coords target a mountain, you'll be placed on top of the mountain, not in the air or under the ground. See mc_ground_height for discovering the height of the ground at a given x, z point.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "x": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "mc_surface_teleport 40, 50\n",
        "comments": "#=> Teleport user to coords x = 40, y = height of surface, z = 50\n"
      }
    ]
  },
  "mc_teleport": {
    "summary": "Minecraft Pi - teleport to a new location",
    "doc": "Magically teleport the player to the location specified by the `x`, `y`, `z` coordinates. Use this for automatically moving the player either small or large distances around the world.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "x": {
          "type": "number"
        },
        "y": {
          "type": "number"
        },
        "z": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "mc_teleport 40, 50, 60 \n                       \n",
        "comments": "# The player will be moved to the position with coords:\n# x: 40, y: 50, z: 60\n"
      }
    ]
  },
  "midi": {
    "summary": "Trigger and release an external synth via MIDI",
    "doc": "Sends a MIDI note on event to *all* connected MIDI devices and *all* channels and then after sustain beats sends a MIDI note off event. Ensures MIDI trigger is synchronised with standard calls to play and sample. Co-operates completely with Sonic Pi's timing system including `time_warp`.\n\nIf `note` is specified as `:off` then all notes will be turned off (same as `midi_all_notes_off`).\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "note": {
          "type": "number"
        }
      },
      "optional": {
        "sustain": {
          "desc": "Duration of note event in beats"
        },
        "vel": {
          "desc": "Velocity of note as a MIDI number"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi on/off messages from being sent out. (Ensures all opts are evaluated in this call to `midi` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi :e1, sustain: 0.3, vel_f: 0.5, channel: 3\n",
        "comments": "# Play E, octave 1 for 0.3 beats at half velocity on channel 3 on all connected MIDI ports.\n"
      },
      {
        "code": "midi :off, channel: 3\n",
        "comments": "#=> Turn off all notes on channel 3 on all connected MIDI ports\n"
      },
      {
        "code": "midi :e1, channel: 3, port: \"foo\"\n",
        "comments": "#=> Play note :E1 for 1 beats on channel 3 on MIDI port named \"foo\" only\n"
      },
      {
        "code": "live_loop :arp do\n  midi (octs :e1, 3).tick, sustain: 0.1\n  sleep 0.125\nend",
        "comments": " \n# repeatedly play a ring of octaves\n \n \n"
      }
    ]
  },
  "midi_all_notes_off": {
    "summary": "Turn off all notes on MIDI devices",
    "doc": "Sends a MIDI all notes off message to *all* connected MIDI devices. on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nWhen an All Notes Off event is received, all oscillators will turn off.\n\n[MIDI 1.0 Specification - Channel Mode Messages - All Notes Off](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "Channel to send the all notes off message to"
        },
        "port": {
          "desc": "MIDI port to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi all notes off message from being sent out. (Ensures all opts are evaluated in this call to `midi_all_notes_off` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_all_notes_off\n",
        "comments": "#=> Turn off all notes on MIDI devices on all channels (and ports)\n"
      },
      {
        "code": "midi_all_notes_off channel: 2\n",
        "comments": "#=> Turn off all notes on MIDI devices on channel 2\n"
      }
    ]
  },
  "midi_cc": {
    "summary": "Send MIDI control change message",
    "doc": "Sends a MIDI control change message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nControl number and control value can be passed as a note such as `:e3` and decimal values will be rounded down or up to the nearest whole number - so values between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 will be rounded down to 3.\n\nYou may also optionally pass the control value as a floating point value between 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between 0 and 127) using the `val_f:` opt.\n\n[MIDI 1.0 Specification - Channel Voice Messages - Control change](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "control_num": {
          "type": "midi"
        },
        "value": {
          "type": "midi"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel(s) to send to"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "value": {
          "desc": "Control value as a MIDI number."
        },
        "val_f": {
          "desc": "Control value as a value between 0 and 1 (will be converted to a MIDI value)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi cc message from being sent out. (Ensures all opts are evaluated in this call to `midi_cc` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_cc 100, 32 \n",
        "comments": "#=> Sends MIDI cc message to control 100 with value 32 to all ports and channels\n"
      },
      {
        "code": "midi_cc :e7, 32 \n",
        "comments": "#=> Sends MIDI cc message to control 100 with value 32 to all ports and channels\n"
      },
      {
        "code": "midi_cc 100, 32, channel: 5 \n",
        "comments": "#=> Sends MIDI cc message to control 100 with value 32 on channel 5 to all ports\n"
      },
      {
        "code": "midi_cc 100, val_f: 0.8, channel: 5 \n",
        "comments": "#=> Sends MIDI cc message to control 100 with value 102 on channel 5 to all ports\n"
      },
      {
        "code": "midi_cc 100, value: 102, channel: [1, 5] \n",
        "comments": "#=> Sends MIDI cc message to control 100 with value 102 on channel 1 and 5 to all ports\n"
      }
    ]
  },
  "midi_channel_pressure": {
    "summary": "Send MIDI channel pressure (aftertouch) message",
    "doc": "Sends a MIDI channel pressure (aftertouch) message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nThe pressure value can be passed as a note such as `:e3` and decimal values will be rounded down or up to the nearest whole number - so values between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 will be rounded down to 3.\n\nYou may also optionally pass the pressure value as a floating point value between 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between 0 and 127) using the `val_f:` opt.\n\n[MIDI 1.0 Specification - Channel Voice Messages - Channel Pressure (Aftertouch)](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "val": {
          "type": "midi"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel(s) to send to"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "value": {
          "desc": "Pressure value as a MIDI number."
        },
        "val_f": {
          "desc": "Pressure value as a value between 0 and 1 (will be converted to a MIDI value)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi channel pressure message from being sent out. (Ensures all opts are evaluated in this call to `midi_channel_pressure` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_channel_pressure 50 \n",
        "comments": "#=> Sends MIDI channel pressure message with value 50 to all ports and channels\n"
      },
      {
        "code": "midi_channel_pressure :C4 \n",
        "comments": "#=> Sends MIDI channel pressure message with value 60 to all ports and channels\n"
      },
      {
        "code": "midi_channel_pressure 0.5 \n",
        "comments": "#=> Sends MIDI channel pressure message with value 63.5 to all ports and channels\n"
      },
      {
        "code": "midi_channel_pressure 30, channel: [1, 5] \n",
        "comments": "#=> Sends MIDI channel pressure message with value 30 on channel 1 and 5 to all ports\n"
      }
    ]
  },
  "midi_clock_beat": {
    "summary": "Send a quarter-note's worth of MIDI clock ticks",
    "doc": "Sends enough MIDI clock ticks for one beat to *all* connected MIDI devices. Use the `port:` opt to restrict which MIDI ports are used.\n\nThe MIDI specification requires 24 clock tick events to be sent per beat. These can either be sent manually using `midi_clock_tick` or all 24 can be scheduled in one go using this fn. `midi_clock_beat` will therefore schedule for 24 clock ticks to be sent linearly spread over duration beats. This fn will automatically take into account the current BPM and any `time_warp`s.\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "duration": {
          "type": "beats"
        }
      },
      "optional": {
        "port": {
          "desc": "MIDI port to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi clock tick messages from being sent out. (Ensures all opts are evaluated in this call to `midi_clock_beat` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_clock_beat\n",
        "comments": "#=> Send 24 clock ticks over a period of 1 beat\n"
      },
      {
        "code": "midi_clock_beat 0.5\n",
        "comments": "#=> Send 24 clock ticks over a period of 0.5 beats\n"
      },
      {
        "code": "live_loop :clock do \n  midi_clock_beat   \n  sleep 1\nend",
        "comments": "# Create a live loop which continually sends out MIDI clock\n# events at the current BPM\n \n \n"
      },
      {
        "code": "\nlive_loop :clock do\n  midi_start if tick == 0\n  midi_clock_beat        \n  sleep 1                \nend",
        "comments": "# Ensuring Clock Phase is Correct\n \n# Send a midi_start event the first time round the live loop only\n# this will not just send a steady clock beat, but also ensure\n# the clock phase of the MIDI device matches Sonic Pi.\n \n"
      }
    ]
  },
  "midi_clock_tick": {
    "summary": "Send an individual MIDI clock tick",
    "doc": "Sends a MIDI clock tick message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nTypical MIDI devices expect the clock to send 24 ticks per quarter note (typically a beat). See `midi_clock_beat` for a simple way of sending all the ticks for a given beat.\n\n[MIDI 1.0 Specification - System Real-Time Messages - Timing Clock](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "port": {
          "desc": "MIDI port to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi clock tick message from being sent out. (Ensures all opts are evaluated in this call to `midi_clock_tick` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_clock_tick\n",
        "comments": "#=> Send an individual clock tick to all connected MIDI devices on all ports.\n"
      }
    ]
  },
  "midi_continue": {
    "summary": "Send MIDI system message - continue",
    "doc": "Sends the MIDI continue system message to *all* connected MIDI devices on *all* ports.  Use the `port:` opt to restrict which MIDI ports are used.\n\nUpon receiving the MIDI continue event, the MIDI device(s) will continue at the point the sequence was stopped.\n\n[MIDI 1.0 Specification - System Real-Time Messages - Continue](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "port": {
          "desc": "MIDI Port(s) to send the continue message to"
        }
      }
    },
    "examples": [
      {
        "code": "midi_continue\n",
        "comments": "#=> Send continue message to all connected MIDI devices\n"
      }
    ]
  },
  "midi_local_control_off": {
    "summary": "Disable local control on MIDI devices",
    "doc": "Sends a MIDI local control off message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nAll devices on a given channel will respond only to data received over MIDI. Played data, etc. will be ignored. See `midi_local_control_on` to enable local control.\n\n[MIDI 1.0 Specification - Channel Mode Messages - Local Control Off](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "Channel to send the local control off message to"
        },
        "port": {
          "desc": "MIDI port to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi local control off message from being sent out. (Ensures all opts are evaluated in this call to `midi_local_control_off` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_local_control_off\n",
        "comments": "#=> Disable local control on MIDI devices on all channels (and ports)\n"
      },
      {
        "code": "midi_local_control_off channel: 2\n",
        "comments": "#=> Disable local control on MIDI devices on channel 2\n"
      }
    ]
  },
  "midi_local_control_on": {
    "summary": "Enable local control on MIDI devices",
    "doc": "Sends a MIDI local control on message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nAll devices on a given channel will respond both to data received over MIDI and played data, etc. See `midi_local_control_off` to disable local control.\n\n[MIDI 1.0 Specification - Channel Mode Messages - Local Control On](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "Channel to send the local control on message to"
        },
        "port": {
          "desc": "MIDI port to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi local control on message from being sent out. (Ensures all opts are evaluated in this call to `midi_local_control_on` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_local_control_on\n",
        "comments": "#=> Enable local control on MIDI devices on all channels (and ports)\n"
      },
      {
        "code": "midi_local_control_on channel: 2\n",
        "comments": "#=> Enable local control on MIDI devices on channel 2\n"
      }
    ]
  },
  "midi_mode": {
    "summary": "Set Omni/Mono/Poly mode",
    "doc": "Sends the Omni/Mono/Poly MIDI mode message to *all* connected MIDI devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nValid modes are:\n\n:omni_off - Omni Mode Off\n:omni_on  - Omni Mode On\n:mono     - Mono Mode On (Poly Off). Set num_chans: to be the number of channels to use (Omni Off) or 0 (Omni On). Default for num_chans: is 16.\n:poly     - Poly Mode On (Mono Off)\n\nNote that this fn also includes the behaviour of `midi_all_notes_off`.\n\n[MIDI 1.0 Specification - Channel Mode Messages - Omni Mode Off | Omni Mode On | Mono Mode On (Poly Off) | Poly Mode On](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "mode": {
          "type": "mode_keyword"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel to send the MIDI mode message to"
        },
        "port": {
          "desc": "MIDI port to send to"
        },
        "mode": {
          "desc": "Mode keyword - one of :omni_off, :omni_on, :mono or :poly"
        },
        "num_chans": {
          "desc": "Used in mono mode only - Number of channels (defaults to 16)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi local control off message from being sent out. (Ensures all opts are evaluated in this call to `midi_local_control_off` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_mode :omni_on\n",
        "comments": "#=> Turn Omni Mode On on all ports and channels\n"
      },
      {
        "code": "midi_mode :mono, num_chans: 5\n",
        "comments": "#=> Mono Mode On, Omni off using 5 channels.\n"
      },
      {
        "code": "midi_mode :mono, num_chans: 0\n",
        "comments": "#=> Mono Mode On, Omni on.\n"
      },
      {
        "code": "midi_mode :mono\n",
        "comments": "#=> Mono Mode On, Omni off using 16 channels (the default) .\n"
      }
    ]
  },
  "midi_note_off": {
    "summary": "Send MIDI note off message",
    "doc": "Sends the MIDI note off message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nNote and release velocity values can be passed as a note symbol such as `:e3` or a number. Decimal values will be rounded down or up to the nearest whole number - so values between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 will be rounded down to 3. These values will also be clipped within the range 0->127 so all values lower then 0 will be increased to 0 and all values greater than 127 will be reduced to 127.\n\nThe `release_velocity` param may be omitted - in which case it will default to 127 unless you supply it as a named opt via the keys `velocity:` or `vel_f:`.\n\nYou may also optionally pass the release velocity value as a floating point value between 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between 0 and 127) using the `vel_f:` opt.\n\n[MIDI 1.0 Specification - Channel Voice Messages - Note off event](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "note": {
          "type": "midi"
        },
        "release_velocity": {
          "type": "midi"
        }
      },
      "optional": {
        "channel": {
          "desc": "MIDI channel(s) to send event on as a number or list of numbers."
        },
        "port": {
          "desc": "MIDI port(s) to send to as a string or list of strings."
        },
        "velocity": {
          "desc": "Release velocity as a MIDI number."
        },
        "vel_f": {
          "desc": "Release velocity as a value between 0 and 1 (will be converted to a MIDI velocity)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi note off message from being sent out. (Ensures all opts are evaluated in this call to `midi_note_off` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_note_off :e3\n",
        "comments": "#=> Sends MIDI note off for :e3 with the default release velocity of 127 to all ports and channels\n"
      },
      {
        "code": "midi_note_off :e3, 12 \n",
        "comments": "#=> Sends MIDI note off on :e3 with velocity 12 on all channels\n"
      },
      {
        "code": "midi_note_off :e3, 12, channel: 3 \n",
        "comments": "#=> Sends MIDI note off on :e3 with velocity 12 to channel 3\n"
      },
      {
        "code": "midi_note_off :e3, velocity: 100\n",
        "comments": "#=> Sends MIDI note on for :e3 with release velocity 100\n"
      },
      {
        "code": "midi_note_off :e3, vel_f: 0.8\n",
        "comments": "#=> Scales release velocity 0.8 to MIDI value 102 and sends MIDI note off for :e3 with release velocity 102\n"
      },
      {
        "code": "midi_note_off 60.3, 50.5\n",
        "comments": "#=> Rounds params up or down to the nearest whole number and sends MIDI note off for note 60 with velocity 51\n"
      },
      {
        "code": "midi_note_off :e3, channel: [1, 3, 5]\n",
        "comments": "#=> Send MIDI note off on :e3 to channels 1, 3, 5 on all connected ports\n"
      },
      {
        "code": "midi_note_off :e3, port: [\"foo\", \"bar\"]\n",
        "comments": "#=> Send MIDI note off on :e3 to on all channels on ports named \"foo\" and \"bar\"\n"
      },
      {
        "code": "midi_note_off :e3, channel: 1, port: \"foo\"\n",
        "comments": "#=> Send MIDI note off on :e3 only on channel 1 on port \"foo\"\n"
      }
    ]
  },
  "midi_note_on": {
    "summary": "Send MIDI note on message",
    "doc": "Sends a MIDI Note On Event to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to indepently restrict which MIDI ports and channels are used.\n\nNote and velocity values can be passed as a note symbol such as `:e3` or a MIDI number such as 52. Decimal values will be rounded down or up to the nearest whole number - so values between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 will be rounded down to 3. These values will also be clipped within the range 0->127 so all values lower than 0 will be increased to 0 and all values greater than 127 will be reduced to 127.\n\nThe `velocity` param may be omitted - in which case it will default to 127 unless you supply it as an opt via the keys `velocity:` or `vel_f:`.\n\nYou may also optionally pass the velocity value as a floating point value between 0 and 1 such as 0.2 or 0.785 (which will be linearly mapped to MIDI values between 0 and 127) using the vel_f: opt.\n\n[MIDI 1.0 Specification - Channel Voice Messages - Note on event](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "note": {
          "type": "midi"
        },
        "velocity": {
          "type": "midi"
        }
      },
      "optional": {
        "channel": {
          "desc": "MIDI channel(s) to send event on"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "velocity": {
          "desc": "Note velocity as a MIDI number."
        },
        "vel_f": {
          "desc": "Velocity as a value between 0 and 1 (will be converted to a MIDI velocity between 0 and 127)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi note on message from being sent out. (Ensures all opts are evaluated in this call to `midi_note_on` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_note_on :e3 \n",
        "comments": "#=> Sends MIDI note on :e3 with the default velocity of 12 to all ports and channels\n"
      },
      {
        "code": "midi_note_on :e3, 12 \n",
        "comments": "#=> Sends MIDI note on :e3 with velocity 12 to all channels\n"
      },
      {
        "code": "midi_note_on :e3, 12, channel: 3 \n",
        "comments": "#=> Sends MIDI note on :e3 with velocity 12 on channel 3\n"
      },
      {
        "code": "midi_note_on :e3, velocity: 100\n",
        "comments": "#=> Sends MIDI note on for :e3 with velocity 100\n"
      },
      {
        "code": "midi_note_on :e3, vel_f: 0.8\n",
        "comments": "#=> Scales velocity 0.8 to MIDI value 102 and sends MIDI note on for :e3 with velocity 102\n"
      },
      {
        "code": "midi_note_on 60.3, 50.5\n",
        "comments": "#=> Rounds params up or down to the nearest whole number and sends MIDI note on for note 60 with velocity 51\n"
      },
      {
        "code": "midi_note_on :e3, channel: [1, 3, 5]\n",
        "comments": "#=> Send MIDI note :e3 on to channels 1, 3, 5 on all connected ports\n"
      },
      {
        "code": "midi_note_on :e3, port: [\"foo\", \"bar\"]\n",
        "comments": "#=> Send MIDI note :e3 on to on all channels on ports named \"foo\" and \"bar\"\n"
      },
      {
        "code": "midi_note_on :e3, channel: 1, port: \"foo\"\n",
        "comments": "#=> Send MIDI note :e3 on only on channel 1 on port \"foo\"\n"
      }
    ]
  },
  "midi_notes": {
    "summary": "Create a ring buffer of midi note numbers",
    "doc": "Create a new immutable ring buffer of notes from args. Indexes wrap around positively and negatively. Final ring consists only of MIDI numbers and nil.",
    "introduced": "v2.7",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(midi_notes :d3, :d4, :d5)\n",
        "comments": "#=> (ring 50, 62, 74)\n"
      },
      {
        "code": "(midi_notes :d3, 62,  nil)\n",
        "comments": "#=> (ring 50, 62, nil)\n"
      }
    ]
  },
  "midi_pc": {
    "summary": "Send MIDI program change message",
    "doc": "Sends a MIDI program change message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nProgram number can be passed as a note such as `:e3` and decimal values will be rounded down or up to the nearest whole number - so values between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 will be rounded down to 3.\n\n[MIDI 1.0 Specification - Channel Voice Messages - Program change](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0.2",
    "args": {
      "required": {
        "program_num": {
          "type": "midi"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel(s) to send to"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi pc message from being sent out. (Ensures all opts are evaluated in this call to `midi_pc` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_pc 100 \n",
        "comments": "#=> Sends MIDI pc message to all ports and channels\n"
      },
      {
        "code": "midi_pc :e7 \n",
        "comments": "#=> Sends MIDI pc message to all ports and channels\n"
      },
      {
        "code": "midi_pc 100, channel: 5 \n",
        "comments": "#=> Sends MIDI pc message on channel 5 to all ports\n"
      },
      {
        "code": "midi_pc 100, channel: 5 \n",
        "comments": "#=> Sends MIDI pc message on channel 5 to all ports\n"
      },
      {
        "code": "midi_pc 100, channel: [1, 5] \n",
        "comments": "#=> Sends MIDI pc message on channel 1 and 5 to all ports\n"
      }
    ]
  },
  "midi_pitch_bend": {
    "summary": "Send MIDI pitch bend message",
    "doc": "Sends a MIDI pitch bend message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nDelta value is between 0 and 1 with 0.5 representing no pitch bend, 1 max pitch bend and 0 minimum pitch bend.\n\nTypical MIDI values such as note or cc are represented with 7 bit numbers which translates to the range 0-127. This makes sense for keyboards which have at most 88 keys. However, it translates to a poor resolution when working with pitch bend. Therefore, pitch bend is unlike most MIDI values in that it has a much greater range: 0 - 16383 (by virtue of being represented by 14 bits).\n\n* It is also possible to specify the delta value as a (14 bit) MIDI pitch bend value between 0 and 16383 using the `delta_midi:` opt.\n* When using the `delta_midi:` opt no pitch bend is the value 8192\n\n[MIDI 1.0 Specification - Channel Voice Messages - Pitch Bend Change](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "delta": {
          "type": "float01"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel(s) to send to"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "delta": {
          "desc": "Pitch bend value as a number between 0 and 1 (will be converted to a value between 0 and 16383). No bend is the central value 0.5"
        },
        "delta_midi": {
          "desc": "Pitch bend value as a number between 0 and 16383 inclusively. No bend is central value 8192."
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi pitch bend message from being sent out. (Ensures all opts are evaluated in this call to `midi_pitch_bend` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_pitch_bend 0 \n",
        "comments": "#=> Sends MIDI pitch bend message with value 0 to all ports and channels\n"
      },
      {
        "code": "midi_pitch_bend 1 \n",
        "comments": "#=> Sends MIDI pitch bend message with value 16383 to all ports and channels\n"
      },
      {
        "code": "midi_pitch_bend 0.5 \n",
        "comments": "#=> Sends MIDI pitch bend message with value 8192 to all ports and channels\n"
      },
      {
        "code": "midi_pitch_bend delta_midi: 8192 \n",
        "comments": "#=> Sends MIDI pitch bend message with value 8192 to all ports and channels\n"
      },
      {
        "code": "midi_pitch_bend 0, channel: [1, 5] \n",
        "comments": "#=> Sends MIDI pitch bend message with value 0 on channel 1 and 5 to all ports\n"
      }
    ]
  },
  "midi_poly_pressure": {
    "summary": "Send a MIDI polyphonic key pressure message",
    "doc": "Sends a MIDI polyphonic key pressure message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nNote number and pressure value can be passed as a note such as `:e3` and decimal values will be rounded down or up to the nearest whole number - so values between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 will be rounded down to 3.\n\nYou may also optionally pass the pressure value as a floating point value between 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between 0 and 127) using the `val_f:` opt.\n\n[MIDI 1.0 Specification - Channel Voice Messages - Polyphonic Key Pressure (Aftertouch)](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "note": {
          "type": "midi"
        },
        "value": {
          "type": "midi"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel(s) to send to"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "value": {
          "desc": "Pressure value as a MIDI number."
        },
        "val_f": {
          "desc": "Pressure value as a value between 0 and 1 (will be converted to a MIDI value)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi poly pressure message from being sent out. (Ensures all opts are evaluated in this call to `midi_poly_pressure` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_poly_pressure 100, 32 \n",
        "comments": "#=> Sends a MIDI poly key pressure message to control note 100 with value 32 to all ports and channels\n"
      },
      {
        "code": "midi_poly_pressure :e7, 32 \n",
        "comments": "#=> Sends a MIDI poly key pressure message to control note 100 with value 32 to all ports and channels\n"
      },
      {
        "code": "midi_poly_pressure 100, 32, channel: 5 \n",
        "comments": "#=> Sends MIDI poly key pressure message to control note 100 with value 32 on channel 5 to all ports\n"
      },
      {
        "code": "midi_poly_pressure 100, val_f: 0.8, channel: 5 \n",
        "comments": "#=> Sends a MIDI poly key pressure message to control note 100 with value 102 on channel 5 to all ports\n"
      },
      {
        "code": "midi_poly_pressure 100, value: 102, channel: [1, 5] \n",
        "comments": "#=> Sends MIDI poly key pressure message to control note 100 with value 102 on channel 1 and 5 to all ports\n"
      }
    ]
  },
  "midi_raw": {
    "summary": "Send raw MIDI message",
    "doc": "Sends the raw MIDI message to *all* connected MIDI devices. Gives you direct access to sending the individual bytes of a MIDI message. Typically this should be rarely used - prefer the other `midi_` fns where possible.\n\nA raw MIDI message consists of multiple bytes as numbers in decimal notation (i.e. 176), hex (0xb0) or binary (0b10110000).\n\nSee https://www.midi.org/specifications/item/table-1-summary-of-midi-message for a summary of MIDI messages and their corresponding byte structures.\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "port": {
          "desc": "Port(s) to send the raw MIDI message events to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the raw midi message from being sent out. (Ensures all opts are evaluated in this call to `midi_raw` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_raw 176, 121, 0 \n",
        "comments": "#=> Sends the MIDI reset command\n"
      },
      {
        "code": "midi_raw 176.1, 120.5, 0.49 \n",
        "comments": "#=> Sends the MIDI reset command (values are rounded down, up and down respectively)\n"
      },
      {
        "code": "midi_raw 0xb0, 0x79, 0x0 \n",
        "comments": "#=> Sends the MIDI reset command\n"
      },
      {
        "code": "midi_raw 0b10110000, 0b01111001, 0b00000000 \n",
        "comments": "#=> Sends the MIDI reset command\n"
      }
    ]
  },
  "midi_reset": {
    "summary": "Reset MIDI devices",
    "doc": "Sends a MIDI reset all controllers message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nAll controller values are reset to their defaults.\n\n[MIDI 1.0 Specification - Channel Mode Messages - Reset All Controllers](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "value": {
          "type": "number"
        }
      },
      "optional": {
        "channel": {
          "desc": "Channel to send the midi reset message to"
        },
        "port": {
          "desc": "MIDI port to send to"
        },
        "value": {
          "desc": "Value must only be zero (the default) unless otherwise allowed in a specific Recommended Practice"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi reset message from being sent out. (Ensures all opts are evaluated in this call to `midi_reset` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_reset\n",
        "comments": "#=> Reset MIDI devices on all channels (and ports)\n"
      },
      {
        "code": "midi_reset channel: 2\n",
        "comments": "#=> Reset MIDI devices on channel 2\n"
      }
    ]
  },
  "midi_sound_off": {
    "summary": "Silence all MIDI devices",
    "doc": "Sends a MIDI sound off message to *all* connected devices on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports and channels are used.\n\nAll oscillators will turn off, and their volume envelopes are set to zero as soon as possible.\n\n[MIDI 1.0 Specification - Channel Mode Messages - All Sound Off](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "Channel to send the sound off message to"
        },
        "port": {
          "desc": "MIDI port to send to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi sound off on message from being sent out. (Ensures all opts are evaluated in this call to `midi_sound_off` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_sound_off\n",
        "comments": "#=> Silence MIDI devices on all ports and channels\n"
      },
      {
        "code": "midi_sound_off channel: 2\n",
        "comments": "#=> Silence MIDI devices on channel 2\n"
      }
    ]
  },
  "midi_start": {
    "summary": "Send MIDI system message - start",
    "doc": "Sends the MIDI start system message to *all* connected MIDI devices on *all* ports.  Use the `port:` opt to restrict which MIDI ports are used.\n\nStart the current sequence playing. (This message should be followed with calls to `midi_clock_tick` or `midi_clock_beat`).\n\n[MIDI 1.0 Specification - System Real-Time Messages - Start](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "midi_start\n",
        "comments": "#=> Send start message to all connected MIDI devices\n"
      }
    ]
  },
  "midi_stop": {
    "summary": "Send MIDI system message - stop",
    "doc": "Sends the MIDI stop system message to *all* connected MIDI devices on *all* ports.  Use the `port:` opt to restrict which MIDI ports are used.\n\nStops the current sequence.\n\n[MIDI 1.0 Specification - System Real-Time Messages - Start](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "port": {
          "desc": "MIDI Port(s) to send the stop message to"
        }
      }
    },
    "examples": [
      {
        "code": "midi_stop\n",
        "comments": "#=> Send stop message to all connected MIDI devices\n"
      }
    ]
  },
  "midi_sysex": {
    "summary": "Send MIDI System Exclusive (SysEx) message",
    "doc": "Sends the MIDI SysEx message to *all* connected MIDI devices.\n\nMIDI SysEx messages, unlike all other MIDI messages, are variable in length. They allow MIDI device manufacturers to define device-specific messages, for example loading/saving patches, or programming device features such as illuminated buttons.\n\nFloats will be rounded up or down to the nearest whole number e.g. 176.1 -> 176, 120.5 -> 121, 0.49 -> 0.\n\nNon-number values will be automatically turned into numbers prior to sending the event if possible (if this conversion does not work an Error will be thrown).\n",
    "introduced": "v3.2",
    "args": {
      "required": {
      },
      "optional": {
        "port": {
          "desc": "Port(s) to send the MIDI SysEx message events to"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi SysEx message from being sent out. (Ensures all opts are evaluated in this call to `midi_sysex` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_sysex 0xf0, 0x00, 0x20, 0x6b, 0x7f, 0x42, 0x02, 0x00, 0x10, 0x77, 0x11, 0xf7 \n",
        "comments": "#=> Program an Arturia Beatstep controller to turn the eighth pad pink\n"
      }
    ]
  },
  "midi_to_hz": {
    "summary": "MIDI to Hz conversion",
    "doc": "Convert a midi note to hz",
    "introduced": "v2.0",
    "args": {
      "required": {
        "note": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "midi_to_hz(60)\n",
        "comments": "#=> 261.6256\n"
      }
    ]
  },
  "ndefine": {
    "summary": "Define a new function",
    "doc": "Does nothing. Use to stop a define from actually defining. Simpler than wrapping whole define in a comment block or commenting each individual line out.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "note": {
    "summary": "Describe note",
    "doc": "Takes a midi note, a symbol (e.g. `:C`) or a string (e.g. `\"C\"`) and resolves it to a midi note. You can also pass an optional `octave:` parameter to get the midi note for a given octave. Please note - `octave:` param overrides any octave specified in a symbol i.e. `:c3`. If the note is `nil`, `:r` or `:rest`, then `nil` is returned (`nil` represents a rest)",
    "introduced": "v2.0",
    "args": {
      "required": {
        "note": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
        "octave": {
          "desc": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4"
        }
      }
    },
    "examples": [
      {
        "code": "\nputs note(60)\nputs note(:C)\nputs note(:C4)\nputs note('C')",
        "comments": "# These all return 60 which is the midi number for middle C (octave 4)\n \n \n \n \n"
      },
      {
        "code": "\nputs note(60, octave: 2)\n\n\nputs note(:C, octave: 2)\nputs note(:C4, octave: 2)\nputs note('C', octave: 2)",
        "comments": "# returns 60 - octave param has no effect if we pass in a number\n \n \n# These all return 36 which is the midi number for C2 (two octaves below middle C)\n \n# note the octave param overrides any octaves specified in a symbol\n \n"
      }
    ]
  },
  "note_info": {
    "summary": "Get note info",
    "doc": "Returns an instance of `SonicPi::Note`. Please note - `octave:` param overrides any octave specified in a symbol i.e. `:c3`",
    "introduced": "v2.0",
    "args": {
      "required": {
        "note": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
        "octave": {
          "desc": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4"
        }
      }
    },
    "examples": [
      {
        "code": "puts note_info(:C, octave: 2)\n\n",
        "comments": " \n# returns #<SonicPi::Note :C2>\n"
      }
    ]
  },
  "note_range": {
    "summary": "Get a range of notes",
    "doc": "Produces a ring of all the notes between a low note and a high note. By default this is chromatic (all the notes) but can be filtered with a pitches: argument. This opens the door to arpeggiator style sequences and other useful patterns. If you try to specify only pitches which aren't in the range it will raise an error - you have been warned!",
    "introduced": "v2.6",
    "args": {
      "required": {
        "low_note": {
          "type": "note"
        },
        "high_note": {
          "type": "note"
        }
      },
      "optional": {
        "pitches": {
          "desc": "An array of notes (symbols or ints) to filter on. Octave information is ignored."
        }
      }
    },
    "examples": [
      {
        "code": "(note_range :c4, :c5)\n",
        "comments": "# => (ring 60,61,62,63,64,65,66,67,68,69,70,71,72)\n"
      },
      {
        "code": "(note_range :c4, :c5, pitches: (chord :c, :major))\n",
        "comments": "# => (ring 60,64,67,72)\n"
      },
      {
        "code": "(note_range :c4, :c6, pitches: (chord :c, :major))\n",
        "comments": "# => (ring 60,64,67,72,76,79,84)\n"
      },
      {
        "code": "(note_range :c4, :c5, pitches: (scale :c, :major))\n",
        "comments": "# => (ring 60,62,64,65,67,69,71,72)\n"
      },
      {
        "code": "(note_range :c4, :c5, pitches: [:c4, :g2])\n",
        "comments": "# => (ring 60,67,72)\n"
      },
      {
        "code": "live_loop :arpeggiator do\n \n  play (note_range :c4, :c5, pitches: (chord :c, :major)).tick\n  sleep 0.125\nend",
        "comments": " \n# try changing the chord\n \n \n \n"
      }
    ]
  },
  "octs": {
    "summary": "Create a ring of octaves",
    "doc": "Create a ring of successive octaves starting at `start` for `num_octaves`. ",
    "introduced": "v2.8",
    "args": {
      "required": {
        "start": {
          "type": "note"
        },
        "num_octaves": {
          "type": "pos_int"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(octs 60, 2) \n",
        "comments": "#=> (ring 60, 72)\n"
      },
      {
        "code": "(octs :e3, 3)\n",
        "comments": "#=> (ring 52, 64, 76)\n"
      }
    ]
  },
  "on": {
    "summary": "Optionally evaluate block",
    "doc": "Optionally evaluate the block depending on the truthiness of the supplied condition. The truthiness rules are as follows: all values are seen as true except for: false, nil and 0. Lambdas will be automatically called and the truthiness of their results used.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "condition": {
          "type": "truthy"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "on true do\n  play 70    \nend",
        "comments": " \n#=> will play 70 as true is truthy\n \n"
      },
      {
        "code": "on 1 do\n  play 70    \nend",
        "comments": " \n#=> will play 70 as 1 is truthy\n \n"
      },
      {
        "code": "on 0 do\n  play 70    \nend",
        "comments": " \n#=> will *not* play 70 as 0 is not truthy\n \n"
      },
      {
        "code": "on false do\n  play 70    \nend",
        "comments": " \n#=> will *not* play 70 as false is not truthy\n \n"
      },
      {
        "code": "on nil do\n  play 70    \nend",
        "comments": " \n#=> will *not* play 70 as nil is not truthy\n \n"
      },
      {
        "code": "on lambda{true} do\n  play 70    \nend",
        "comments": " \n#=> will play 70 as the lambda returns a truthy value\n \n"
      },
      {
        "code": "on lambda{false} do\n  play 70    \nend",
        "comments": " \n#=> will *not* play 70 as the lambda does not return a truthy value\n \n"
      },
      {
        "code": "on lambda{[true, false].choose} do\n  play 70    \nend",
        "comments": " \n#=> will maybe play 70 depending on the choice in the lambda\n \n"
      }
    ]
  },
  "one_in": {
    "summary": "Random true value with specified probability",
    "doc": "Returns `true` or `false` with a specified probability - it will return true every one in num times where num is the param you specify",
    "introduced": "v2.0",
    "args": {
      "required": {
        "num": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "one_in 2\n",
        "comments": "# will return true with a probability of 1/2, false with probability 1/2\n"
      },
      {
        "code": "one_in 3\n",
        "comments": "# will return true with a probability of 1/3, false with a probability of 2/3\n"
      },
      {
        "code": "one_in 100\n",
        "comments": "# will return true with a probability of 1/100, false with a probability of 99/100\n"
      }
    ]
  },
  "osc": {
    "summary": "Send an OSC message (Open Sound Control)",
    "doc": "Sends an OSC message to the current host and port specified by `use_osc` or `with_osc`.\n\nOSC (Open Sound Control) is a simple way of passing messages between two separate programs on the same computer or even on different computers via a local network or even the internet. `osc` enables you to send well-timed OSC messages from within Sonic Pi. `osc` will ensure that the OSC message is sent at the correct time using the same timing system shared with the synthesis functionality via `sample`, `synth` and friends. `osc` even works seamlessly within `time_warp` - see examples.\n\nA typical OSC message has two parts: a descriptive `path` which looks simalar to a URL (website address), and an optional list of `arguments` that are either numbers or strings.\n\nFor example, a hypothetical synth program might accept this OSC message:\n\n`/set/filter lowpass 80 0.5`\n\nwhere `/set/filter` is the path, and `lowpass`, `80`, and `0.5` are three\narguments. This can be sent from within Sonic Pi by writing:\n\n`osc \"/set/filter\", \"lowpass\", 80, 0.5`\n\nHowever, in order to send the OSC message you must first specify where to send it to. This is achieved by specifying both the host (the machine's internet address) and the port that the remote OSC server is listening on. This is configured using `use_osc` or `with_osc`. So, if our synth program was running on a machine on the local network with IP address `10.0.1.5` on port `5100` we could send our OSC message to it with the following:\n\n\n`use_osc \"10.0.1.5\", 5100`\n\n`osc \"/set/filter\", \"lowpass\", 80, 0.5`\n\n\nNote, by default, Sonic Pi listens for OSC messages on port `4560`, so you may send messages to an external machine running Sonic Pi if you know the IP address of that external machine. Any OSC messages received on port `4559` are automatically converted to standard cue events and displayed in the GUI's cue log. This also means that you can use `sync` to wait for the next incoming OSC message with a given path (see example).\n\nFinally, it is also very useful to send OSC messages to aother programs on the same computer. This can be achieved by specifying \"localhost\" as the hostname and the port as normal (depending on which port the other program is listening on).\n\nSee `osc_send` for a version which allows you to specify the hostname and port directly (ignoring any values set via `use_osc` or `with_osc`).\n\nFor further information see the OSC spec: [http://opensoundcontrol.org/spec-1_0](http://opensoundcontrol.org/spec-1_0)\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "path": {
          "type": "arguments"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\nuse_osc \"localhost\", 7000 \nosc \"/foo/bar\"            \n                            \n",
        "comments": "# Send a simple OSC message to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path \"/foo/bar\"\n# and no arguments\n"
      },
      {
        "code": "\n\nuse_osc \"localhost\", 7000       \nosc \"/foo/bar\", 1, 3.89, \"baz\"\n                                  \n                                  \n                                  \n                                  \n",
        "comments": "# Send an OSC messages with arguments to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path \"/foo/bar\"\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3.89\n# 3) The string \"baz\"\n"
      },
      {
        "code": "\n\nuse_osc \"10.0.1.5\", 7000        \nosc \"/foo/bar\", 1, 3.89, \"baz\"\n                                  \n                                  \n                                  \n                                  \n",
        "comments": "# Send an OSC messages with arguments to another program on a different machine\n \n# Specify port 7000 on the machine with address 10.0.1.5\n# Send an OSC message with path \"/foo/bar\"\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3.89\n# 3) The string \"baz\"\n"
      },
      {
        "code": "\n\nosc \"/foo/bar\"      \nplay 60               \n\nsleep 1               \n\nosc \"/baz/quux\"      \nplay 72                \n",
        "comments": "# OSC messages honour the timing system\n \n# Send an OSC message with path /foo/bar at *exactly* the\n# same time as note 60 is played\n \n# Wait for 1 beat\n \n# Send an OSC message with path /baz/quux at *exactly* the\n# same time as note 72 is played\n"
      },
      {
        "code": "\n\nlive_loop :foo do            \n  osc \"/counter\", tick     \n                             \n                             \n  sleep 1                    \nend",
        "comments": "# Send a incrementing OSC counter\n \n# Start a live loop called :foo\n# Send an OSC message with the path /counter\n# with successive whole numbers (0, 1, 2, 3.. etc.)\n# each time round the live loop\n# Repeat the live loop every 1 beat\n \n"
      },
      {
        "code": "\n\ntime_warp 0.5 do\n  osc \"/foo/bar\"      \nend\n\nsleep 1                 \n\ntime_warp -0.1 do\n  osc \"/baz/quux\"     \nend",
        "comments": "# OSC messages can be sent from within time_warp\n \n \n# Send an OSC message with path /foo/bar at 0.5 beats\n \n \n# Wait for 1 beat\n \n \n# Send an OSC message with path /baz/quux at 0.9 beats\n \n"
      }
    ]
  },
  "osc_send": {
    "summary": "Send an OSC message to a specific host and port",
    "doc": "Similar to `osc` except ignores any `use_osc` settings and sends the OSC message directly to the specified `hostname` and `port`.\n\nSee `osc` for more information.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "number"
        },
        "path": {
          "type": "osc_path"
        },
        "args": {
          "type": "list"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "osc_send \"localhost\", 7000, \"/foo/baz\" \n",
        "comments": "# Send an OSC message to port 7000 on the same machine\n"
      },
      {
        "code": "use_osc \"localhost\", 7010                \nosc \"/foo/baz\"                           \n\nosc_send \"localhost\", 7000, \"/foo/baz\" \n                                           \n",
        "comments": "# set hostname and port\n# Send an OSC message to port 7010\n \n# Send an OSC message to port 7000\n# (ignores use_osc settings)\n"
      }
    ]
  },
  "pick": {
    "summary": "Randomly pick from list (with duplicates)",
    "doc": "Pick n elements from list or ring. Unlike shuffle, after each element has been picked, it is 'returned' to the list so it may be picked again. This means there may be duplicates in the result. If n is greater than the size of the ring/list then duplicates are guaranteed to be in the result.\n\nIf `n` isn't supplied it defaults to a size of 1.\n\nIf no arguments are given, will return a lambda function which when called takes an argument which will be a list to be picked from. This is useful for choosing random `onset:` vals for samples.\n\nAlways returns a list-like thing (either an array or ring)",
    "introduced": "v2.10",
    "args": {
      "required": {
        "list": {
          "type": "array"
        },
        "n": {
          "type": "number_or_nil"
        }
      },
      "optional": {
        "skip": {
          "desc": "Number of rands to skip over with each successive pick"
        }
      }
    },
    "examples": [
      {
        "code": "puts [1, 2, 3, 4, 5].pick(3)\n",
        "comments": "#=> [4, 4, 3]\n"
      },
      {
        "code": "puts (ring 1, 2, 3, 4, 5).pick(3)\n",
        "comments": "#=> (ring 4, 4, 3)\n"
      },
      {
        "code": "puts (ring 1, 2).pick(5)\n",
        "comments": "#=> (ring 2, 2, 1, 1, 1)\n"
      },
      {
        "code": "puts (ring 1, 2, 3).pick\n",
        "comments": "#=> (ring 3)\n"
      },
      {
        "code": "\nlive_loop :foo do\n  sample :loop_amen, onset: pick  \n  sleep 0.125\nend",
        "comments": "# Using pick for random sample onsets\n \n# pick a random onset value each time\n \n \n"
      }
    ]
  },
  "pitch_to_ratio": {
    "summary": "relative MIDI pitch to frequency ratio",
    "doc": "Convert a midi note to a ratio which when applied to a frequency will scale the frequency by the number of semitones. Useful for changing the pitch of a sample by using it as a way of generating the rate.",
    "introduced": "v2.5",
    "args": {
      "required": {
        "pitch": {
          "type": "midi_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "pitch_to_ratio 12\n",
        "comments": "#=> 2.0\n"
      },
      {
        "code": "pitch_to_ratio 1\n",
        "comments": "#=> 1.05946\n"
      },
      {
        "code": "pitch_to_ratio -12\n",
        "comments": "#=> 0.5\n"
      },
      {
        "code": "sample :ambi_choir, rate: pitch_to_ratio(3)\n",
        "comments": "# Plays :ambi_choir 3 semitones above default.\n"
      },
      {
        "code": "\n(range 0, 16).each do |n|                 \n  sample :ambi_choir, rate: pitch_to_ratio(n)\n  sleep 0.5                               \nend",
        "comments": "# Play a chromatic scale of semitones\n# For each note in the range 0->16\n# play :ambi_choir at the relative pitch\n# and wait between notes\n \n"
      }
    ]
  },
  "play": {
    "summary": "Play current synth",
    "doc": "Play note with current synth. Accepts a set of standard options which include control of an amplitude envelope with `attack:`, `decay:`, `sustain:` and `release:` phases. These phases are triggered in order, so the duration of the sound is attack + decay + sustain + release times. The duration of the sound does not affect any other notes. Code continues executing whilst the sound is playing through its envelope phases.\n\nIf `duration:` is supplied and `sustain:` isn't, it causes `sustain:` to be set so that all four phases add up to the duration.\n\nAccepts optional args for modification of the synth being played. See each synth's documentation for synth-specific opts. See `use_synth` and `with_synth` for changing the current synth.\n\nIf note is `nil`, `:r` or `:rest`, play is ignored and treated as a rest. Also, if the `on:` opt is specified and returns `false`, or `nil` then play is similarly ignored and treated as a rest.\n\nNote that the default opts listed are only a guide to the most common opts across all the synths. Not all synths support all the default opts and each synth typically supports many more opts specific to that synth. For example, the `:tb303` synth supports 45 unique opts. For a full list of a synth's opts see its documentation in the Help system.\n    ",
    "introduced": "v2.0",
    "args": {
      "required": {
        "note": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
        "amp": {
          "desc": "The amplitude of the note"
        },
        "amp_slide": {
          "desc": "The duration in beats for amplitude changes to take place"
        },
        "pan": {
          "desc": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25"
        },
        "pan_slide": {
          "desc": "The duration in beats for the pan value to change"
        },
        "attack": {
          "desc": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently."
        },
        "decay": {
          "desc": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level)."
        },
        "sustain": {
          "desc": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release."
        },
        "release": {
          "desc": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently."
        },
        "attack_level": {
          "desc": "Amplitude level reached after attack phase and immediately before decay phase"
        },
        "decay_level": {
          "desc": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set"
        },
        "sustain_level": {
          "desc": "Amplitude level reached after decay phase and immediately before release phase."
        },
        "env_curve": {
          "desc": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed"
        },
        "slide": {
          "desc": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value"
        },
        "pitch": {
          "desc": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning."
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
        }
      }
    },
    "examples": [
      {
        "code": "play 50\n",
        "comments": "# Plays note 50 on the current synth\n"
      },
      {
        "code": "play 50, attack: 1\n",
        "comments": "# Plays note 50 with a fade-in time of 1s\n"
      },
      {
        "code": "play 62, pan: -1, release: 3\n",
        "comments": "# Play note 62 in the left ear with a fade-out time of 3s.\n"
      },
      {
        "code": "\ns = play :e3, release: 4\nsleep 1\ncontrol s, note: :e5\nsleep 0.5\nuse_synth :dsaw\nplay :e3  \n",
        "comments": "# controlling a synth synchronously\n \n \n \n \n \n# This is triggered after 1.5s from start\n"
      },
      {
        "code": "\nplay :e3, release: 4 do |s|\n  sleep 1                                              \n  control s, note: :e5                                 \nend\n\nsleep 0.5\nuse_synth :dsaw\nplay :e3\n",
        "comments": "# Controlling a synth asynchronously\n \n# This block is run in an implicit in_thread\n# and therefore is asynchronous\n \n \n \n \n# This is triggered after 0.5s from start\n"
      }
    ]
  },
  "play_chord": {
    "summary": "Play notes simultaneously",
    "doc": "Play a list of notes at the same time.\n\nAccepts optional args for modification of the synth being played. See each synth's documentation for synth-specific opts. See `use_synth` and `with_synth` for changing the current synth.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "notes": {
          "type": "list"
        }
      },
      "optional": {
        "amp": {
          "desc": "The amplitude of the note"
        },
        "amp_slide": {
          "desc": "The duration in beats for amplitude changes to take place"
        },
        "pan": {
          "desc": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25"
        },
        "pan_slide": {
          "desc": "The duration in beats for the pan value to change"
        },
        "attack": {
          "desc": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently."
        },
        "decay": {
          "desc": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level)."
        },
        "sustain": {
          "desc": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release."
        },
        "release": {
          "desc": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently."
        },
        "attack_level": {
          "desc": "Amplitude level reached after attack phase and immediately before decay phase"
        },
        "decay_level": {
          "desc": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set"
        },
        "sustain_level": {
          "desc": "Amplitude level reached after decay phase and immediately before release phase."
        },
        "env_curve": {
          "desc": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed"
        },
        "slide": {
          "desc": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value"
        },
        "pitch": {
          "desc": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning."
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
        }
      }
    },
    "examples": [
      {
        "code": "play_chord [40, 45, 47]\n\n\n\nplay 40\nplay 45\nplay 47",
        "comments": " \n \n# same as:\n \n \n \n \n"
      },
      {
        "code": "play_chord [40, 45, 47], amp: 0.5\n\n\n\nplay 40, amp: 0.5\nplay 45, amp: 0.5\nplay 47, amp: 0.5",
        "comments": " \n \n# same as:\n \n \n \n \n"
      },
      {
        "code": "play_chord chord(:e3, :minor)",
        "comments": " \n"
      }
    ]
  },
  "play_pattern": {
    "summary": "Play pattern of notes",
    "doc": "Play list of notes with the current synth one after another with a sleep of 1\n\nAccepts optional args for modification of the synth being played. See each synth's documentation for synth-specific opts. See use_synth and with_synth for changing the current synth.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "notes": {
          "type": "list"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play_pattern [40, 41, 42]\n                         \n                         \n                         \n                         \n                         \n",
        "comments": "# Same as:\n#   play 40\n#   sleep 1\n#   play 41\n#   sleep 1\n#   play 42\n"
      },
      {
        "code": "play_pattern [:d3, :c1, :Eb5]\n",
        "comments": "# You can use keyword notes\n"
      },
      {
        "code": "play_pattern [:d3, :c1, :Eb5], amp: 0.5, cutoff: 90\n",
        "comments": "# Supports the same arguments as play:\n"
      }
    ]
  },
  "play_pattern_timed": {
    "summary": "Play pattern of notes with specific times",
    "doc": "Play each note in a list of notes one after another with specified times between them. The notes should be a list of MIDI numbers, symbols such as :E4 or chords such as chord(:A3, :major) - identical to the first parameter of the play function. The times should be a list of times between the notes in beats.\n\nIf the list of times is smaller than the number of gaps between notes, the list is repeated again. If the list of times is longer than the number of gaps between notes, then some of the times are ignored. See examples for more detail.\n\nAccepts optional args for modification of the synth being played. See each synth's documentation for synth-specific opts. See `use_synth` and `with_synth` for changing the current synth.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "notes": {
          "type": "list"
        },
        "times": {
          "type": "list_or_number"
        }
      },
      "optional": {
        "amp": {
          "desc": "The amplitude of the note"
        },
        "amp_slide": {
          "desc": "The duration in beats for amplitude changes to take place"
        },
        "pan": {
          "desc": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25"
        },
        "pan_slide": {
          "desc": "The duration in beats for the pan value to change"
        },
        "attack": {
          "desc": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently."
        },
        "decay": {
          "desc": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level)."
        },
        "sustain": {
          "desc": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release."
        },
        "release": {
          "desc": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently."
        },
        "attack_level": {
          "desc": "Amplitude level reached after attack phase and immediately before decay phase"
        },
        "decay_level": {
          "desc": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set"
        },
        "sustain_level": {
          "desc": "Amplitude level reached after decay phase and immediately before release phase."
        },
        "env_curve": {
          "desc": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed"
        },
        "slide": {
          "desc": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value"
        },
        "pitch": {
          "desc": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning."
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
        }
      }
    },
    "examples": [
      {
        "code": "play_pattern_timed [40, 42, 44, 46], [1, 2, 3]\n\n\n\nplay 40\nsleep 1\nplay 42\nsleep 2\nplay 44\nsleep 3\nplay 46",
        "comments": " \n \n# same as:\n \n \n \n \n \n \n \n \n"
      },
      {
        "code": "play_pattern_timed [40, 42, 44, 46, 49], [1, 0.5]\n\n\n\nplay 40\nsleep 1\nplay 42\nsleep 0.5\nplay 44\nsleep 1\nplay 46\nsleep 0.5\nplay 49",
        "comments": " \n \n# same as:\n \n \n \n \n \n \n \n \n \n \n"
      },
      {
        "code": "play_pattern_timed [40, 42, 44, 46], [0.5]\n\n\n\nplay 40\nsleep 0.5\nplay 42\nsleep 0.5\nplay 44\nsleep 0.5\nplay 46",
        "comments": " \n \n# same as:\n \n \n \n \n \n \n \n \n"
      },
      {
        "code": "play_pattern_timed [40, 42, 44], [1, 2, 3, 4, 5]\n\n\n\nplay 40\nsleep 1\nplay 42\nsleep 2\nplay 44",
        "comments": " \n \n#same as:\n \n \n \n \n \n \n"
      }
    ]
  },
  "print": {
    "summary": "Display a message in the output pane",
    "doc": "Displays the information you specify as a string inside the output pane. This can be a number, symbol, or a string itself. Useful for debugging. Synonym for `puts`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "output": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print \"hello there\"  \n",
        "comments": "#=> will print the string \"hello there\" to the output pane\n"
      },
      {
        "code": "print 5              \n",
        "comments": "#=> will print the number 5 to the output pane\n"
      },
      {
        "code": "print foo            \n",
        "comments": "#=> will print the contents of foo to the output pane\n"
      }
    ]
  },
  "puts": {
    "summary": "Display a message in the output pane",
    "doc": "Displays the information you specify as a string inside the output pane. This can be a number, symbol, or a string itself. Useful for debugging. Synonym for `print`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "output": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print \"hello there\"  \n",
        "comments": "#=> will print the string \"hello there\" to the output pane\n"
      },
      {
        "code": "print 5              \n",
        "comments": "#=> will print the number 5 to the output pane\n"
      },
      {
        "code": "print foo            \n",
        "comments": "#=> will print the contents of foo to the output pane\n"
      }
    ]
  },
  "quantise": {
    "summary": "Quantise a value to resolution",
    "doc": "Round value to the nearest multiple of step resolution.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "n": {
          "type": "number"
        },
        "step": {
          "type": "positive_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "quantise(10, 1)\n",
        "comments": "# 10 is already a multiple of 1, so returns 10\n"
      },
      {
        "code": "quantise(10, 1.1)\n",
        "comments": "# Returns 9.9 which is 1.1 * 9\n"
      },
      {
        "code": "quantise(13.3212, 0.1)\n",
        "comments": "# 13.3\n"
      },
      {
        "code": "quantise(13.3212, 0.2)\n",
        "comments": "# 13.4\n"
      },
      {
        "code": "quantise(13.3212, 0.3)\n",
        "comments": "# 13.2\n"
      },
      {
        "code": "quantise(13.3212, 0.5)\n",
        "comments": "# 13.5\n"
      }
    ]
  },
  "ramp": {
    "summary": "Create a ramp vector",
    "doc": "Create a new immutable ramp vector from args. Indexes always return first or last value if out of bounds.",
    "introduced": "v2.6",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(ramp 1, 2, 3)[0]\n",
        "comments": "#=> 1\n"
      },
      {
        "code": "(ramp 1, 2, 3)[1]\n",
        "comments": "#=> 2\n"
      },
      {
        "code": "(ramp 1, 2, 3)[2]\n",
        "comments": "#=> 3\n"
      },
      {
        "code": "(ramp 1, 2, 3)[3]\n",
        "comments": "#=> 3\n"
      },
      {
        "code": "(ramp 1, 2, 3)[1000]\n",
        "comments": "#=> 3\n"
      },
      {
        "code": "(ramp 1, 2, 3)[-1]\n",
        "comments": "#=> 1\n"
      },
      {
        "code": "(ramp 1, 2, 3)[-1000]\n",
        "comments": "#=> 1\n"
      }
    ]
  },
  "rand": {
    "summary": "Generate a random float below a value",
    "doc": "Given a max number, produces a float between `0` and the supplied max value. If max is a range, produces a float within the range. With no args returns a random value between `0` and `1`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "max": {
          "type": "number_or_range"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print rand(0.5)\n",
        "comments": "#=> will print a number like 0.375030517578125 to the output pane\n"
      }
    ]
  },
  "rand_back": {
    "summary": "Roll back random generator",
    "doc": "Roll the random generator back essentially 'undoing' the last call to `rand`. You may specify an amount to roll back allowing you to skip back n calls to `rand`.",
    "introduced": "v2.7",
    "args": {
      "required": {
        "amount": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\n  puts rand\n\n  rand_back\n           \n           \n\n  puts rand\n  puts rand\n",
        "comments": "# Basic rand stream rollback\n \n# prints 0.75006103515625\n \n# roll random stream back one\n# the result of the next call to rand will be\n# exactly the same as the previous call\n \n# prints 0.75006103515625 again!\n# prints 0.733917236328125\n"
      },
      {
        "code": "\n\n  puts rand\n  puts rand\n  puts rand\n  puts rand\n\n  rand_back(3)\n              \n              \n              \n\n  puts rand\n  puts rand\n",
        "comments": "# Jumping back multiple places in the rand stream\n \n# prints 0.75006103515625\n# prints 0.733917236328125\n# prints 0.464202880859375\n# prints 0.24249267578125\n \n# roll random stream back three places\n# the result of the next call to rand will be\n# exactly the same as the result 3 calls to\n# rand ago.\n \n# prints  0.733917236328125 again!\n# prints  0.464202880859375\n"
      }
    ]
  },
  "rand_i": {
    "summary": "Generate a random whole number below a value (exclusive)",
    "doc": "Given a max number, produces a whole number between `0` and the supplied max value exclusively. If max is a range produces an int within the range. With no args returns either `0` or `1`",
    "introduced": "v2.0",
    "args": {
      "required": {
        "max": {
          "type": "number_or_range"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print rand_i(5)\n",
        "comments": "#=> will print either 0, 1, 2, 3, or 4 to the output pane\n"
      }
    ]
  },
  "rand_i_look": {
    "summary": "Generate a random whole number without consuming a rand",
    "doc": "Given a max number, produces a whole number between `0` and the supplied max value exclusively. If max is a range produces an int within the range. With no args returns either `0` or `1`.\n\nDoes not consume a random value from the stream. Therefore, multiple sequential calls to `rand_i_look` will all return the same value.",
    "introduced": "v2.11",
    "args": {
      "required": {
        "max": {
          "type": "number_or_range"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print rand_i_look(5)\n",
        "comments": "#=> will print either 0, 1, 2, 3, or 4 to the output pane\n"
      },
      {
        "code": "print rand_i_look(5)\nprint rand_i_look(5)\nprint rand_i_look(5)\nprint rand_i(5)\nprint rand_i_look(5)\n",
        "comments": "#=> will print either 0, 1, 2, 3, or 4 to the output pane\n#=> will print the same number again\n#=> will print the same number again\n#=> will print either 0, 1, 2, 3, or 4 to the output pane\n#=> will print the same number as the previous statement\n"
      }
    ]
  },
  "rand_look": {
    "summary": "Generate a random number without consuming a rand",
    "doc": "Given a max number, produces a number between `0` and the supplied max value exclusively. If max is a range produces an int within the range. With no args returns a value between `0` and `1`.\n\nDoes not consume a random value from the stream. Therefore, multiple sequential calls to `rand_look` will all return the same value.",
    "introduced": "v2.11",
    "args": {
      "required": {
        "max": {
          "type": "number_or_range"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print rand_look(0.5)\n",
        "comments": "#=> will print a number like 0.375030517578125 to the output pane\n"
      },
      {
        "code": "print rand_look(0.5)\n  print rand_look(0.5)\n  print rand_look(0.5)\n  print rand(0.5)\n  print rand_look(0.5)\n",
        "comments": "#=> will print a number like 0.375030517578125 to the output pane\n#=> will print the same number again\n#=> will print the same number again\n#=> will print a different random number\n#=> will print the same number as the previous line again.\n"
      }
    ]
  },
  "rand_reset": {
    "summary": "Reset rand generator to last seed",
    "doc": "Resets the random stream to the last specified seed. See `use_random_seed` for changing the seed.",
    "introduced": "v2.7",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts rand\n  puts rand\n  puts rand\n  puts rand\n  rand_reset \n  puts rand\n",
        "comments": "# prints 0.75006103515625\n# prints 0.733917236328125\n# prints 0.464202880859375\n# prints 0.24249267578125\n# reset the random stream\n# prints 0.75006103515625\n"
      }
    ]
  },
  "rand_skip": {
    "summary": "Jump forward random generator",
    "doc": "Jump the random generator forward essentially skipping the next call to `rand`. You may specify an amount to jump allowing you to skip n calls to `rand`.",
    "introduced": "v2.7",
    "args": {
      "required": {
        "amount": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\n  puts rand\n\n  rand_skip\n           \n\n  puts rand\n",
        "comments": "# Basic rand stream skip\n \n# prints 0.75006103515625\n \n# jump random stream forward one\n# typically the next rand is 0.733917236328125\n \n# prints 0.464202880859375\n"
      },
      {
        "code": "\n\n  puts rand\n  puts rand\n  puts rand\n  puts rand\n\n  rand_reset \n\n  puts rand\n\n  rand_skip(2)\n              \n              \n              \n\n  puts rand 0.24249267578125",
        "comments": "# Jumping forward multiple places in the rand stream\n \n# prints 0.75006103515625\n# prints 0.733917236328125\n# prints 0.464202880859375\n# prints 0.24249267578125\n \n# reset the random stream\n \n# prints 0.75006103515625\n \n# jump random stream forward three places\n# the result of the next call to rand will be\n# exactly the same as if rand had been called\n# three times\n \n \n"
      }
    ]
  },
  "range": {
    "summary": "Create a ring buffer with the specified start, finish and step size",
    "doc": "Create a new ring buffer from the range arguments (start, finish and step size). Step size defaults to `1`. Indexes wrap around positively and negatively",
    "introduced": "v2.2",
    "args": {
      "required": {
        "start": {
          "type": "number"
        },
        "finish": {
          "type": "number"
        },
        "step_size": {
          "type": "number"
        }
      },
      "optional": {
        "step": {
          "desc": "Size of increment between steps; step size."
        },
        "inclusive": {
          "desc": "If set to true, range is inclusive of finish value"
        }
      }
    },
    "examples": [
      {
        "code": "(range 1, 5)   \n",
        "comments": "#=> (ring 1, 2, 3, 4)\n"
      },
      {
        "code": "(range 1, 5, inclusive: true)\n",
        "comments": "#=> (ring 1, 2, 3, 4, 5)\n"
      },
      {
        "code": "(range 1, 5, step: 2)\n",
        "comments": "#=> (ring 1, 3)\n"
      },
      {
        "code": "(range 1, -5, step: 2)\n",
        "comments": "#=> (ring 1, -1, -3)\n"
      },
      {
        "code": "(range 1, -5, step: 2)[-1]\n",
        "comments": "#=> -3\n"
      }
    ]
  },
  "ratio_to_pitch": {
    "summary": "relative frequency ratio to MIDI pitch",
    "doc": "Convert a frequency ratio to a midi note which when added to a note will transpose the note to match the frequency ratio.",
    "introduced": "v2.7",
    "args": {
      "required": {
        "ratio": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "ratio_to_pitch 2\n",
        "comments": "#=> 12.0\n"
      },
      {
        "code": "ratio_to_pitch 0.5\n",
        "comments": "#=> -12.0\n"
      }
    ]
  },
  "rdist": {
    "summary": "Random number in centred distribution",
    "doc": "Returns a random number within the range with width around centre. If optional arg `step:` is used, the result is quantised by step.",
    "introduced": "v2.3",
    "args": {
      "required": {
        "width": {
          "type": "number"
        },
        "centre": {
          "type": "number"
        }
      },
      "optional": {
        "step": {
          "desc": "Step size of value to quantise to."
        }
      }
    },
    "examples": [
      {
        "code": "print rdist(1, 0)\n",
        "comments": "#=> will print a number between -1 and 1\n"
      },
      {
        "code": "print rdist(1)\n",
        "comments": "#=> centre defaults to 0 so this is the same as rdist(1, 0)\n"
      },
      {
        "code": "loop do\n    play :c3, pan: rdist(1)\n    sleep 0.125\n  end",
        "comments": " \n#=> Will play :c3 with random L/R panning\n \n \n"
      }
    ]
  },
  "reset": {
    "summary": "Reset all thread locals",
    "doc": "All settings such as the current synth, BPM, random stream and tick values will be reset to the values inherited from the parent thread. Consider using `clear` to reset all these values to their defaults.",
    "introduced": "v2.11",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nuse_synth :blade\nuse_octave 3\n\nputs \"before\"        \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\nreset\n\nputs \"after\"         \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n",
        "comments": "# Basic Reset\n \n \n \n#=> \"before\"\n#=> :blade\n#=> 3\n#=> 0.75006103515625\n#=> 0\n \n \n \n#=> \"after\"\n#=> :beep\n#=> 0\n#=> 0.75006103515625\n#=> 0\n"
      },
      {
        "code": "Reset remembers defaults from when the thread was created:\nuse_synth :blade\nuse_octave 3\n\nputs \"before\"        \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\nat do\n  use_synth :tb303\n  puts rand              \n  reset\n  puts \"thread\"         \n\n\n                         \n                         \n                         \n                         \n                         \n  puts current_synth     \n  puts current_octave    \n\n                         \n                         \n                         \n                         \n  puts rand              \n  puts tick              \nend",
        "comments": " \n \n \n \n#=> \"before\"\n#=> :blade\n#=> 3\n#=> 0.75006103515625\n#=> 0\n \n \n \n#=> 0.9287109375\n \n#=> \"thread\"\n \n \n# The call to reset ensured that the current\n# synth was returned to the the state at the\n# time this thread was started. Thus any calls\n# to use_synth between this line and the start\n# of the thread are ignored\n#=> :blade\n#=> 3\n \n# The call to reset ensured\n# that the random stream was reset\n# to the same state as it was when\n# the current thread was started\n#=> 0.9287109375\n#=> 0\n \n"
      }
    ]
  },
  "reset_mixer!": {
    "summary": "Reset main mixer",
    "doc": "The main mixer is the final mixer that all sound passes through. This fn resets it to its default set - undoing any changes made via set_mixer_control!",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_mixer_control! lpf: 70\nsample :loop_amen         \nsleep 3\nreset_mixer!              \nsample :loop_amen         \n",
        "comments": "# LPF cutoff value of main mixer is now 70\n# :loop_amen sample is played with low cutoff\n \n# mixer is now reset to default values\n# :loop_amen sample is played with normal cutoff\n"
      }
    ]
  },
  "rest?": {
    "summary": "Determine if note or args is a rest",
    "doc": "Given a note or an args map, returns true if it represents a rest and false if otherwise",
    "introduced": "v2.1",
    "args": {
      "required": {
        "note_or_args": {
          "type": "number_symbol_or_map"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts rest? nil\n",
        "comments": "# true\n"
      },
      {
        "code": "puts rest? :r\n",
        "comments": "# true\n"
      },
      {
        "code": "puts rest? :rest\n",
        "comments": "# true\n"
      },
      {
        "code": "puts rest? 60\n",
        "comments": "# false\n"
      },
      {
        "code": "puts rest? {}\n",
        "comments": "# false\n"
      },
      {
        "code": "puts rest? {note: :rest}\n",
        "comments": "# true\n"
      },
      {
        "code": "puts rest? {note: nil}\n",
        "comments": "# true\n"
      },
      {
        "code": "puts rest? {note: 50}\n",
        "comments": "# false\n"
      }
    ]
  },
  "ring": {
    "summary": "Create a ring buffer",
    "doc": "Create a new immutable ring buffer from args. Indexes wrap around positively and negatively",
    "introduced": "v2.2",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(ring 1, 2, 3)[0]\n",
        "comments": "#=> 1\n"
      },
      {
        "code": "(ring 1, 2, 3)[1]\n",
        "comments": "#=> 2\n"
      },
      {
        "code": "(ring 1, 2, 3)[3]\n",
        "comments": "#=> 1\n"
      },
      {
        "code": "(ring 1, 2, 3)[-1]\n",
        "comments": "#=> 3\n"
      }
    ]
  },
  "rrand": {
    "summary": "Generate a random float between two numbers",
    "doc": "Given two numbers, this produces a float between the supplied min and max values exclusively. Both min and max need to be supplied. For random integers, see `rrand_i`. If optional arg `step:` is used, the result is quantised by step.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "min": {
          "type": "number"
        },
        "max": {
          "type": "number"
        }
      },
      "optional": {
        "step": {
          "desc": "Step size of value to quantise to."
        }
      }
    },
    "examples": [
      {
        "code": "print rrand(0, 10)\n",
        "comments": "#=> will print a number like 8.917730007820797 to the output pane\n"
      },
      {
        "code": "loop do\n    play rrand(60, 72)\n    sleep 0.125\n  end",
        "comments": " \n#=> Will play a random non-integer midi note between C4 (60) and C5 (72) such as 67.3453 or 71.2393\n \n \n"
      }
    ]
  },
  "rrand_i": {
    "summary": "Generate a random whole number between two points inclusively",
    "doc": "Given two numbers, this produces a whole number between the min and max you supplied inclusively. Both min and max need to be supplied. For random floats, see `rrand`",
    "introduced": "v2.0",
    "args": {
      "required": {
        "min": {
          "type": "number"
        },
        "max": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "print rrand_i(0, 10)\n",
        "comments": "#=> will print a random number between 0 and 10 (e.g. 4, 0 or 10) to the output pane\n"
      },
      {
        "code": "loop do\n    play rrand_i(60, 72)\n    sleep 0.125\n  end",
        "comments": " \n#=> Will play a random midi note between C4 (60) and C5 (72)\n \n \n"
      }
    ]
  },
  "rt": {
    "summary": "Real time conversion",
    "doc": "Real time representation. Returns the amount of beats for the value in real-time seconds. Useful for bypassing any bpm scaling",
    "introduced": "v2.0",
    "args": {
      "required": {
        "seconds": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 120 \n  play 50\n  sleep 1     \n  play 62\n  sleep rt(1) \n  play 72",
        "comments": "# modifies all time to be half\n \n# actually sleeps for half of a second\n \n# bypasses bpm scaling and sleeps for a second\n \n"
      }
    ]
  },
  "run_code": {
    "summary": "Evaluate the code passed as a String as a new Run",
    "doc": "Executes the code passed as a string in a new Run. This works as if the code was in a buffer and Run button was pressed.",
    "introduced": "v2.11",
    "args": {
      "required": {
        "code": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "run_code \"sample :ambi_lunar_land\"\n",
        "comments": "#=> will play the :ambi_lunar_land sample\n"
      },
      {
        "code": "\nrun_code \"8.times do\nplay 60\nsleep 1\nend\"\n",
        "comments": "# Works with any amount of code:\n \n \n \n# will play 60 8 times\n"
      }
    ]
  },
  "run_file": {
    "summary": "Evaluate the contents of the file as a new Run",
    "doc": "Reads the full contents of the file with `path` and executes it in a new Run. This works as if the code in the file was in a buffer and Run button was pressed.",
    "introduced": "v2.11",
    "args": {
      "required": {
        "filename": {
          "type": "path"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "run_file \"~/path/to/sonic-pi-code.rb\"\n",
        "comments": "#=> will run the contents of this file\n"
      }
    ]
  },
  "sample": {
    "summary": "Trigger sample",
    "doc": "Play back a recorded sound file (sample). Sonic Pi comes with lots of great samples included (see the section under help) but you can also load and play `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` files from anywhere on your computer too. To play a built-in sample use the corresponding keyword such as `sample :bd_haus`. To play any file on your computer use a full path such as `sample \"/path/to/sample.wav\"`.\n\nThere are many opts for manipulating the playback. For example, the `rate:` opt affects both the speed and the pitch of the playback. To control the rate of the sample in a pitch-meaningful way take a look at the `rpitch:` opt.\n\nThe sampler synth has three separate envelopes - one for amplitude, one for a low pass filter and another for a high pass filter. These work very similar to the standard synth envelopes except for two major differences. Firstly, the envelope times do not stretch or shrink to match the BPM. Secondly, the sustain time by default stretches to make the envelope fit the length of the sample. This is explained in detail in the tutorial.\n\nSamples are loaded on-the-fly when first requested (and subsequently remembered). If the sample loading process takes longer than the schedule ahead time, the sample trigger will be skipped rather than be played late and out of time. To avoid this you may preload any samples you wish to work with using `load_sample` or `load_samples`.\n\nIt is possible to set the `start:` and `finish:` positions within the sample to play only a sub-section of it. These values can be automatically chosen based on an onset detection algorithm which will essentially isolate each individual drum or synth hit in the sample and let you access each one by an integer index (floats will be rounded to the nearest integer value). See the `onset:` docstring and examples for more information.\n\nFinally, the sampler supports a powerful filtering system to make it easier to work with large folders of samples. The filter commands must be used before the first standard opt. There are six kinds of filter parameters you may use:\n\n1. Folder strings - `\"/foo/bar\"` - which will add all samples within the folder to the set of candidates.\n2. Recursive folder strings - `\"/foo/bar/**\"` - Folder strings ending with `**` will add all samples contained within all subfolders (searched recursively).\n3. Sample strings - `\"/path/to/sample.wav\"` - which will add the specific sample to the set of candidates.\n4. Other strings - `\"foobar\"` - which will filter the candidates based on whether the filename contains the string.\n5. Regular expressions - `/b[aA]z.*/` - which will filter the candidates based on whether the regular expression matches the filename.\n6. Keywords - `:quux` - will filter the candidates based on whether the keyword is a direct match of the filename (without extension).\n7. Numbers - `0` - will select the candidate with that index (wrapping round like a ring if necessary).\n8. Lists of the above - `[\"/foo/bar\", \"baz\", /0-9.*/]` - will recurse down and work through the internal filter parameters as if they were in the top level.\n9. Lambdas - `lambda {|s| [s.choose] }` - the ultimate power tool for filters. Allows you to create a custom fn which receives a list of candidates as an arg and which should return a new list of candidates (this may be smaller, larger, re-ordered it's up to you).\n\nBy combining commands which add to the candidates and then filtering those candidates it is possible to work with folders full of samples in very powerful ways. Note that the specific ordering of filter parameters is irrelevant with the exception of the numbers - in which case the last number is the index. All the candidates will be gathered first before the filters are applied.\n",
    "introduced": "v2.0",
    "args": {
      "required": {
        "name_or_path": {
          "type": "symbol_or_string"
        }
      },
      "optional": {
        "rate": {
          "desc": "Rate with which to play back the sample. Higher rates mean an increase in pitch and a decrease in duration. Default is 1."
        },
        "beat_stretch": {
          "desc": "Stretch (or shrink) the sample to last for exactly the specified number of beats. Please note - this does *not* keep the pitch constant and is essentially the same as modifying the rate directly."
        },
        "pitch_stretch": {
          "desc": "Stretch (or shrink) the sample to last for exactly the specified number of beats. This attempts to keep the pitch constant using the `pitch:` opt. Note, it's very likely you'll need to experiment with the `window_size:`, `pitch_dis:` and `time_dis:` opts depending on the sample and the amount you'd like to stretch/shrink from original size."
        },
        "attack": {
          "desc": "Time to reach full volume. Default is 0."
        },
        "sustain": {
          "desc": "Time to stay at full volume. Default is to stretch to length of sample (minus attack and release times)."
        },
        "release": {
          "desc": "Time (from the end of the sample) to go from full amplitude to 0. Default is 0."
        },
        "start": {
          "desc": "Position in sample as a fraction between 0 and 1 to start playback. Default is 0."
        },
        "finish": {
          "desc": "Position in sample as a fraction between 0 and 1 to end playback. Default is 1."
        },
        "pan": {
          "desc": "Stereo position of audio. -1 is left ear only, 1 is right ear only, and values in between position the sound accordingly. Default is 0."
        },
        "amp": {
          "desc": "Amplitude of playback."
        },
        "pre_amp": {
          "desc": "Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor."
        },
        "onset": {
          "desc": "Analyse the sample with an onset detection algorithm and automatically set or override the `start:` and `finish:` opts to play the nth onset only. Allows you to treat a rhythm sample as a palette of individual drum/synth hits. If `start:` or `finish:` opts are used in addition to `onset:` then they will work within the onset rather than the whole sample. Floats are rounded to the nearest whole number."
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the sample from being played. Ensures all opts are evaluated."
        },
        "slice": {
          "desc": "Divides the sample duration evenly into `num_slices:` sections (defaults to 16) and set the `start:` and `finish:` opts to play the nth slice only. If `start:` or `finish:` opts are used in addition to `slice:` then they will work within the slice rather than the whole sample. Use the envelope opts to remove any clicks introduced if the slice boundary is in the middle of a sound. Also consider `onset:` as an alternative to `slice:`. If `onset:` is also used then the slices will be within the onset rather than the whole sample. Floats are rounded to the nearest whole number."
        },
        "num_slices": {
          "desc": "Number of slices to divide the sample into when using the `slice:` opt. Defaults to 16. Floats are rounded to the nearest whole number."
        },
        "norm": {
          "desc": "Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping."
        },
        "lpf": {
          "desc": "Cutoff value of the built-in low pass filter (lpf) in MIDI notes. Unless specified, the lpf is *not* added to the signal chain."
        },
        "lpf_init_level": {
          "desc": "The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt."
        },
        "lpf_attack_level": {
          "desc": "The peak lpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the `lpf_decay_level:` opt."
        },
        "lpf_decay_level": {
          "desc": "The level of lpf cutoff after the decay phase as a MIDI note. Default value is to match the `lpf_sustain_level:` opt."
        },
        "lpf_sustain_level": {
          "desc": "The sustain cutoff (value of lpf cutoff at sustain time) as a MIDI note. Default value is to match the `lpf_release_level:` opt."
        },
        "lpf_release_level": {
          "desc": "The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt."
        },
        "lpf_attack": {
          "desc": "Attack time for lpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope's attack value."
        },
        "lpf_decay": {
          "desc": "Decay time for lpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope's decay value."
        },
        "lpf_sustain": {
          "desc": "Amount of time for lpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch."
        },
        "lpf_release": {
          "desc": "Amount of time (in beats) for sound to move from lpf cutoff sustain value to lpf cutoff min value. Default value is set to match amp envelope's release value."
        },
        "lpf_min": {
          "desc": "Starting value of the lpf cutoff envelope. Default is 30."
        },
        "lpf_env_curve": {
          "desc": "Select the shape of the curve between levels in the lpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed."
        },
        "hpf": {
          "desc": "Cutoff value of the built-in high pass filter (hpf) in MIDI notes. Unless specified, the hpf is *not* added to the signal chain."
        },
        "hpf_init_level": {
          "desc": "The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130."
        },
        "hpf_attack_level": {
          "desc": "The peak hpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the `hpf_decay_level:` opt."
        },
        "hpf_decay_level": {
          "desc": "The level of hpf cutoff after the decay phase as a MIDI note. Default value is to match the `hpf_sustain_level:` opt."
        },
        "hpf_sustain_level": {
          "desc": "The sustain cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the `hpf_release_level:` opt."
        },
        "hpf_release_level": {
          "desc": "The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the `hpf:` opt."
        },
        "hpf_attack": {
          "desc": "Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope's attack value."
        },
        "hpf_decay": {
          "desc": "Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope's decay value."
        },
        "hpf_sustain": {
          "desc": "Amount of time for hpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch."
        },
        "hpf_release": {
          "desc": "Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value."
        },
        "hpf_env_curve": {
          "desc": "Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed."
        },
        "hpf_max": {
          "desc": "Maximum value of the high pass filter envelope. Default is 200."
        },
        "rpitch": {
          "desc": "Rate modified pitch. Multiplies the rate by the appropriate ratio to shift up or down the specified amount in MIDI notes. Please note - this does *not* keep the duration and rhythmical rate constant and is essentially the same as modifying the rate directly."
        },
        "pitch": {
          "desc": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning."
        },
        "window_size": {
          "desc": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed. The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input."
        },
        "pitch_dis": {
          "desc": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the `pitch:` opt)."
        },
        "time_dis": {
          "desc": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size."
        },
        "compress": {
          "desc": "Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal."
        },
        "threshold": {
          "desc": "Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the `compress:` opt."
        },
        "slope_below": {
          "desc": "Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the `compress:` opt."
        },
        "slope_above": {
          "desc": "Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the `compress:` opt."
        },
        "clamp_time": {
          "desc": "Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the `compress:` opt."
        },
        "relax_time": {
          "desc": "Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the `compress:` opt."
        },
        "slide": {
          "desc": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value."
        },
        "path": {
          "desc": "Path of the sample to play. Typically this opt is rarely used instead of the more powerful source/filter system. However it can be useful when working with pre-made opt maps."
        }
      }
    },
    "examples": [
      {
        "code": "\nsample :loop_amen\n",
        "comments": "# Play a built-in sample\n# Plays the Amen break\n"
      },
      {
        "code": "\n\nsample :loop_amen\nsample :ambi_lunar_land\n                       \n",
        "comments": "# Play two samples at the same time\n# with incredible timing accuracy\n \n# Note, for timing guarantees select the pref:\n#   Studio -> Synths and FX -> Enforce timing guarantees\n"
      },
      {
        "code": "\nlive_loop :bass do\n  sample :bd_haus\n  sleep 0.5\nend",
        "comments": "# Create a simple repeating bass drum\n \n \n \n \n"
      },
      {
        "code": "\nlive_loop :rhythm do\n  sample :tabla_ghe3 if (spread 5, 7).tick\n  sleep 0.125\nend\nlive_loop :bd, sync: :rhythm do\n  sample :bd_haus, lpf: 90, amp: 2\n  sleep 0.5\nend",
        "comments": "# Create a more complex rhythm with multiple live loops:\n \n \n \n \n \n \n \n \n"
      },
      {
        "code": "\nsample :loop_amen, rate: 0.5\n                            \n",
        "comments": "# Change the playback speed of the sample using rate:\n# Play the Amen break at half speed\n# for old school hip-hop\n"
      },
      {
        "code": "\nsample :loop_amen, rate: 1.5\n                            \n",
        "comments": "# Speed things up\n# Play the Amen break at 1.5x speed\n# for a jungle/gabba sound\n"
      },
      {
        "code": "\nsample :loop_amen, rate: -1\n",
        "comments": "# Go backwards\n# Negative rates play the sample backwards\n"
      },
      {
        "code": "\nsample :loop_amen, rate: -3\n",
        "comments": "# Fast rewind\n# Play backwards at 3x speed for a fast rewind effect\n"
      },
      {
        "code": "\nsample :loop_amen, start: 0.5\n",
        "comments": "# Start mid sample\n# Start playback half way through\n"
      },
      {
        "code": "\nsample :loop_amen, finish: 0.5\n",
        "comments": "# Finish mid sample\n# Finish playback half way through\n"
      },
      {
        "code": "\nsample :loop_amen, start: 0.125, finish: 0.25\n",
        "comments": "# Play part of a sample\n# Play the second eighth of the sample\n"
      },
      {
        "code": "\nsample :loop_amen, start: 0.25, finish: 0.125\n",
        "comments": "# Finishing before the start plays backwards\n# Play the second eighth of the sample backwards\n"
      },
      {
        "code": "\nsample :loop_amen, start: 0.125, finish: 0.25, rate: -0.25\n                                                          \n                                                          \n",
        "comments": "# Play a section of a sample at quarter speed backwards\n# Play the second eighth of the\n# amen break backwards at a\n# quarter speed\n"
      },
      {
        "code": "\ns = sample :loop_amen, lpf: 70\nsleep 0.5\ncontrol s, lpf: 130\nsleep 0.5\nsynth :dsaw, note: :e3\n",
        "comments": "# Control a sample synchronously\n \n \n \n \n# This is triggered 1s from start\n"
      },
      {
        "code": "\nsample :loop_amen, lpf: 70 do |s|\n  sleep 1                               \n  control s, lpf: 130                   \nend\nsleep 0.5\nsynth :dsaw, note: :e3\n",
        "comments": "# Controlling a sample asynchronously\n \n# This block is run in an implicit in_thread\n# and therefore is asynchronous\n \n \n# This is triggered 0.5s from start\n"
      },
      {
        "code": "\nsample :loop_garzul, slice: 0     \nsleep 0.5\n4.times do\n  sample :loop_garzul, slice: 1   \n  sleep 0.125\nend\nsample :loop_garzul, slice: 4, num_slices: 4, rate: -1     \n",
        "comments": "# Play with slices\n# => play the first 16th of the sample\n \n \n# => play the second 16th of the sample 4 times\n \n \n# => play the final quarter backwards\n"
      },
      {
        "code": "\nuse_sample_bpm :loop_amen                   \nlive_loop :beat_slicer do\n  n = 8                                     \n                                            \n  s = rand_i n                              \n  sample :loop_amen, slice: s, num_slices: n\n  sleep 1.0/n                               \nend",
        "comments": "# Build a simple beat slicer\n# Set the BPM to match the amen break sample\n \n# Specify number of slices\n# (try changing to 2, 4, 6, 16 or 32)\n# Choose a random slice within range\n# Play the specific part of the sample\n# Sleep for the duration of the slice\n \n"
      },
      {
        "code": "\nsample :loop_amen, lpf: 80, hpf: 70, compress: 1, pre_amp: 10\n",
        "comments": "# Play with the built-in low pass filter, high pass filter and compressor\n# Make the amen break sound punchy.\n"
      },
      {
        "code": "\nsample :loop_garzul, lpf_attack: 8\nsleep 8\nsample :loop_garzul, hpf_attack: 8\n",
        "comments": "# Use the cutoff filter envelopes\n# Sweep the low pass filter up over 8 beats\n \n# Sweep the high pass filter down over 8 beats\n"
      },
      {
        "code": "\nputs sample_duration :loop_industrial                  \nputs sample_duration :loop_industrial, beat_stretch: 1 \nlive_loop :industrial do\n  sample :loop_industrial, beat_stretch: 1             \n  sleep 1                                              \n                                                       \n                                                       \nend",
        "comments": "# Sample stretching\n# => 0.88347\n# => 1\n \n# Stretch the sample to make it 1 beat long\n# This now loops perfectly.\n# However, note that stretching/shrinking\n# also modifies the pitch.\n \n"
      },
      {
        "code": "\nputs sample_duration :loop_garzul                      \nputs sample_duration :loop_garzul, beat_stretch: 6     \nlive_loop :garzul do\n  sample :loop_garzul, beat_stretch: 6                 \n                                                       \n                                                       \n  sleep 6\nend",
        "comments": "# Sample shrinking\n# => 8\n# => 6\n \n# As :loop_garzul is longer than 6 beats\n# it is shrunk to fit. This increases the\n# pitch.\n \n \n"
      },
      {
        "code": "\nuse_bpm 30                                             \nputs sample_duration :loop_garzul                      \nputs sample_duration :loop_garzul, beat_stretch: 6     \nlive_loop :garzul do\n  sample :loop_garzul, beat_stretch: 6                 \n  sleep 6\nend",
        "comments": "# Sample stretching matches the BPM\n# Set the BPM to 30\n# => 4.0 (at 30 BPM the sample lasts for 4 beats)\n# => 6.0\n \n# The sample is stretched to match 6 beats at 30 BPM\n \n \n"
      },
      {
        "code": "\nsample \"/path/to/sample.wav\"                         \n                                                       \n                                                       \n",
        "comments": "# External samples\n# Play any Wav, Aif, Ogg, Oga, or FLAC sample on your computer\n# by simply passing a string representing the full\n# path\n"
      },
      {
        "code": "\ndir = \"/path/to/dir/of/samples\"                      \nsample dir                                             \n                                                       \nsample dir, 1                                          \nsample dir, 99                                         \n                                                       \n                                                       \n                                                       \n                                                       \nsample dir, \"120\"                                    \n                                                       \n                                                       \nsample dir, \"120\", 1                                 \n                                                       \n                                                       \nsample dir, /beat[0-9]/                                \n                                                       \n                                                       \n                                                       \n                                                       \nsample dir, /beat[0-9]0/, \"100\"                      \n                                                       \n                                                       \n                                                       \n",
        "comments": "# Sample pack filtering\n# You can easily work with a directory of samples\n# Play the first sample in the directory\n# (it is sorted alphabetically)\n# Play the second sample in the directory\n# Play the 100th sample in the directory, or if there\n# are fewer, treat the directory like a ring and keep\n# wrapping the index round until a sample is found.\n# For example, if there are 90 samples, the 10th sample\n# is played (index 9).\n# Play the first sample in the directory that contains\n# the substring \"120\".\n# For example, this may be \"beat1_120_rave.wav\"\n# Play the second sample in the directory that contains\n# the substring \"120\".\n# For example, this may be \"beat2_120_rave.wav\"\n# Play the first sample in the directory that matches\n# the regular expression /beat[0-9]/.\n# For example, this may be \"beat0_100_trance.wav\"\n# You may use the full power of Ruby's regular expression\n# system here: http://ruby-doc.org/core-2.1.1/Regexp.html\n# Play the first sample in the directory that both matches\n# the regular expression /beat[0-9]0/ and contains the\n# the substring \"100\".\n# For example, this may be \"beat10_100_rave.wav\"\n"
      },
      {
        "code": "\n                                                       \n                                                       \nsample \"tabla_\"                                      \n                                                       \nsample \"tabla_\", 2                                   \n                                                       \n",
        "comments": "# Filtering built-in samples\n# If you don't pass a directory source, you can filter over\n# the built-in samples.\n# Play the first built-in sample that contains the substring\n# \"tabla\"\n# Play the third built-in sample that contains the substring\n# \"tabla\"\n"
      },
      {
        "code": "\nload_samples \"tabla_\"                                \n                                                       \n                                                       \nlive_loop :tabla do\n  sample \"tabla_\", tick                              \n  sleep 0.125\nend",
        "comments": "# Play with whole directories of samples\n# You may pass any of the source/filter options to load_samples\n# to load all matching samples. This will load all the built-in\n# samples containing the substring \"tabla_\"\n \n# Treat the matching samples as a ring and tick through them\n \n \n"
      },
      {
        "code": "\ndir1 = \"/path/to/sample/directory\"\ndir2 = \"/path/to/other/sample/directory\"\nsample dir1, dir2, \"foo\"                             \n                                                       \n                                                       \n",
        "comments": "# Specify multiple sources\n \n \n# Match the first sample that contains the string \"foo\" out of\n# all the samples in dir1 and dir2 combined.\n# Note that the sources must be listed before any filters.\n"
      },
      {
        "code": "\ndir = \"/path/to/sample/directory\"                    \n                                                       \ndir_recursive = \"/path/to/sample/directory/**\"       \n                                                       \n                                                       \nsample dir, 0                                          \nsample dir_recursive, 0                                \n                                                       \n                                                       \n                                                       \n                                                       \n",
        "comments": "# List contents recursively\n# By default the list of all top-level samples within the directory\n# is considered.\n# However, if you finish your directory string with ** then if that\n# directory contains other directories then the samples within the\n# subdirectories and their subsubdirectories in turn are considered.\n# Play the first top-level sample in the directory\n# Play the first sample found after combining all samples found in\n# the directory and all directories within it recursively.\n# Note that if there are many sub directories this may take some time\n# to execute. However, the result is cached so subsequent calls will\n# be fast.\n"
      },
      {
        "code": "\nfilter = lambda do |candidates|                        \n  [candidates.choose]                                  \nend                                                    \n                                                       \n8.times do\n  sample \"drum_\", filter                             \n  sleep 0.25                                           \nend",
        "comments": "# Bespoke filters\n# If the built-in String, Regexp and index filters are not sufficient\n# you may write your own. They need to be a function which takes a list\n# of paths to samples and return a list of samples. This one returns a\n# list of a single randomly selected sample.\n \n# Play 8 randomly selected samples from the built-in sample set that also\n# contain the substring \"drum_\"\n \n"
      },
      {
        "code": "\n\nsample :loop_tabla, start: 0, finish: 0.00763          \n                                                       \n                                                       \nsleep 1\n                                                       \n                                                       \nsample :loop_tabla, onset: 0                           \n                                                       \n                                                       \nsleep 1\n\nsample :loop_tabla, onset: 1                           \n                                                       \n",
        "comments": "# Basic Onset Detection\n \n# If you know the right start: and finish: values, you can extract a\n# single drum hit from a longer sample. However, finding these values\n# can be very time consuming.\n \n# Instead of specifying the start: and finish: values manually you can\n# use the onset: option to find them for you using an integer index.\n# onset: 0 will set the start: and finish: values so that the first\n# percussive sound (something that shifts from quiet to loud quickly)\n# is picked out.\n \n \n# We can easily find the second percussive sound in the sample with\n# onset: 1\n"
      },
      {
        "code": "\n\n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n\n\nlive_loop :tabla do\n  use_bpm 50                                           \n  sample :loop_tabla, onset: tick                      \n  sleep [0.125, 0.25].choose                           \nend",
        "comments": "# Ticking through onsets\n \n# The onsets are actually a ring so the index will wrap around. This\n# means that if there are only 8 onsets in a sample, specifying an\n# onset of 100 will still return one of the 8 onsets. This means we\n# can use tick to work through each onset in sequence. This allows us\n# to redefine the rhythm and tempo of a sample\n \n \n \n# We can choose our own BPM here - it doesn't need to match the sample\n# tick through each onset in sequence\n# randomly choose a delay between onset triggers\n \n"
      },
      {
        "code": "\n                                                       \nuse_bpm 50\nlive_loop :tabla do\n  sample :loop_tabla, onset: pick                      \n  sleep [0.125, 0.25].choose                           \nend",
        "comments": "# Random Onset Triggering\n# We can easily pick a random onset using the pick fn\n \n \n# Each time round the live loop we now trigger a random onset\n# creating an infinite stream of randomly selected drums\n \n"
      },
      {
        "code": "\n                                                       \n                                                       \nlive_loop :tabla do\n  use_random_seed 30000                                \n  8.times do\n    sample :loop_tabla, onset: pick\n    sleep [0.125, 0.25].choose\n  end\nend",
        "comments": "# Repeatable Random Onsets\n# Instead of an infinite stream of choices, we can combine iteration\n# and use_random_seed to create repeatable riffs:\n \n# every 8 times, reset the random seed, this resets the riff\n \n \n \n \n \n"
      },
      {
        "code": "\n                                                           \n                                                           \n                                                           \n                                                           \n                                                           \nlive_loop :tabla do\n  sample :loop_tabla, onset: pick, sustain: 0, release: 0.1\n                                                           \n                                                           \n                                                           \n  sleep [0.125, 0.25].choose\nend",
        "comments": "#  Random Onset Duration\n# Each onset has a variable length (determined by the sample contents).\n# Therefore, if you wish to ensure each onset has a specific length it\n# is necessary to use the sample's amplitude envelope.\n# As the sample's envelope automatically changes the sustain: value to\n# match the duration - you also need to override this with a value of 0.\n \n# Each drum onset will now be no longer than 0.1. Note that the envelope\n# for a sample only determines the maximum duration of a sample trigger.\n# If the actual audible duration of the onset is smaller than 0.1 then\n# it will *not* be extended.\n \n \n"
      },
      {
        "code": "\n\n                                                       \n                                                       \n                                                       \n\nl = lambda {|c| puts c ; c[0]}                         \n                                                       \n                                                       \n                                                       \n\nsample :loop_tabla, onset: l                           \n\n                                                       \n                                                       \n                                                       \n                                                       \n",
        "comments": "# Onset lambdas\n \n# The onset index can be a lambda as well as an integer. If a lambda is\n# given, it will be passed a ring of all of the onsets as an argument.\n# This will be a ring of maps:\n \n# define a lambda which accepts a single argument, prints it and\n# returns the first value. This particular example is essentially\n# the same as using onset: 0 with the side effect of also printing out\n# the full ring of onsets:\n \n# (ring {:start=>0.0, :finish=>0.0076}, {:start=>0.0076, :finish 0.015}...)\n \n# We are therefore free to define this lambda to do anything we want.\n# This gives us very powerful control over the choice of onset. It is\n# unlikely you will use this frequently, but it is a powerful tool\n# that's there when you need it.\n"
      },
      {
        "code": "sample :loop_tabla, onset: 1                                        \n\n                                                                    \n                                                                    \n                                                                    \n",
        "comments": "# Plays the 2nd onset (the first onset would have index 0)\n \n# Will override opts with: {start: 0.0151, finish: 0.0304}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n"
      },
      {
        "code": "sample :loop_tabla, onset: 1, slice: 0, num_slices: 1               \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n",
        "comments": "# Plays the 2nd onset. This behaves the same as not specifying\n# a slice as we select the first of one slices.\n \n# Will override opts with: {start: 0.0151, finish: 0.0304}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n"
      },
      {
        "code": "sample :loop_tabla, onset: 1, slice: 0, num_slices: 2               \n                                                                    \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n",
        "comments": "# This plays the first half of the 2nd onset.\n# This is because  we split that onset into two slices and\n# play just the first slice (with index 0).\n \n# Will override opts with: {start: 0.0151, finish: 0.0227}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n"
      },
      {
        "code": "sample :loop_tabla, onset: 1, slice: 0, num_slices: 4               \n                                                                    \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 4, finish: 0.5  \n                                                                    \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 4, finish: 0.0, start: 0.5  \n                                                                                \n                                                                                \n                                                                                \n\n                                                                                \n                                                                                \n                                                                                \n",
        "comments": "# This plays the first quarter of the 2nd onset.\n# This is because we split that onset into four slices and\n# play just the first slice (with index 0).\n \n# Will override opts with: {start: 0.0151, finish: 0.0189}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n \n# Will play the first 1/8th of the 2nd onset.\n# This is because we split that specific onset into 4 slices\n# and then only play the first half of the first slice.\n \n# Will override opts with: {start: 0.0151, finish: 0.017}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n \n# Will play the first 1/8th of the 2nd onset backwards..\n# This is because we split that specific onset into 4 slices\n# and then only play from the first half of the first slice\n# back to the beginning.\n \n# Will override opts with: {start: 0.017, finish: 0.0151}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n"
      }
    ]
  },
  "sample_buffer": {
    "summary": "Get sample data",
    "doc": "Alias for the `load_sample` method. Loads sample if necessary and returns buffer information.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "see load_sample",
        "comments": " \n"
      }
    ]
  },
  "sample_duration": {
    "summary": "Get duration of sample in beats",
    "doc": "Given the name of a loaded sample, or a path to a `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` file returns the length of time in beats that the sample would play for. `sample_duration` understands and accounts for all the opts you can pass to `sample` which have an effect on the playback duration such as `rate:`. The time returned is scaled to the current BPM.\n\n*Note:* avoid using `sample_duration` to set the sleep time in `live_loop`s, prefer stretching the sample with the `beat_stretch:` opt or changing the BPM instead. See the examples below for details.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
        "rate": {
          "desc": "Rate modifier. For example, doubling the rate will halve the duration."
        },
        "start": {
          "desc": "Start position of sample playback as a value from 0 to 1"
        },
        "finish": {
          "desc": "Finish position of sample playback as a value from 0 to 1"
        },
        "attack": {
          "desc": "Duration of the attack phase of the envelope."
        },
        "decay": {
          "desc": "Duration of the decay phase of the envelope."
        },
        "sustain": {
          "desc": "Duration of the sustain phase of the envelope."
        },
        "release": {
          "desc": "Duration of the release phase of the envelope."
        },
        "beat_stretch": {
          "desc": "Change the rate of the sample so that its new duration matches the specified number of beats."
        },
        "pitch_stretch": {
          "desc": "Change the rate of the sample so that its new duration matches the specified number of beats but attempt to preserve pitch."
        },
        "rpitch": {
          "desc": "Change the rate to shift the pitch up or down the specified number of MIDI notes."
        }
      }
    },
    "examples": [
      {
        "code": "\nputs sample_duration(:loop_garzul)\n",
        "comments": "# Simple use\n# returns 8.0 because this sample is 8 seconds long\n"
      },
      {
        "code": "\nuse_bpm 120\nputs sample_duration(:loop_garzul)\nuse_bpm 90\nputs sample_duration(:loop_garzul)\nuse_bpm 21\nputs sample_duration(:loop_garzul)\n",
        "comments": "# The result is scaled to the current BPM\n \n# => 16.0\n \n# => 12.0\n \n# => 2.8\n"
      },
      {
        "code": "\n\nlive_loop :avoid_this do              \n  with_fx :slicer do                  \n    sample :loop_amen                 \n    sleep sample_duration(:loop_amen) \n  end                                 \nend\n\nlive_loop :prefer_this do             \n  use_sample_bpm :loop_amen           \n  with_fx :slicer do                  \n    sample :loop_amen\n    sleep 1\n  end\nend\n\nlive_loop :or_this do                 \n  with_fx :slicer do                  \n    sample :loop_amen, beat_stretch: 1\n    sleep 1\n  end\nend",
        "comments": "# Avoid using sample_duration to set the sleep time in live_loops\n \n# It is possible to use sample_duration to drive the frequency of a live loop.\n# However, if you're using a rhythmical sample such as a drum beat and it isn't\n# in the same BPM as the current BPM, then the FX such as this slicer will be\n# badly out of sync. This is because the slicer slices at the current BPM and\n# this live_loop is looping at a different BPM (that of the sample)\n \n \n# Instead prefer to set the BPM of the live_loop to match the sample. It has\n# two benefits. Now our sleep is a nice and simple 1 (as it's one beat).\n# Also, our slicer now works with the beat and sounds much better.\n \n \n \n \n \n# Alternatively we can beat_stretch the sample to match the current BPM. This has the\n# side effect of changing the rate of the sample (and hence the pitch). However, the\n# FX works nicely in time and the sleep time is also a simple 1.\n \n \n \n"
      },
      {
        "code": "\n\n                                                                 \nsample_duration :loop_garzul, rate: 1                            \n\n                                                                 \nsample_duration :loop_garzul, rate: 0.5                          \n\n                                                                 \nsample_duration :loop_garzul, rate: 2                            \n\n                                                                 \nsample_duration :loop_garzul, rate: -2                           \n\n                                                                 \nsample_duration :loop_garzul, attack: 1                          \nsample_duration :loop_garzul, attack: 100                        \nsample_duration :loop_garzul, attack: 0                          \n\n                                                                 \nsample_duration :loop_garzul, release: 1                         \nsample_duration :loop_garzul, release: 100                       \nsample_duration :loop_garzul, release: 0                         \n\n                                                                 \nsample_duration :loop_garzul, decay: 1                           \nsample_duration :loop_garzul, decay: 100                         \nsample_duration :loop_garzul, decay: 0                           \n\n                                                                 \n                                                                 \n                                                                 \nsample_duration :loop_garzul, sustain: 0, attack: 0.5            \nsample_duration :loop_garzul, sustain: 0, decay: 0.1             \nsample_duration :loop_garzul, sustain: 0, release: 1             \nsample_duration :loop_garzul, sustain: 2, attack: 0.5, release: 1\n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, sustain: 0, attack: 8, release: 3  \n\n\n                                                                 \nsample_duration :loop_garzul, rate: 10                           \nsample_duration :loop_garzul, sustain: 0, attack: 0.9, rate: 10  \n\n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, rpitch: 12                         \nsample_duration :loop_garzul, rpitch: -12                        \n\n                                                                 \nsample_duration :loop_garzul, rpitch: 12, rate: 2                \n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, beat_stretch: 3                    \nsample_duration :loop_garzul, beat_stretch: 3, rate: 0.5         \n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, pitch_stretch: 3                   \nsample_duration :loop_garzul, pitch_stretch: 3, rate: 0.5        \n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, start: 0.5                         \nsample_duration :loop_garzul, start: 0.5, finish: 0.75           \nsample_duration :loop_garzul, finish: 0.5, start: 0.75           \nsample_duration :loop_garzul, rate: 2, finish: 0.5, start: 0.75\n",
        "comments": "# The standard sample opts are also honoured\n \n# Playing a sample at standard speed will return standard length\n# => 8.0\n \n# Playing a sample at half speed will double duration\n# => 16.0\n \n# Playing a sample at double speed will halve duration\n# => 4.0\n \n# Playing a sample backwards at double speed will halve duration\n# => 4.0\n \n# Without an explicit sustain: opt attack: just affects amplitude not duration\n# => 8.0\n# => 8.0\n# => 8.0\n \n# Without an explicit sustain: opt release: just affects amplitude not duration\n# => 8.0\n# => 8.0\n# => 8.0\n \n# Without an explicit sustain: opt decay: just affects amplitude not duration\n# => 8.0\n# => 8.0\n# => 8.0\n \n# With an explicit sustain: opt, if the attack + decay + sustain + release envelope\n# duration is less than the sample duration time, the envelope will shorten the\n# sample time.\n# => 0.5\n# => 0.1\n# => 1.0\n# => 3.5\n \n# If the envelope duration is longer than the sample it will not affect the\n# sample duration\n# => 8\n \n \n# All other opts are taken into account before the comparison with the envelope opts.\n# => 0.8\n# => 0.8 (The duration of the sample is less than the envelope length so wins)\n \n \n# The rpitch: opt will modify the rate to shift the pitch of the sample up and down\n# and therefore affects duration.\n# => 4.0\n# => 16\n \n# The rpitch: and rate: opts combine together.\n# => 2.0\n \n# The beat_stretch: opt stretches the sample so that its duration matches the value.\n# It also combines with rate:\n# => 3.0\n# => 6.0\n \n# The pitch_stretch: opt acts identically to beat_stretch when just considering sample\n# duration.\n# => 3.0\n# => 6.0\n \n# The start: and finish: opts can also shorten the sample duration and also combine\n# with other opts such as rate:\n# => 4.0\n# => 2.0\n# => 2.0\n# => 1.0\n"
      },
      {
        "code": "\n\nsample :loop_amen                   \nsleep sample_duration(:loop_amen)   \nsample :loop_amen                   \n",
        "comments": "# Triggering samples one after another\n \n# start the :loop_amen sample\n# wait for the duration of :loop_amen before\n# starting it again\n"
      }
    ]
  },
  "sample_free": {
    "summary": "Free a sample on the synth server",
    "doc": "Frees the memory and resources consumed by loading the sample on the server. Subsequent calls to `sample` and friends will re-load the sample on the server.\n\nYou may also specify the same set of source and filter pre-args available to `sample` itself. `sample_free` will then free all matching samples. See `sample`'s docs for more information.",
    "introduced": "v2.9",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen\nsleep 2\nsample :loop_amen\nsleep 2\nsample_free :loop_amen\nsample :loop_amen\n",
        "comments": "# The Amen break is now loaded into memory and played\n \n# The Amen break is not loaded but played from memory\n \n# The Amen break is freed from memory\n# the Amen break is re-loaded and played\n"
      },
      {
        "code": "puts sample_info(:loop_amen).to_i\nputs sample_info(:loop_amen).to_i\n                                 \nsample_free :loop_amen\nputs sample_info(:loop_amen).to_i\n",
        "comments": "# This returns the buffer id of the sample i.e. 1\n# The buffer id remains constant whilst the sample\n# is loaded in memory\n \n# The Amen break is re-loaded and gets a *new* id.\n"
      },
      {
        "code": "sample :loop_amen\nsample :ambi_lunar_land\nsleep 2\nsample_free :loop_amen, :ambi_lunar_land\nsample :loop_amen                       \nsample :ambi_lunar_land                 \n",
        "comments": " \n \n \n \n# re-loads and plays amen\n# re-loads and plays lunar land\n"
      },
      {
        "code": "\ndir = \"/path/to/sample/dir\"\nsample_free dir\nsample_free dir, 1\nsample_free dir, :foo\nsample_free dir, /[Bb]ar/\n",
        "comments": "# Using source and filter pre-args\n \n# frees any loaded samples in \"/path/to/sample/dir\"\n# frees sample with index 1 in \"/path/to/sample/dir\"\n# frees sample with name \"foo\" in \"/path/to/sample/dir\"\n# frees sample which matches regex /[Bb]ar/ in \"/path/to/sample/dir\"\n"
      }
    ]
  },
  "sample_free_all": {
    "summary": "Free all loaded samples on the synth server",
    "doc": "Unloads all samples therefore freeing the memory and resources consumed. Subsequent calls to `sample` and friends will re-load the sample on the server.",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen       \nsample :ambi_lunar_land \nsleep 2\nsample_free_all\nsample :loop_amen       \n",
        "comments": "# load and play :loop_amen\n# load and play :ambi_lunar_land\n \n \n# re-loads and plays amen\n"
      }
    ]
  },
  "sample_groups": {
    "summary": "Get all sample groups",
    "doc": "Return a list of all the sample groups available",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "sample_info": {
    "summary": "Get sample information",
    "doc": "Alias for the `load_sample` method. Loads sample if necessary and returns sample information.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "see load_sample",
        "comments": " \n"
      }
    ]
  },
  "sample_loaded?": {
    "summary": "Test if sample was pre-loaded",
    "doc": "Given a path to a `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` file, returns `true` if the sample has already been loaded.",
    "introduced": "v2.2",
    "args": {
      "required": {
        "path": {
          "type": "string"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "load_sample :elec_blip\nputs sample_loaded? :elec_blip\nputs sample_loaded? :misc_burp\n",
        "comments": "# :elec_blip is now loaded and ready to play as a sample\n# prints true because it has been pre-loaded\n# prints false because it has not been loaded\n"
      }
    ]
  },
  "sample_names": {
    "summary": "Get sample names",
    "doc": "Return a ring of sample names for the specified group",
    "introduced": "v2.0",
    "args": {
      "required": {
        "group": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "sample_paths": {
    "summary": "Sample Pack Filter Resolution",
    "doc": "Accepts the same pre-args and opts as `sample` and returns a ring of matched sample paths.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "pre_args": {
          "type": "source_and_filter_types"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample_paths \"/path/to/samples/\"\n",
        "comments": "#=> ring of all top-level samples in /path/to/samples\n"
      },
      {
        "code": "sample_paths \"/path/to/samples/**\"\n",
        "comments": "#=> ring of all nested samples in /path/to/samples\n"
      },
      {
        "code": "sample_paths \"/path/to/samples/\", \"foo\"\n                                                containing the string \"foo\" in their filename.",
        "comments": "#=> ring of all samples in /path/to/samples\n \n"
      }
    ]
  },
  "scale": {
    "summary": "Create scale",
    "doc": "Creates a ring of MIDI note numbers when given a tonic note and a scale name. Also takes an optional `num_octaves:` parameter (octave `1` is the default). If only passed the scale name, the tonic defaults to 0. See examples.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "tonic": {
          "type": "symbol"
        },
        "name": {
          "type": "symbol"
        }
      },
      "optional": {
        "num_octaves": {
          "desc": "The number of octaves you'd like the scale to consist of. More octaves means a larger scale. Default is 1."
        }
      }
    },
    "examples": [
      {
        "code": "puts (scale :C, :major)\n",
        "comments": "# returns the following ring of MIDI note numbers: (ring 60, 62, 64, 65, 67, 69, 71, 72)\n"
      },
      {
        "code": "\nplay_pattern (scale :C, :major)",
        "comments": "# anywhere you can use a list or ring of notes, you can also use scale\n \n"
      },
      {
        "code": "\nplay_pattern (scale :C, :major, num_octaves: 2)",
        "comments": "# you can use the :num_octaves parameter to get more notes\n \n"
      },
      {
        "code": "\nputs (scale 50, :minor)\nputs (scale 50.1, :minor)\nputs (scale :minor)\n",
        "comments": "# Scales can start with any note:\n#=> (ring 50, 52, 53, 55, 57, 58, 60, 62)\n#=> (ring 50.1, 52.1, 53.1, 55.1, 57.1, 58.1, 60.1, 62.1)\n#=> (ring 0, 2, 3, 5, 7, 8, 10, 12)\n"
      },
      {
        "code": "\nlive_loop :scale_player do\n  play (scale :Eb3, :super_locrian).tick, release: 0.1\n  sleep 0.125\nend",
        "comments": "# scales are also rings\n \n \n \n \n"
      },
      {
        "code": "\nlive_loop :scaled_sample do\n  sample :bass_trance_c, rpitch: (scale 0, :minor).tick\n  sleep 1\nend",
        "comments": "# scales starting with 0 are useful in combination with sample's rpitch:\n \n \n \n \n"
      },
      {
        "code": "\n\n(scale :C, :diatonic)\n(scale :C, :ionian)\n(scale :C, :major)\n(scale :C, :dorian)\n(scale :C, :phrygian)\n(scale :C, :lydian)\n(scale :C, :mixolydian)\n(scale :C, :aeolian)\n(scale :C, :minor)\n(scale :C, :locrian)\n(scale :C, :hex_major6)\n(scale :C, :hex_dorian)\n(scale :C, :hex_phrygian)\n(scale :C, :hex_major7)\n(scale :C, :hex_sus)\n(scale :C, :hex_aeolian)\n(scale :C, :minor_pentatonic)\n(scale :C, :yu)\n(scale :C, :major_pentatonic)\n(scale :C, :gong)\n(scale :C, :egyptian)\n(scale :C, :shang)\n(scale :C, :jiao)\n(scale :C, :zhi)\n(scale :C, :ritusen)\n(scale :C, :whole_tone)\n(scale :C, :whole)\n(scale :C, :chromatic)\n(scale :C, :harmonic_minor)\n(scale :C, :melodic_minor_asc)\n(scale :C, :hungarian_minor)\n(scale :C, :octatonic)\n(scale :C, :messiaen1)\n(scale :C, :messiaen2)\n(scale :C, :messiaen3)\n(scale :C, :messiaen4)\n(scale :C, :messiaen5)\n(scale :C, :messiaen6)\n(scale :C, :messiaen7)\n(scale :C, :super_locrian)\n(scale :C, :hirajoshi)\n(scale :C, :kumoi)\n(scale :C, :neapolitan_major)\n(scale :C, :bartok)\n(scale :C, :bhairav)\n(scale :C, :locrian_major)\n(scale :C, :ahirbhairav)\n(scale :C, :enigmatic)\n(scale :C, :neapolitan_minor)\n(scale :C, :pelog)\n(scale :C, :augmented2)\n(scale :C, :scriabin)\n(scale :C, :harmonic_major)\n(scale :C, :melodic_minor_desc)\n(scale :C, :romanian_minor)\n(scale :C, :hindu)\n(scale :C, :iwato)\n(scale :C, :melodic_minor)\n(scale :C, :diminished2)\n(scale :C, :marva)\n(scale :C, :melodic_major)\n(scale :C, :indian)\n(scale :C, :spanish)\n(scale :C, :prometheus)\n(scale :C, :diminished)\n(scale :C, :todi)\n(scale :C, :leading_whole)\n(scale :C, :augmented)\n(scale :C, :purvi)\n(scale :C, :chinese)\n(scale :C, :lydian_minor)\n(scale :C, :blues_major)\n(scale :C, :blues_minor)\n(scale :C, :cargah)\n(scale :C, :buselik)\n(scale :C, :buselik_2)\n(scale :C, :kurdi)\n(scale :C, :rast)\n(scale :C, :acemli_rast)\n(scale :C, :ussak)\n(scale :C, :bayati)\n(scale :C, :bayati_2)\n(scale :C, :isfahan)\n(scale :C, :isfahan_2)\n(scale :C, :hicaz_humayun)\n(scale :C, :hicaz_humayun_2)\n(scale :C, :hicaz)\n(scale :C, :hicaz_2)\n(scale :C, :uzzal)\n(scale :C, :uzzal_2)\n(scale :C, :zirguleli_hicaz)\n(scale :C, :zirguleli_hicaz_2)\n(scale :C, :huseyni)\n(scale :C, :huseyni_2)\n(scale :C, :muhayyer)\n(scale :C, :gulizar)\n(scale :C, :neva)\n(scale :C, :neva_2)\n(scale :C, :tahir)\n(scale :C, :tahir_2)\n(scale :C, :karcigar)\n(scale :C, :suznak)\n(scale :C, :suznak_2)\n(scale :C, :mahur)\n(scale :C, :acem_asiran)\n(scale :C, :nihavend)\n(scale :C, :nihavend_2)\n(scale :C, :sultani_yegah)\n(scale :C, :sultani_yegah_2)\n(scale :C, :kurdili_hicazkar)\n(scale :C, :kurdili_hicazkar_2)\n(scale :C, :kurdili_hicazkar_3)\n(scale :C, :kurdili_hicazkar_4)\n(scale :C, :kurdili_hicazkar_5)\n(scale :C, :zirguleli_suznak)\n(scale :C, :zirguleli_suznak_2)\n(scale :C, :zirguleli_suznak_3)\n(scale :C, :hicazkar)\n(scale :C, :hicazkar_2)\n(scale :C, :evcara)\n(scale :C, :evcara_2)\n(scale :C, :evcara_3)\n(scale :C, :evcara_4)\n(scale :C, :suzidil)\n(scale :C, :suzidil_2)\n(scale :C, :sedaraban)\n(scale :C, :sedaraban_2)\n(scale :C, :segah)\n(scale :C, :segah_2)\n(scale :C, :huzzam)\n(scale :C, :huzzam_2)\n(scale :C, :bayati_araban)\n(scale :C, :acem_kurdi)\n(scale :C, :sehnaz)\n(scale :C, :sehnaz_2)\n(scale :C, :sehnaz_3)\n(scale :C, :sehnaz_4)\n(scale :C, :saba)\n(scale :C, :dugah)\n(scale :C, :dugah_2)\n(scale :C, :evic)\n(scale :C, :evic_2)\n(scale :C, :bestenigar)\n(scale :C, :ferahnak)\n(scale :C, :sevkefza)\n(scale :C, :sevkefza_2)\n(scale :C, :sevkefza_3)\n(scale :C, :ferahfeza)\n(scale :C, :ferahfeza_2)\n(scale :C, :yegah)\n(scale :C, :yegah_2)",
        "comments": "# Sonic Pi supports a large range of scales:\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n"
      }
    ]
  },
  "scale_names": {
    "summary": "All scale names",
    "doc": "Returns a ring containing all scale names known to Sonic Pi",
    "introduced": "v2.6",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts scale_names\n",
        "comments": "#=>  prints a list of all the scales\n"
      }
    ]
  },
  "scsynth_info": {
    "summary": "Return information about the internal SuperCollider sound server",
    "doc": "Create a map of information about the running audio synthesiser SuperCollider. ",
    "introduced": "v2.11",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts scsynth_info \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n",
        "comments": "#=>  (map sample_rate: 44100.0,\n#         sample_dur: 2.2675736545352265e-05,\n#         radians_per_sample: 0.00014247585204429924,\n#         control_rate: 689.0625,\n#         control_dur: 0.001451247138902545,\n#         subsample_offset: 0.0,\n#         num_output_busses: 16.0,\n#         num_input_busses: 16.0,\n#         num_audio_busses: 1024.0,\n#         num_control_busses: 4096.0,\n#         num_buffers: 4096.0)\n"
      }
    ]
  },
  "set": {
    "summary": "Store information in the Time State",
    "doc": "Store information in the Time State for the current time for either the current or any other thread. If called multiple times without an intervening call to `sleep`, `sync`, `set` or `cue`, the last value set will prevail. The value will remain in the Time State until overwritten by another call to `set`, or until Sonic Pi quits.\n\nMay be used within a `time_warp` to set past/future events. Does not affect time.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "time_state_key": {
          "type": "default"
        },
        "value": {
          "type": "anything"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set :foo, 1\n",
        "comments": "#=> Stores the value 1 with key :foo\n"
      },
      {
        "code": "set :foo, 3 \nget[:foo]\n",
        "comments": "# Set :foo to 3\n#=> returns 3\n"
      },
      {
        "code": "in_thread do\n  set :foo, 3 \nend\n\nin_thread do\n  puts get[:foo] \nend",
        "comments": " \n# Set :foo to 3\n \n \n \n#=> always returns 3 (no race conditions here!)\n \n"
      }
    ]
  },
  "set_audio_latency!": {
    "summary": "Globally modify audio latency",
    "doc": "On some systems with certain configurations (such as wireless speakers, and even a typical Windows environment with the default audio drivers) the audio latency can be large. If all the user is doing is generating audio via calls such as `play`, `synth` and `sample`, then this latency essentially adds to the schedule ahead time and for the most part can be ignored. However, if the user is combining audio with external MIDI/OSC triggered events, this latency can result in a noticeable offset. This function allows you to address this offset by moving the audio events forwards and backwards in time.\n\nSo, for example, if your audio system has an audio latency of 150ms, you can compensate for this by setting Sonic Pi's latency to be a negative value: `set_audio_latency! -150`.",
    "introduced": "v3.1",
    "args": {
      "required": {
        "milliseconds": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_audio_latency! 100\n                                                 \n",
        "comments": "# Audio events will now be scheduled 100ms\n# after the schedule ahead time\n"
      },
      {
        "code": "set_audio_latency! -200\n                                                 \n",
        "comments": "# Audio events will now be scheduled 200ms\n# before the schedule ahead time\n"
      }
    ]
  },
  "set_cent_tuning!": {
    "summary": "Global Cent tuning",
    "doc": "Globally tune Sonic Pi to play with another external instrument.\n\nUniformly tunes your music by shifting all notes played by the specified number of cents. To shift up by a cent use a cent tuning of 1. To shift down use negative numbers. One semitone consists of 100 cents.\n\nSee `use_cent_tuning` for setting the cent tuning value locally for a specific thread or `live_loop`. This is a global value and will shift the tuning for *all* notes. It will also persist for the entire session.\n\nImportant note: the cent tuning set by `set_cent_tuning!` is independent of any thread-local cent tuning values set by `use_cent_tuning` or `with_cent_tuning`. ",
    "introduced": "v2.10",
    "args": {
      "required": {
        "cent_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nset_cent_tuning! 1\nplay 50\n",
        "comments": "# Plays note 50\n \n# Plays note 50.01\n"
      }
    ]
  },
  "set_control_delta!": {
    "summary": "Set control delta globally",
    "doc": "Specify how many seconds between successive modifications (i.e. trigger then controls) of a specific node on a specific thread. Set larger if you are missing control messages sent extremely close together in time.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "time": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_control_delta! 0.1                \n\ns = play 70, release: 8, note_slide: 8\ncontrol s, note: 82                   \n                                      \n                                      \n                                      \n                                      \n                                      \n",
        "comments": "# Set control delta to 0.1\n \n# Play a note and set the slide time\n# immediately start sliding note.\n# This control message might not be\n# correctly handled as it is sent at the\n# same virtual time as the trigger.\n# If you don't hear a slide, try increasing the\n# control delta until you do.\n"
      }
    ]
  },
  "set_mixer_control!": {
    "summary": "Control main mixer",
    "doc": "The main mixer is the final mixer that all sound passes through. This fn gives you control over the main mixer allowing you to manipulate all the sound playing through Sonic Pi at once. For example, you can sweep a lpf or hpf over the entire sound. You can reset the controls back to their defaults with `reset_mixer!`.",
    "introduced": "v2.7",
    "args": {
      "required": {
      },
      "optional": {
        "pre_amp": {
          "desc": "Controls the amplitude of the signal prior to the FX stage of the mixer (prior to lpf/hpf stages). Has slide opts. Default 1."
        },
        "amp": {
          "desc": "Controls the amplitude of the signal after the FX stage. Has slide opts. Default 1."
        },
        "hpf": {
          "desc": "Global hpf FX. Has slide opts. Default 0."
        },
        "lpf": {
          "desc": "Global lpf FX. Has slide opts. Default 135.5."
        },
        "hpf_bypass": {
          "desc": "Bypass the global hpf. 0=no bypass, 1=bypass. Default 0."
        },
        "lpf_bypass": {
          "desc": "Bypass the global lpf. 0=no bypass, 1=bypass. Default 0."
        },
        "limiter_bypass": {
          "desc": "Bypass the final limiter. 0=no bypass, 1=bypass. Default 0."
        },
        "leak_dc_bypass": {
          "desc": "Bypass the final DC leak correction FX. 0=no bypass, 1=bypass. Default 0."
        }
      }
    },
    "examples": [
      {
        "code": "set_mixer_control! lpf: 30, lpf_slide: 16\n",
        "comments": "# slide the global lpf to 30 over 16 beats.\n"
      }
    ]
  },
  "set_recording_bit_depth!": {
    "summary": "Set the bit depth for recording wav files",
    "doc": "When you hit the record button, Sonic Pi saves all the audio you can hear into a wav file. By default, this file uses a resolution of 16 bits which is the same as CD audio and good enough for most use cases. However, when working with professional equipment, it is common to want to work with even higher quality files such as 24 bits and even 32 bits. This function allows you to switch the default from 16 to one of 8, 16, 24 or 32.",
    "introduced": "v2.11",
    "args": {
      "required": {
        "bit_depth": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_recording_bit_depth! 24                \n",
        "comments": "# Set recording bit depth to 24\n"
      }
    ]
  },
  "set_sched_ahead_time!": {
    "summary": "Set sched ahead time globally",
    "doc": "Specify how many seconds ahead of time the synths should be triggered. This represents the amount of time between pressing 'Run' and hearing audio. A larger time gives the system more room to work with and can reduce performance issues in playing fast sections on slower platforms. However, a larger time also increases latency between modifying code and hearing the result whilst live coding.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "time": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_sched_ahead_time! 1\n",
        "comments": "# Code will now run approximately 1 second ahead of audio.\n"
      }
    ]
  },
  "set_volume!": {
    "summary": "Set Volume globally",
    "doc": "Set the main system volume to `vol`. Accepts a value between `0` and `5` inclusive. Vols greater or smaller than the allowed values are trimmed to keep them within range. Default is `1`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "vol": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "set_volume! 2\n",
        "comments": "# Set the main system volume to 2\n"
      },
      {
        "code": "set_volume! -1\n",
        "comments": "# Out of range, so sets main system volume to 0\n"
      },
      {
        "code": "set_volume! 7\n",
        "comments": "# Out of range, so sets main system volume to 5\n"
      }
    ]
  },
  "shuffle": {
    "summary": "Randomise order of a list",
    "doc": "Returns a new list with the same elements as the original but with their order shuffled. Also works for strings",
    "introduced": "v2.1",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "shuffle [1, 2, 3, 4]\n",
        "comments": "#=> Would return something like: [3, 4, 2, 1]\n"
      },
      {
        "code": "shuffle \"foobar\" \n",
        "comments": "#=> Would return something like: \"roobfa\"\n"
      }
    ]
  },
  "sleep": {
    "summary": "Wait for beat duration",
    "doc": "Wait for a number of beats before triggering the next command. Beats are converted to seconds by scaling to the current bpm setting.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "beats": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\n  play 50 \n  play 55\n  play 62\n\n  sleep 1 \n\n  play 50 \n  sleep 0.5\n  play 55\n  sleep 0.5\n  play 62",
        "comments": "# Without calls to sleep, all sounds would happen at once:\n \n# This is actually a chord with all notes played simultaneously\n \n \n \n# Create a gap, to allow a moment's pause for reflection...\n \n# Let's try the chord again, but this time with sleeps:\n# With the sleeps, we turn a chord into an arpeggio\n \n \n \n"
      },
      {
        "code": "\n\n  use_bpm 120\n  play 50\n  sleep 1\n  play 55\n  sleep 1\n  play 62\n\n \n\n  use_bpm 30\n  play 50\n  sleep 1\n  play 55\n  sleep 1\n  play 62",
        "comments": "# The amount of time sleep pauses for is scaled to match the current bpm. The default bpm is 60. Let's double it:\n \n \n \n# This actually sleeps for 0.5 seconds as we're now at double speed\n \n \n \n \n# Let's go down to half speed:\n \n \n \n# This now sleeps for 2 seconds as we're now at half speed.\n \n \n \n"
      }
    ]
  },
  "spark": {
    "summary": "Print a string representing a list of numeric values as a spark graph/bar chart",
    "doc": "Given a list of numeric values, this method turns them into a string of bar heights and prints them out. Useful for quickly graphing the shape of an array.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "spark (range 1, 5)   \n",
        "comments": "#=> ▁▃▅█\n"
      },
      {
        "code": "spark (range 1, 5).shuffle\n",
        "comments": "#=> ▃█▅▁\n"
      }
    ]
  },
  "spark_graph": {
    "summary": "Returns a string representing a list of numeric values as a spark graph/bar chart",
    "doc": "Given a list of numeric values, this method turns them into a string of bar heights. Useful for quickly graphing the shape of an array. Remember to use puts so you can see the output. See `spark` for a simple way of printing a spark graph.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts (spark_graph (range 1, 5))   \n",
        "comments": "#=> ▁▃▅█\n"
      },
      {
        "code": "puts (spark_graph (range 1, 5).shuffle)\n",
        "comments": "#=> ▃█▅▁\n"
      }
    ]
  },
  "spread": {
    "summary": "Euclidean distribution for beats",
    "doc": "Creates a new ring of boolean values which space a given number of accents as evenly as possible throughout a bar. This is an implementation of the process described in 'The Euclidean Algorithm Generates Traditional Musical Rhythms' (Toussaint 2005).",
    "introduced": "v2.4",
    "args": {
      "required": {
        "num_accents": {
          "type": "number"
        },
        "size": {
          "type": "number"
        }
      },
      "optional": {
        "rotate": {
          "desc": "rotate to the next strong beat allowing for easy permutations of the original rhythmic grouping (see example)"
        }
      }
    },
    "examples": [
      {
        "code": "(spread 3, 8)   \n",
        "comments": "#=> (ring true, false, false, true, false, false, true, false) a spacing of 332\n"
      },
      {
        "code": "(spread 3, 8, rotate: 1)\n",
        "comments": "#=> (ring true, false, false, true, false, true, false, false) a spacing of 323\n"
      },
      {
        "code": "\n  live_loop :euclid_beat do\n    sample :elec_bong, amp: 1.5 if (spread 3, 8).tick\n    sample :perc_snap, amp: 0.8 if (spread 7, 11).look\n    sample :bd_haus, amp: 2 if (spread 1, 4).look\n    sleep 0.125\n  end",
        "comments": "# Easily create interesting polyrhythmic beats\n \n# Spread 3 bongs over 8\n# Spread 7 snaps over 11\n# Spread 1 bd over 4\n \n \n"
      },
      {
        "code": "\n \n  (spread 2, 5) \n\n  (spread 3, 4) \n                \n\n  (spread 3, 5) \n                \n                \n\n  (spread 3, 7) \n\n  (spread 3, 8) \n\n  (spread 4, 7) \n\n  (spread 4, 9) \n\n  (spread 4, 11)\n\n  (spread 5, 6) \n                \n\n  (spread 5, 7) \n\n  (spread 5, 8) \n\n  (spread 5, 9) \n\n  (spread 5, 11)\n                \n\n  (spread 5, 12)\n                \n\n  (spread 5, 16)\n\n  (spread 7, 8) \n\n  (spread 7, 12)\n\n  (spread 7, 16)\n\n  (spread 9, 16)\n\n  (spread 11, 24)\n\n  (spread 13, 24)\n                 \n",
        "comments": "# Spread descriptions from\n# 'The Euclidean Algorithm Generates Traditional Musical Rhythms' (Toussaint 2005).\n# A thirteenth century Persian rhythm called Khafif-e-ramal.\n \n# The archetypal pattern of the Cumbria from Columbia, as well\n# as a Calypso rhythm from Trinidad\n \n# When started on the second onset, is another thirteenth\n# century Persian rhythm by the name of Khafif-e-ramal, as well\n# as a Romanian folk-dance rhythm.\n \n# A ruchenitza rhythm used in a Bulgarian folk-dance.\n \n# The Cuban tresillo pattern\n \n# Another Ruchenitza Bulgarian folk-dance rhythm\n \n# The Aksak rhythm of Turkey.\n \n# The metric pattern used by Frank Zappa in his piece Outside Now\n \n# Yields the York-Samai pattern, a popular Arab rhythm, when\n# started on the second onset.\n \n# The Nawakhat pattern, another popular Arab rhythm.\n \n# The Cuban cinquillo pattern.\n \n# A popular Arab rhythm called Agsag-Samai.\n \n# The metric pattern used by Moussorgsky in Pictures at an\n# Exhibition\n \n# The Venda clapping pattern of a South African children's\n# song.\n \n# The Bossa-Nova rhythm necklace of Brazil.\n \n# A typical rhythm played on the Bendir (frame drum)\n \n# A common West African bell pattern.\n \n# A Samba rhythm necklace from Brazil.\n \n# A rhythm necklace used in the Central African Republic.\n \n# A rhythm necklace of the Aka Pygmies of Central Africa.\n \n# Another rhythm necklace of the Aka Pygmies of the upper\n# Sangha.\n"
      }
    ]
  },
  "status": {
    "summary": "Get server status",
    "doc": "This returns a Hash of information about the synthesis environment. Mostly used for debugging purposes.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts status\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n",
        "comments": "# Returns something similar to:\n# {\n#   :ugens=>10,\n#   :synths=>1,\n#   :groups=>7,\n#   :sdefs=>61,\n#   :avg_cpu=>0.20156468451023102,\n#   :peak_cpu=>0.36655542254447937,\n#   :nom_samp_rate=>44100.0,\n#   :act_samp_rate=>44099.9998411752,\n#   :audio_busses=>2,\n#   :control_busses=>0\n# }\n"
      }
    ]
  },
  "stop": {
    "summary": "Stop current thread or run",
    "doc": "Stops the current thread or if not in a thread, stops the current run. Does not stop any running synths triggered previously in the run/thread or kill any existing sub-threads.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen\n  sleep 0.5\n  stop               \n  sample :loop_garzul\n",
        "comments": "#=> this sample is played until completion\n \n#=> signal to stop executing this run\n#=> this never executes\n"
      },
      {
        "code": "in_thread do\n    play 60     \n    stop\n    sleep 0.5   \n    play 72     \n  end\n\n  play 80 \n",
        "comments": " \n#=> this note plays\n \n#=> this sleep never happens\n#=> this play never happens\n \n \n#=> this plays as the stop only affected the above thread\n"
      },
      {
        "code": "\n  live_loop :foo\n    sample :bd_haus\n    sleep 1\n    stop              \n  end\n\n  live_loop :bar      \n    sample :elec_blip\n    sleep 0.25\n  end",
        "comments": "# Stopping live loops\n \n \n \n# live loop :foo will now stop and no longer loop\n \n \n# live loop :bar will continue looping\n \n \n \n"
      }
    ]
  },
  "stretch": {
    "summary": "Stretch a sequence of values",
    "doc": "Stretches a list of values each value repeated count times. Always returns a ring regardless of the type of the list that is stretched. To preserve type, consider using `.stretch` i.e. `(ramp 1, 2, 3).stretch(2) #=> (ramp 1, 1, 2, 2, 3, 3)`",
    "introduced": "v2.6",
    "args": {
      "required": {
        "list": {
          "type": "anything"
        },
        "count": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(stretch [1,2], 3)   \n",
        "comments": "#=> (ring 1, 1, 1, 2, 2, 2)\n"
      },
      {
        "code": "(stretch [:e2, :c3], 1, [:c2, :d3], 2)\n",
        "comments": "#=> (ring :e2, :c3, :c2, :c2, :d3, :d3)\n"
      }
    ]
  },
  "sync": {
    "summary": "Sync with other threads",
    "doc": "Pause/block the current thread until a `cue` heartbeat with a matching `cue_id` is received. When a matching `cue` message is received, unblock the current thread, and continue execution with the virtual time set to match the thread that sent the `cue` heartbeat. The current thread is therefore synced to the `cue` thread. If multiple cue ids are passed as arguments, it will `sync` on the first matching `cue_id`. The BPM of the cueing thread can optionally be inherited by using the bpm_sync: opt.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "cue_id": {
          "type": "symbol"
        }
      },
      "optional": {
        "bpm_sync": {
          "desc": "Inherit the BPM of the cueing thread. Default is false"
        }
      }
    },
    "examples": [
      {
        "code": "in_thread do\n    sync :foo\n    sample :ambi_lunar_land\n  end\n\n  sleep 5\n\n  cue :foo\n           \n",
        "comments": " \n# this parks the current thread waiting for a foo sync message to be received.\n \n \n \n \n \n# We send a sync message from the main thread.\n# This then unblocks the thread above and we then hear the sample\n"
      },
      {
        "code": "in_thread do  \n    loop do     \n      cue :tick\n      sleep 0.5 \n    end\n  end\n\n \n  loop do                   \n    sync :tick              \n    sample :drum_heavy_kick \n  end",
        "comments": "# Start a metronome thread\n# Loop forever:\n# sending tick heartbeat messages\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome.\n# In the main thread, just loop\n# waiting for :tick sync messages\n# after which play the drum kick sample\n \n"
      },
      {
        "code": "sync :foo, :bar\n",
        "comments": "# Wait for either a :foo or :bar cue\n"
      },
      {
        "code": "in_thread do  \n    loop do     \n      cue [:foo, :bar, :baz].choose\n      sleep 0.5 \n    end\n  end\n\n \n\n  in_thread do\n    loop do                   \n      sync :foo              \n      sample :elec_beep \n    end\n  end\n\n  in_thread do\n    loop do                   \n      sync :bar              \n      sample :elec_flip \n    end\n  end\n\n  in_thread do\n    loop do                   \n      sync :baz              \n      sample :elec_blup \n    end\n  end",
        "comments": "# Start a metronome thread\n# Loop forever:\n# sending one of three tick heartbeat messages randomly\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome:\n \n \n# In the main thread, just loop\n# waiting for :foo sync messages\n# after which play the elec beep sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :bar sync messages\n# after which play the elec flip sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :baz sync messages\n# after which play the elec blup sample\n \n \n"
      }
    ]
  },
  "sync_bpm": {
    "summary": "Sync and inherit BPM from other threads ",
    "doc": "An alias for `sync` with the `bpm_sync:` opt set to true.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "cue_id": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "See examples for sync",
        "comments": " \n"
      }
    ]
  },
  "synth": {
    "summary": "Trigger specific synth",
    "doc": "Trigger specified synth with given opts. Bypasses `current_synth` value, yet still honours `current_synth_defaults`. When using `synth`, the note is no longer an explicit argument but an opt with the key `note:`.\n\nIf note: opt is `nil`, `:r` or `:rest`, play is ignored and treated as a rest. Also, if the `on:` opt is specified and returns `false`, or `nil` then play is similarly ignored and treated as a rest.\n\nIf the synth name is `nil` behaviour is identical to that of `play` in that the `current_synth` will determine the actual synth triggered.\n\nIf a block is given, it is assumed to take one arg which will be the controllable synth node and the body of the block is run in an implicit `in_thread`. This allows for asynchronous control of the synth without interfering with time. For synchronous control capture the result of `synth` as a variable and use that.\n\nNote that the default opts listed are only a guide to the most common opts across all the synths. Not all synths support all the default opts and each synth typically supports many more opts specific to that synth. For example, the `:tb303` synth supports 45 unique opts. For a full list of a synth's opts see its documentation in the Help system. This can be accessed directly by clicking on the name of the synth and using the shortcut `C-i`",
    "introduced": "v2.0",
    "args": {
      "required": {
        "synth_name": {
          "type": "symbol"
        }
      },
      "optional": {
        "amp": {
          "desc": "The amplitude of the note"
        },
        "amp_slide": {
          "desc": "The duration in beats for amplitude changes to take place"
        },
        "pan": {
          "desc": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25"
        },
        "pan_slide": {
          "desc": "The duration in beats for the pan value to change"
        },
        "attack": {
          "desc": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently."
        },
        "decay": {
          "desc": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level)."
        },
        "sustain": {
          "desc": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release."
        },
        "release": {
          "desc": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently."
        },
        "attack_level": {
          "desc": "Amplitude level reached after attack phase and immediately before decay phase"
        },
        "decay_level": {
          "desc": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set"
        },
        "sustain_level": {
          "desc": "Amplitude level reached after decay phase and immediately before release phase."
        },
        "env_curve": {
          "desc": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed"
        },
        "slide": {
          "desc": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value"
        },
        "pitch": {
          "desc": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning."
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
        }
      }
    },
    "examples": [
      {
        "code": "use_synth :beep           \nplay 60                   \n\nsynth :dsaw, note: 60   \n                        \n",
        "comments": "# Set current synth to :beep\n# Play note 60 with opt defaults\n \n# Bypass current synth and play :dsaw\n# with note 60 and opt defaults\n"
      },
      {
        "code": "synth :fm, note: 60, amp: 0.5\n",
        "comments": "# Play note 60 of the :fm synth with an amplitude of 0.5\n"
      },
      {
        "code": "use_synth_defaults release: 5\nsynth :dsaw, note: 50\n",
        "comments": " \n# Play note 50 of the :dsaw synth with a release of 5\n"
      },
      {
        "code": "\nsynth :dsaw, notes: (chord :e3, :minor)",
        "comments": "# You can play chords with the notes: opt:\n \n"
      },
      {
        "code": "\nnotes = (scale :e3, :minor_pentatonic, num_octaves: 2)\n\nlive_loop :rhyth do\n  8.times do\n    trig = (spread 3, 7).tick(:rhyth)\n    synth :tri, on: trig, note: notes.tick, release: 0.1 \n                                                         \n                                                         \n    sleep 0.125\n  end\nend\n\n\nlive_loop :rhyth2 do\n  8.times do\n    trig = (spread 3, 7).tick(:rhyth)\n    synth :saw, note: notes.tick, release: 0.1 if trig \n                                                       \n                                                       \n    sleep 0.125\n  end\nend",
        "comments": "# on: vs if\n \n \n \n \n \n# Here, we're calling notes.tick\n# every time we attempt to play the synth\n# so the notes rise faster than rhyth2\n \n \n \n \n \n \n \n \n# Here, we're calling notes.tick\n# only when the spread says to play\n# so the notes rise slower than rhyth\n \n \n \n"
      },
      {
        "code": "\ns = synth :beep, note: :e3, release: 4\nsleep 1\ncontrol s, note: :e5\nsleep 0.5\nsynth :dsaw, note: :e3  \n",
        "comments": "# controlling a synth synchronously\n \n \n \n \n# This is triggered after 1.5s from start\n"
      },
      {
        "code": "\nsynth :beep, note: :e3, release: 4 do |s|\n  sleep 1                                              \n  control s, note: :e5                                 \nend\n\nsleep 0.5\nsynth :dsaw, note: :e3\n",
        "comments": "# Controlling a synth asynchronously\n \n# This block is run in an implicit in_thread\n# and therefore is asynchronous\n \n \n \n# This is triggered after 0.5s from start\n"
      }
    ]
  },
  "synth_names": {
    "summary": "Get all synth names",
    "doc": "Return a list of all the synths available",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "tick": {
    "summary": "Increment a tick and return value",
    "doc": "Increment the default tick by 1 and return value. Successive calls to `tick` will continue to increment the default tick. If a `key` is specified, increment that specific tick. If an increment `value` is specified, increment key by that value rather than 1. Ticks are `in_thread` and `live_loop` local, so incrementing a tick only affects the current thread's version of that tick. See `tick_reset` and `tick_set` for directly manipulating the tick vals.",
    "introduced": "v2.6",
    "args": {
      "required": {
        "key": {
          "type": "symbol"
        }
      },
      "optional": {
        "step": {
          "desc": "The amount to tick up by. Default is 1."
        },
        "offset": {
          "desc": "Offset to add to index returned. Useful when calling tick on lists, rings and vectors to offset the returned value. Default is 0."
        }
      }
    },
    "examples": [
      {
        "code": "puts tick\n  puts tick\n  puts tick\n  puts tick\n",
        "comments": "#=> 0\n#=> 1\n#=> 2\n#=> 3\n"
      },
      {
        "code": "puts tick(:foo)\n  puts tick(:foo)\n  puts tick(:foo)\n  puts tick(:bar)\n",
        "comments": "#=> 0 # named ticks have their own counts\n#=> 1\n#=> 2\n#=> 0 # tick :bar is independent of tick :foo\n"
      },
      {
        "code": "\n \n\n  puts tick            \n  puts tick            \n  puts tick            \n  puts tick(step: 2)   \n  puts tick(step: 2)   \n  puts tick(step: 10)  \n  puts tick            \n",
        "comments": "# You can tick by more than increments of 1\n# using the step: opt\n \n#=> 0\n#=> 1\n#=> 2\n#=> 4\n#=> 6\n#=> 16\n#=> 17\n"
      },
      {
        "code": "\n  live_loop :fast_tick do\n    puts tick  \n    sleep 2    \n  end\n\n  live_loop :slow_tick do\n    puts tick  \n    sleep 4    \n               \n               \n  end",
        "comments": "# Each_live loop has its own separate ticks\n \n# the fast_tick live_loop's tick will\n# be updated every 2 seconds\n \n \n \n# the slow_tick live_loop's tick is\n# totally independent from the fast_tick\n# live loop and will be updated every 4\n# seconds\n \n"
      },
      {
        "code": "live_loop :regular_tick do\n    puts tick  \n    sleep 1    \n  end\n\n  live_loop :random_reset_tick do\n    if one_in 3\n      tick_reset\n      puts \"reset tick!\"\n    end\n    puts tick  \n    sleep 1    \n               \n  end",
        "comments": " \n# the regular_tick live_loop's tick will\n# be updated every second\n \n \n \n# randomly reset tick\n \n \n \n# this live_loop's tick is totally\n# independent and the reset only affects\n# this tick.\n \n"
      },
      {
        "code": "\n \n  live_loop :scale do\n    play [:c, :d, :e, :f, :g].tick  \n    sleep 1\n  end",
        "comments": "# Ticks work directly on lists, and will tick through each element\n# However, once they get to the end, they'll return nil\n \n# play all notes just once, then rests\n \n \n"
      },
      {
        "code": "\n  live_loop :odd_scale do\n    tick \n    play [:c, :d, :e, :f, :g, :a].tick  \n                                        \n    sleep 1\n  end",
        "comments": "# Normal ticks interact directly with list ticks\n \n# Increment the default tick\n# this now play every *other* note just once,\n# then rests\n \n \n"
      },
      {
        "code": "\n \n \n \n  live_loop :looped_scale do\n    play (ring :c, :d, :e, :f, :g).tick  \n    sleep 1\n  end",
        "comments": "# Ticks work wonderfully with rings\n# as the ring ensures the tick wraps\n# round internally always returning a\n# value\n \n# play all notes just once, then repeats\n \n \n"
      },
      {
        "code": "\n \n  live_loop :looped_scale do\n    play (scale :e3, :minor_pentatonic).tick  \n    sleep 0.25\n  end",
        "comments": "# Ticks work wonderfully with scales\n# which are also rings\n \n# play all notes just once, then repeats\n \n \n"
      }
    ]
  },
  "tick_reset": {
    "summary": "Reset tick to 0",
    "doc": "Reset default tick to 0. If a `key` is referenced, set that tick to 0 instead. Same as calling tick_set(0)",
    "introduced": "v2.6",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  tick\n  tick\n  tick\n  puts look\n  tick_set 0\n  puts look\n",
        "comments": "# increment default tick a few times\n \n \n \n#=> 2 (default tick is now 2)\n# default tick is now 0\n#=> 0 (default tick is now 0\n"
      },
      {
        "code": "\n  tick :foo\n  tick :foo\n  tick :foo\n  puts look(:foo)\n  tick_set 0\n  puts look(:foo)\n  tick_set :foo, 0\n  puts look(:foo)\n",
        "comments": "# increment tick :foo a few times\n \n \n \n#=> 2 (tick :foo is now 2)\n# default tick is now 0\n#=> 2 (tick :foo is still 2)\n#  reset tick :foo\n#=> 0 (tick :foo is now 0)\n"
      }
    ]
  },
  "tick_reset_all": {
    "summary": "Reset all ticks",
    "doc": "Reset all ticks - default and keyed",
    "introduced": "v2.6",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "tick     \n  tick\n  tick :foo\n  tick :foo\n  tick :foo\n  puts look\n  puts look(:foo)\n  tick_reset_all\n  puts look\n  puts look(:foo)\n",
        "comments": "# increment default tick and tick :foo\n \n \n \n \n#=> 1\n#=> 2\n \n#=> 0\n#=> 0\n"
      }
    ]
  },
  "tick_set": {
    "summary": "Set tick to a specific value",
    "doc": "Set the default tick to the specified `value`. If a `key` is referenced, set that tick to `value` instead. Next call to `look` will return `value`.",
    "introduced": "v2.6",
    "args": {
      "required": {
        "value": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "tick_set 40\n  puts look  \n",
        "comments": "# set default tick to 40\n#=> 40\n"
      },
      {
        "code": "tick_set :foo, 40\n  puts look(:foo)  \n  puts look        \n",
        "comments": "# set tick :foo to 40\n#=> 40 (tick :foo is now 40)\n#=> 0 (default tick is unaffected)\n"
      }
    ]
  },
  "time_warp": {
    "summary": "Shift time forwards or backwards for the given block",
    "doc": "The code within the given block is executed with the specified delta time shift specified in beats. For example, if the delta value is 0.1 then all code within the block is executed with a 0.1 beat delay. Negative values are allowed which means you can move a block of code *backwards in time*. For example a delta value of -0.1 will execute the code in the block 0.1 beats ahead of time. The time before the block started is restored after the execution of the block.\n\nGiven a list of times, run the block once after waiting each given time. If passed an optional params list, will pass each param individually to each block call. If size of params list is smaller than the times list, the param values will act as rings (rotate through). If the block is given 1 arg, the times are fed through. If the block is given 2 args, both the times and the params are fed through. A third block arg will receive the index of the time.\n\nNote that the code within the block is executed synchronously with the code before and after, so all thread locals will be modified inline - as is the case for `with_fx`. However, as time is always restored to the value before `time_warp` started, you can use it to schedule events for the future in a similar fashion to a thread (via `at` or `in_thread`) without having to use an entirely fresh and distinct set of thread locals - see examples.\n\nAlso, note that you cannot travel backwards in time beyond the `current_sched_ahead_time`.\n\nIf the `time_warp` block is within a `density` block, the delta time is not affected (although all the other times such as sleep and phase durations will be affected) - see example.\n\n`time_warp` is ahead-of-time scheduling within the current thread. See `at` for just-in-time scheduling using multiple isolated threads.",
    "introduced": "v2.11",
    "args": {
      "required": {
        "delta_time": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nplay 70           \nsleep 1\nplay 75           \n\ntime_warp 0.1 do\n                  \n  play 80         \n  sleep 0.5\n  play 80         \n\nend               \n\n                  \n                  \n                  \n\nplay 70           \n",
        "comments": "# shift forwards in time\n#=> plays at time 0\n \n#=> plays at time 1\n \n \n# time shifts forward by 0.1 beats\n#=> plays at 1.1\n \n#=> plays at 1.6\n \n# time shifts back by 0.6 beats\n \n# we now honour the original sleep 1 and the\n# sleep 0.5 within the time_warp block is\n# ignored including the 0.1 shift offset\n \n#=> plays at 1\n"
      },
      {
        "code": "\n\nplay 70           \nsleep 1\nplay 75           \n\ntime_warp -0.1 do\n                  \n  play 80         \n  sleep 0.5\n  play 80         \n                  \nend\n                  \n                  \n                  \nplay 70           \n",
        "comments": "# shift backwards in time\n \n#=> plays at time 0\n \n#=> plays at time 1\n \n \n# time shifts backwards by 0.1 beats\n#=> plays at 0.9\n \n#=> plays at 1.4\n# time shifts forward by 0.1 beats\n \n# we now honour the original sleep 1 and the\n# sleep 0.5 within the time_warp block is\n# ignored, including the -0.1 offset\n#=> plays at 1\n"
      },
      {
        "code": "\n\nputs tick         \n\nsleep 1\n\ntime_warp 2 do\n  puts tick       \nend\n\nsleep 0.5\n\nputs tick         \n",
        "comments": "# Ticks count linearly through time_warp\n \n#=> prints 0 (at time 0)\n \n \n \n \n#=> prints 1 (at time 3)\n \n \n \n \n#=> prints 2 (at time 1.5)\n"
      },
      {
        "code": "\n\nputs tick         \nsleep 0.5\nputs tick         \n\ntime_warp 2 do\n  puts tick       \n  sleep 0.5\n  puts tick       \nend\n\nat 3 do           \n  puts tick       \n  sleep 0.5\n  puts tick       \nend\n\nsleep 0.5\n\nputs tick         \n",
        "comments": "# Comparing time_warp with at\n \n#=> prints 0 (at time 0)\n \n#=> prints 1 (at time 0.5)\n \n \n#=> prints 2 (at time 2.5)\n \n#=> prints 3 (at time 3)\n \n \n# the at will reset all thread locals\n#=> prints 0 (At time 3.5)\n \n#=> prints 1 (At time 4)\n \n \n \n \n#=> prints 4 (at time 1)\n"
      },
      {
        "code": "\ndensity 2 do                       \n                                   \n  time_warp 0.5 do                 \n    with_fx :slicer, phase: 0.5 do \n      play 60\n      sleep 1                      \n    end\n  end\n\nend",
        "comments": "# Time Warp within Density\n# Typically this will double the BPM and affect all times\n# in addition to looping the internal block twice\n# However, this time is *not* affected and will remain 0.5\n# This phase duration *is* affected and will be 0.25\n \n# This time *will* be affected by the density and be 0.5\n \n \n \n \n"
      },
      {
        "code": "\n\ntime_warp [0, 1, 2, 3] do\n  puts \"hello\"               \nend\n                               \n                               \n                               \n                               \n                               \n                               \n                               \n",
        "comments": "# Time Warp with lists of times\n \n \n# Will print \"hello\" at 0, 1, 2, and 3 seconds\n \n# Notice that the run completes before all the\n# messages have been delivered. This is because it\n# schedules all the messages at once so the program\n# can complete immediately. This is unlike at which\n# would appear to behave similarly, but would wait\n# for all messages to be delivered (on time) before\n# allowing the program to complete.\n"
      },
      {
        "code": "time_warp [1, 2, 4] do \n    play 75               \n  end                     \n",
        "comments": "# plays a note after waiting 1 beat,\n# then after 1 more beat,\n# then after 2 more beats (4 beats total)\n"
      },
      {
        "code": "time_warp [1, 2, 3], [75, 76, 77] do |n| \n    play n\n  end",
        "comments": "# plays 3 different notes\n \n \n"
      },
      {
        "code": "time_warp [1, 2, 3],\n      [{:amp=>0.5}, {:amp=> 0.8}] do |p|\n    sample :drum_cymbal_open, p         \n  end",
        "comments": " \n# alternate soft and loud\n# cymbal hits three times\n \n"
      },
      {
        "code": "time_warp [0, 1, 2] do |t|\n    puts t\n  end",
        "comments": "# when no params are given to at, the times are fed through to the block\n#=> prints 0, 1, then 2\n \n"
      },
      {
        "code": "time_warp [0, 1, 2], [:a, :b] do |t, b| \n    puts [t, b]\n  end",
        "comments": "# If you specify the block with 2 args, it will pass through both the time and the param\n#=> prints out [0, :a], [1, :b], then [2, :a]\n \n"
      },
      {
        "code": "time_warp [0, 0.5, 2] do |t, idx| \n    puts [t, idx]\n  end",
        "comments": "# If you specify the block with 2 args, and no param list to at, it will pass through both the time and the index\n#=> prints out [0, 0], [0.5, 1], then [2, 2]\n \n"
      },
      {
        "code": "time_warp [0, 0.5, 2], [:a, :b] do |t, b, idx| \n    puts [t, b, idx]\n  end",
        "comments": "# If you specify the block with 3 args, it will pass through the time, the param and the index\n#=> prints out [0, :a, 0], [0.5, :b, 1], then [2, :a, 2]\n \n"
      },
      {
        "code": "\nputs \"main: \", rand \nrand_back\ntime_warp 1 do        \n                      \n  puts \"time_warp:\", rand\n  puts \"time_warp:\", rand\n  rand_back          \nend\n\nsleep 2\nputs \"main: \", rand\n",
        "comments": "# time_warp consumes & interferes with the outer random stream\n# 0.75006103515625\n \n# the random stream inside the at block is the\n# same as the one in the outer block\n# 0.75006103515625\n# 0.733917236328125\n# undo last call to rand\n \n \n \n# value is now 0.733917236328125 again\n"
      },
      {
        "code": "\n           \n           \ntime_warp [0, 2] do\n           \n  puts tick\n  puts tick\nend\n           \n           \n           \n",
        "comments": "# Each block run inherits the same thread locals from the previous one.\n# This means things like the thread local counters can flow through\n# time warp iterations:\n \n# first time round (after 1 beat) prints:\n# 0\n# 1\n \n# second time round (after 2 beats) prints:\n# 2\n# 3\n"
      }
    ]
  },
  "uncomment": {
    "summary": "Block level comment ignoring",
    "doc": "Evaluates all of the code within the block. Use to reverse the effect of the comment without having to explicitly remove it.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "uncomment do\n    play 50\n    sleep 1\n    play 62\n  end",
        "comments": "# starting a block level comment:\n# played\n# sleep happens\n# played\n \n"
      }
    ]
  },
  "use_arg_bpm_scaling": {
    "summary": "Enable and disable BPM scaling",
    "doc": "Turn synth argument bpm scaling on or off for the current thread. This is on by default. Note, using `rt` for args will result in incorrect times when used after turning arg bpm scaling off.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "bool": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 120\nplay 50, release: 2\nsleep 2            \nuse_arg_bpm_scaling false\nplay 50, release: 2\nsleep 2            \n",
        "comments": " \n# release is actually 1 due to bpm scaling\n# actually sleeps for 1 second\n \n# release is now 2\n# still sleeps for 1 second\n"
      },
      {
        "code": "\nuse_bpm 120\nplay 50, release: rt(2)\nsleep rt(2)            \nuse_arg_bpm_scaling false\nplay 50, release: rt(2)\nsleep rt(2)            \n",
        "comments": "# Interaction with rt\n \n# release is 2 seconds\n# sleeps for 2 seconds\n \n# ** Warning: release is NOT 2 seconds! **\n# still sleeps for 2 seconds\n"
      }
    ]
  },
  "use_arg_checks": {
    "summary": "Enable and disable arg checks",
    "doc": "When triggering synths, each argument is checked to see if it is sensible. When argument checking is enabled and an argument isn't sensible, you'll see an error in the debug pane. This setting allows you to explicitly enable and disable the checking mechanism. See with_arg_checks for enabling/disabling argument checking only for a specific `do`/`end` block.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50, release: 5\nuse_arg_checks false\nplay 50, release: 5\n",
        "comments": "# Args are checked\n \n# Args are not checked\n"
      }
    ]
  },
  "use_bpm": {
    "summary": "Set the tempo",
    "doc": "Sets the tempo in bpm (beats per minute) for everything afterwards. Affects all subsequent calls to `sleep` and all temporal synth arguments which will be scaled to match the new bpm. If you wish to bypass scaling in calls to sleep, see the fn `rt`. Also, if you wish to bypass time scaling in synth args see `use_arg_bpm_scaling`. See also `with_bpm` for a block scoped version of `use_bpm`.\n\n  For dance music here's a rough guide for which BPM to aim for depending on your genre:\n\n  * Dub: 60-90 bpm\n  * Hip-hop: 60-100 bpm\n  * Downtempo: 90-120 bpm\n  * House: 115-130 bpm\n  * Techno/trance: 120-140 bpm\n  * Dubstep: 135-145 bpm\n  * Drum and bass: 160-180 bpm",
    "introduced": "v2.0",
    "args": {
      "required": {
        "bpm": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  4.times do\n    play 50, attack: 0.5, release: 0.25\n    sleep 1\n  end\n\n  sleep 2 \n\n \n  use_bpm 120 \n  4.times do\n    play 62, attack: 0.5, release: 0.25\n    sleep 1\n  end\n\n  sleep 2\n\n \n  use_bpm 240 \n  8.times do\n    play 62, attack: 0.5, release: 0.25\n    sleep 1\n  end",
        "comments": "# default tempo is 60 bpm\n \n# attack is 0.5s and release is 0.25s\n# sleep for 1 second\n \n \n# sleep for 2 seconds\n \n# Let's make it go faster...\n# double the bpm\n \n# attack is scaled to 0.25s and release is now 0.125s\n# actually sleeps for 0.5 seconds\n \n \n# sleep for 1 second\n \n# Let's make it go even faster...\n#  bpm is 4x original speed!\n \n# attack is scaled to 0.125s and release is now 0.0625s\n# actually sleeps for 0.25 seconds\n \n"
      }
    ]
  },
  "use_bpm_mul": {
    "summary": "Set new tempo as a multiple of current tempo",
    "doc": "Sets the tempo in bpm (beats per minute) as a multiplication of the current tempo. Affects all containing calls to `sleep` and all temporal synth arguments which will be scaled to match the new bpm. See also `use_bpm`",
    "introduced": "v2.3",
    "args": {
      "required": {
        "mul": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 60  \n  play 50\n  sleep 1     \n  play 62\n  sleep 2     \n  use_bpm_mul 0.5\n  play 50\n  sleep 1          \n  play 62",
        "comments": "# Set the BPM to 60\n \n# Sleeps for 1 seconds\n \n# Sleeps for 2 seconds\n# BPM is now (60 * 0.5) == 30\n \n# Sleeps for 2 seconds\n \n"
      }
    ]
  },
  "use_cent_tuning": {
    "summary": "Cent tuning",
    "doc": "Uniformly tunes your music by shifting all notes played by the specified number of cents. To shift up by a cent use a cent tuning of 1. To shift down use negative numbers. One semitone consists of 100 cents.\n\nSee `with_cent_tuning` for setting the cent tuning value only for a specific `do`/`end` block. To transpose entire semitones see `use_transpose`.",
    "introduced": "v2.9",
    "args": {
      "required": {
        "cent_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nuse_cent_tuning 1\nplay 50\n",
        "comments": "# Plays note 50\n \n# Plays note 50.01\n"
      }
    ]
  },
  "use_cue_logging": {
    "summary": "Enable and disable cue logging",
    "doc": "Enable or disable log messages created on cues. This does not disable the cues themselves, it just stops them from being printed to the log",
    "introduced": "v2.6",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_cue_logging true\n",
        "comments": "# Turn on cue messages\n"
      },
      {
        "code": "use_cue_logging false\n",
        "comments": "# Disable cue messages\n"
      }
    ]
  },
  "use_debug": {
    "summary": "Enable and disable debug",
    "doc": "Enable or disable messages created on synth triggers. If this is set to false, the synths will be silent until debug is turned back on. Silencing debug messages can reduce output noise and also increase performance on slower platforms. See `with_debug` for setting the debug value only for a specific `do`/`end` block.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_debug true\n",
        "comments": "# Turn on debug messages\n"
      },
      {
        "code": "use_debug false\n",
        "comments": "# Disable debug messages\n"
      }
    ]
  },
  "use_merged_midi_defaults": {
    "summary": "Merge MIDI defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `midi_*` fns. Merges the specified values with any previous defaults, rather than replacing them",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "MIDI channel(s) to send event on"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "velocity": {
          "desc": "Note velocity as a MIDI number."
        },
        "vel_f": {
          "desc": "Velocity as a value between 0 and 1 (will be converted to a MIDI velocity between 0 and 127)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi note on message from being sent out. (Ensures all opts are evaluated in this call to `midi_note_on` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_note_on :e1\n\nuse_midi_defaults channel: 3, port: \"foo\"\n\nmidi_note_on :e3\n\nuse_merged_midi_defaults channel: 1\n\nmidi_note_on :e2\n                \n                \n",
        "comments": "# Sends MIDI :e1 note_on with default opts\n \n \n \n# Sends MIDI :e3 note_on to channel 3 on port \"foo\"\n \n \n \n# Sends MIDI :e2 note_on to channel 1 on port \"foo\".\n# This is because the call to use_merged_midi_defaults overrode the\n# channel but not the port which got merged in.\n"
      }
    ]
  },
  "use_merged_sample_defaults": {
    "summary": "Merge new sample defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `sample`. Merges the specified values with any previous defaults, rather than replacing them.",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen\n\nuse_merged_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nuse_merged_sample_defaults cutoff: 90\n\nsample :loop_amen \n",
        "comments": "# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n \n# plays amen break with a cutoff of 90 and and an amp of 0.5 with defaults for rest of args\n"
      }
    ]
  },
  "use_merged_synth_defaults": {
    "summary": "Merge synth defaults",
    "doc": "Specify synth arg values to be used by any following call to play. Merges the specified values with any previous defaults, rather than replacing them.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\n\nuse_merged_synth_defaults amp: 0.5\nplay 50\n\nuse_merged_synth_defaults cutoff: 80\nplay 50\n\nuse_merged_synth_defaults amp: 0.7\nplay 50\n",
        "comments": "#=> Plays note 50\n \n \n#=> Plays note 50 with amp 0.5\n \n \n#=> Plays note 50 with amp 0.5 and cutoff 80\n \n \n#=> Plays note 50 with amp 0.7 and cutoff 80\n"
      },
      {
        "code": "use_synth_defaults amp: 0.5, cutoff: 80, pan: -1\nuse_merged_synth_defaults amp: 0.7\nplay 50\n",
        "comments": " \n \n#=> Plays note 50 with amp 0.7, cutoff 80 and pan -1\n"
      }
    ]
  },
  "use_midi_defaults": {
    "summary": "Use new MIDI defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `midi_*` fns. Will remove and override any previous defaults.",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "MIDI channel(s) to send event on"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "velocity": {
          "desc": "Note velocity as a MIDI number."
        },
        "vel_f": {
          "desc": "Velocity as a value between 0 and 1 (will be converted to a MIDI velocity between 0 and 127)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi note on message from being sent out. (Ensures all opts are evaluated in this call to `midi_note_on` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_note_on :e1\n\nuse_midi_defaults channel: 3, port: \"foo\"\n\nmidi_note_on :e3\n\nuse_midi_defaults channel: 1\n\nmidi_note_on :e2\n",
        "comments": "# Sends MIDI :e1 note_on with default opts\n \n \n \n# Sends MIDI :e3 note_on to channel 3 on port \"foo\"\n \n \n \n# Sends MIDI :e2 note_on to channel 1. Note that the port is back to the default and no longer \"foo\".\n"
      }
    ]
  },
  "use_midi_logging": {
    "summary": "Enable and disable MIDI logging",
    "doc": "Enable or disable log messages created on MIDI functions. This does not disable the MIDI functions themselves, it just stops them from being printed to the log",
    "introduced": "v3.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_midi_logging true\n",
        "comments": "# Turn on MIDI logging\n"
      },
      {
        "code": "use_midi_logging false\n",
        "comments": "# Disable MIDI logging\n"
      }
    ]
  },
  "use_octave": {
    "summary": "Note octave transposition",
    "doc": "Transposes your music by shifting all notes played by the specified number of octaves. To shift up by an octave use a transpose of 1. To shift down use negative numbers. See `with_octave` for setting the octave shift only for a specific `do`/`end` block. For transposing the notes within the octave range see `use_transpose`.",
    "introduced": "v2.9",
    "args": {
      "required": {
        "octave_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nuse_octave 1\nplay 50\n",
        "comments": "# Plays note 50\n \n# Plays note 62\n"
      },
      {
        "code": "\nplay 62\nuse_octave -1\nplay 62\nuse_octave 2\nplay 62\n",
        "comments": "# You may change the transposition multiple times:\n# Plays note 62\n \n# Plays note 50\n \n# Plays note 86\n"
      }
    ]
  },
  "use_osc": {
    "summary": "Set the default hostname and port number for outgoing OSC messages.",
    "doc": "Sets the destination host and port that `osc` will send messages to. If no port number is specified - will default to port 4560 (Sonic Pi's default OSC listening port).\n\nOSC (Open Sound Control) is a simple way of passing messages between two separate programs on the same computer or even on different computers via a local network or even the internet. `use_osc` allows you to specify which computer (`hostname`) and program (`port`) to send messages to.\n\nIt is possible to send messages to the same computer by using the host name `\"localhost\"`\n\nThis is a thread-local setting - therefore each thread (or live loop) can have their own separate `use_osc` values.\n\nNote that calls to `osc_send` will ignore these values.\n\n",
    "introduced": "v3.0",
    "args": {
      "required": {
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\nuse_osc \"localhost\", 7000 \nosc \"/foo/bar\"            \n                            \n",
        "comments": "# Send a simple OSC message to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path \"/foo/bar\"\n# and no arguments\n"
      },
      {
        "code": "\n\nuse_osc \"localhost\", 7000       \nosc \"/foo/bar\" 1, 3.89, \"baz\" \n                                  \n                                  \n                                  \n                                  \n",
        "comments": "# Send an OSC messages with arguments to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path \"/foo/bar\"\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3,89\n# 3) The string \"baz\"\n"
      },
      {
        "code": "\n\nuse_osc \"10.0.1.5\", 7000        \nosc \"/foo/bar\" 1, 3.89, \"baz\" \n                                  \n                                  \n                                  \n                                  \n",
        "comments": "# Send an OSC messages with arguments to another program on a different machine\n \n# Specify port 7000 on the machine with address 10.0.1.5\n# Send an OSC message with path \"/foo/bar\"\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3,89\n# 3) The string \"baz\"\n"
      },
      {
        "code": "\n\nuse_osc \"localhost\", 7000 \nosc \"/foo/bar\"            \nosc \"/foo/baz\"            \n\nuse_osc \"localhost\", 7005 \nosc \"/foo/bar\"            \nosc \"/foo/baz\"            \n",
        "comments": "# use_osc only affects calls to osc until the next call to use_osc\n \n# Specify port 7000 on this machine\n# Send an OSC message to port 7000\n# Send another OSC message to port 7000\n \n# Specify port 7000 on this machine\n# Send an OSC message to port 7005\n# Send another OSC message to port 7005\n"
      },
      {
        "code": "\n\nuse_osc \"localhost\", 7000 \n\nlive_loop :foo do\n  osc \"/foo/bar\"            \n  sleep 1                     \nend\n\nlive_loop :bar do\n  use_osc \"localhost\", 7005 \n                              \n                              \n\n  osc \"/foo/bar\"            \n  sleep 1\nend\n\nuse_osc \"localhost\", 7010 \nosc \"/foo/baz\"            \n                            \n                            \n                            \n",
        "comments": "# threads may have their own use_osc value\n \n# Specify port 7000 on this machine\n \n \n# Thread inherits outside use_osc values\n# and therefore sends OSC messages to port 7000\n \n \n \n# Override OSC hostname and port for just this\n# thread (live loop :bar). Live loop :foo is\n# unaffected.\n \n# Send OSC messages to port 7005\n \n \n \n# Specify port 7010\n# Send another OSC message to port 7010\n# Note that neither live loops :foo or :bar\n# are affected (their use_osc values are\n# independent and isolated.\n"
      }
    ]
  },
  "use_osc_logging": {
    "summary": "Enable and disable OSC logging",
    "doc": "Enable or disable log messages created on OSC functions. This does not disable the OSC functions themselves, it just stops them from being printed to the log",
    "introduced": "v3.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_osc_logging true\n",
        "comments": "# Turn on OSC logging\n"
      },
      {
        "code": "use_osc_logging false\n",
        "comments": "# Disable OSC logging\n"
      }
    ]
  },
  "use_random_seed": {
    "summary": "Set random seed generator to known seed",
    "doc": "Resets the random number generator to the specified seed. All subsequently generated random numbers and randomisation functions such as `shuffle` and `choose` will use this new generator and the current generator is discarded. Use this to change the sequence of random numbers in your piece in a way that can be reproduced. Especially useful if combined with iteration. See examples.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "seed": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n\n  use_random_seed 1\n  puts rand\n  use_random_seed 1\n  puts rand \n",
        "comments": "# Basic usage\n \n# reset random seed to 1\n# => 0.417022004702574\n# reset random seed back to 1\n#=> 0.417022004702574\n"
      },
      {
        "code": "\n  notes = (scale :eb3, :minor_pentatonic) \n                                          \n\n  with_fx :reverb do\n    live_loop :repeating_melody do        \n\n      use_random_seed 300                 \n                                          \n                                          \n                                          \n                                          \n\n      8.times do                          \n                                          \n                                          \n\n        play notes.choose, release: 0.1   \n                                          \n                                          \n                                          \n        sleep 0.125\n      end\n    end\n  end",
        "comments": "# Generating melodies\n# Create a set of notes to choose from.\n# Scales work well for this\n \n \n# Create a live loop\n \n# Set the random seed to a known value every\n# time around the loop. This seed is the key\n# to our melody. Try changing the number to\n# something else. Different numbers produce\n# different melodies\n \n# Now iterate a number of times. The size of\n# the iteration will be the length of the\n# repeating melody.\n \n# 'Randomly' choose a note from our ring of\n# notes. See how this isn't actually random\n# but uses a reproducible method! These notes\n# are therefore repeated over and over...\n \n \n \n \n"
      }
    ]
  },
  "use_random_source": {
    "summary": "Change how random numbers are chosen",
    "doc": "Sets the random number source to be one of `:white`, `:pink`, `:light_pink`, `:dark_pink` or `:perlin`.\n\n`:white` is totally random - between 0 and 1, you can expect an even spread of values around 0.1, 0.2, 0.3 etc. This means that jumping around within the range (including large jumps) is expected.\n\n`:pink` is more likely to produce values in the middle of the range and less likely to produce values at the extremes. Between 0 and 1 you expect to see a concentration of values around 0.5. This can make random melodies a little bit more smooth.\n\n`:perlin` is a special kind of noise which produces gradients, a bit like a mountain landscape. Large jumps are much less likely and you will tend to see lots of smooth motion going either up or down\n\n`:light_pink` is halfway between white noise and pink noise - more random and jumpy\n\n`:dark_pink` is halfway between pink noise and brown noise - less jumpy with smoother slopes\n\nYou can see the 'buckets' that the numbers between 0 and 1 fall into with the following code:\n\n        rand_type :white\n        puts 10000.times.collect { rand.round(1) }.tally.sort\n        rand_type :pink\n        puts 10000.times.collect { rand.round(1) }.tally.sort\n        rand_type :perlin\n        puts 10000.times.collect { rand.round(1) }.tally.sort\n\n      ",
    "introduced": "v3.3",
    "args": {
      "required": {
        "noise_type": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_random_source :white\n  rand_reset\n  puts rand\n  puts rand\n  puts rand\n  rand_reset\n  use_random_source :pink\n  puts rand\n  puts rand\n  rand_reset\n  use_random_source :perlin\n  puts rand\n  puts rand\n\n  with_random_source :white do\n    puts rand\n  end\n\n  puts rand\n           \n",
        "comments": "# use white noise as the distribution (default)\n# reset random seed\n# => 0.75006103515625\n# => 0.733917236328125\n# => 0.464202880859375\n# reset it again\n# use pink noise as the distribution\n# => 0.47808837890625\n# => 0.56011962890625\n# reset it\n# use perlin noise as the distribution\n# => 0.546478271484375\n# => 0.573150634765625\n \n# use white noise just for this block\n# => 0.464202880859375\n \n \n# => 0.597015380859375\n# notice how the last generator (perlin) is restored\n"
      }
    ]
  },
  "use_real_time": {
    "summary": "Set sched ahead time to 0 for the current thread",
    "doc": "\nSet sched ahead time to 0 for the current thread. Shorthand for `use_sched_ahead_time 0`.\n\nSee `use_sched_ahead_time` for a version of this function which allows you to set the schedule ahead time to any arbitrary value. Note, `use_real_time` will override any value set with `set_sched_ahead_time!` for the current thread.\n\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_real_time 1\n",
        "comments": "# Code will now run approximately 1 second ahead of audio.\n"
      }
    ]
  },
  "use_sample_bpm": {
    "summary": "Sample-duration-based bpm modification",
    "doc": "Modify bpm so that sleeping for 1 will sleep for the duration of the sample.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "string_or_number": {
          "type": "sample_name_or_duration"
        }
      },
      "optional": {
        "num_beats": {
          "desc": "The number of beats within the sample. By default this is 1."
        }
      }
    },
    "examples": [
      {
        "code": "use_sample_bpm :loop_amen \n\nlive_loop :dnb do\n  sample :bass_dnb_f\n  sample :loop_amen\n  sleep 1                 \nend",
        "comments": "#Set bpm based on :loop_amen duration\n \n \n \n \n#`sleep`ing for 1 actually sleeps for duration of :loop_amen\n \n"
      },
      {
        "code": "use_sample_bpm :loop_amen, num_beats: 4 \n                                        \n                                        \n\nlive_loop :dnb do\n  sample :bass_dnb_f\n  sample :loop_amen\n  sleep 4                 \n                          \n                          \nend",
        "comments": "# Set bpm based on :loop_amen duration\n# but also specify that the sample duration\n# is actually 4 beats long.\n \n \n \n \n#`sleep`ing for 4 actually sleeps for duration of :loop_amen\n# as we specified that the sample consisted of\n# 4 beats\n \n"
      }
    ]
  },
  "use_sample_defaults": {
    "summary": "Use new sample defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `sample`. Will remove and override any previous defaults.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen\n\nuse_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nuse_sample_defaults cutoff: 90\n\nsample :loop_amen \n",
        "comments": "# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n \n# plays amen break with a cutoff of 90 and defaults for rest of args - note that amp is no longer 0.5\n"
      }
    ]
  },
  "use_sched_ahead_time": {
    "summary": "Set sched ahead time for the current thread",
    "doc": "Specify how many seconds ahead of time the synths should be triggered. This represents the amount of time between pressing 'Run' and hearing audio. A larger time gives the system more room to work with and can reduce performance issues in playing fast sections on slower platforms. However, a larger time also increases latency between modifying code and hearing the result whilst live coding.\n\nSee `set_sched_ahead_time!` for a global version of this function. Note, `use_sched_ahead_time` will override any value set with `set_sched_ahead_time!` for the current thread.\n\nSee `use_real_time` for a simple way of setting the schedule ahead time to 0.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "time": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_sched_ahead_time 1\n",
        "comments": "# Code will now run approximately 1 second ahead of audio.\n"
      },
      {
        "code": "\nlive_loop :foo do\n  use_sched_ahead_time 1\n  play 70                \n  sleep 1\nend\n\nlive_loop :foo do\n  use_sched_ahead_time 0.5\n  play 82\n  sleep 1\nend",
        "comments": "# Each thread can have its own sched ahead time\n \n \n# Note 70 will be played with 1 second latency\n \n \n \n \n# Note 70 will be played with 0.5 second latency\n \n \n \n"
      }
    ]
  },
  "use_synth": {
    "summary": "Switch current synth",
    "doc": "Switch the current synth to `synth_name`. Affects all further calls to `play`. See `with_synth` for changing the current synth only for a specific `do`/`end` block.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "synth_name": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nuse_synth :mod_sine\nplay 50\n",
        "comments": "# Plays with default synth\n \n# Plays with mod_sine synth\n"
      }
    ]
  },
  "use_synth_defaults": {
    "summary": "Use new synth defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `play`. Will remove and override any previous defaults.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\n\nuse_synth_defaults amp: 0.5, cutoff: 70\n\nplay 50\n\nuse_synth_defaults cutoff: 90\n\nplay 50\n",
        "comments": "# plays note 50 with default arguments\n \n \n \n# plays note 50 with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n \n# plays note 50 with a cutoff of 90 and defaults for rest of args - note that amp is no longer 0.5\n"
      }
    ]
  },
  "use_timing_guarantees": {
    "summary": "Inhibit synth triggers if too late",
    "doc": "If set to true, synths will not trigger if it is too late. If false, some synth triggers may be late.",
    "introduced": "v2.10",
    "args": {
      "required": {
        "bool": {
          "type": "true_or_false"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_timing_guarantees true\n\nsample :loop_amen \n",
        "comments": " \n \n#=> if time is behind by any margin, this will not trigger\n"
      },
      {
        "code": "use_timing_guarantees false\n\nsample :loop_amen \n",
        "comments": " \n \n#=> unless time is too far behind, this will trigger even when late.\n"
      }
    ]
  },
  "use_transpose": {
    "summary": "Note transposition",
    "doc": "Transposes your music by shifting all notes played by the specified amount. To shift up by a semitone use a transpose of 1. To shift down use negative numbers. See `with_transpose` for setting the transpose value only for a specific `do`/`end` block. To transpose entire octaves see `use_octave`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "note_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nuse_transpose 1\nplay 50\n",
        "comments": "# Plays note 50\n \n# Plays note 51\n"
      },
      {
        "code": "\nplay 62\nuse_transpose -12\nplay 62\nuse_transpose 3\nplay 62\n",
        "comments": "# You may change the transposition multiple times:\n# Plays note 62\n \n# Plays note 50\n \n# Plays note 65\n"
      }
    ]
  },
  "use_tuning": {
    "summary": "Use alternative tuning systems",
    "doc": "In most music we make semitones by dividing the octave into 12 equal parts, which is known as equal temperament. However there are lots of other ways to tune the 12 notes. This method adjusts each midi note into the specified tuning system. Because the ratios between notes aren't always equal, be careful to pick a centre note that is in the key of the music you're making for the best sound. Currently available tunings are `:just`, `:pythagorean`, `:meantone` and the default of `:equal`",
    "introduced": "v2.6",
    "args": {
      "required": {
        "tuning": {
          "type": "symbol"
        },
        "fundamental_note": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play :e4\nuse_tuning :just, :c\nplay :e4\n\nplay 64\n",
        "comments": "# Plays note 64\n \n# Plays note 63.8631\n# transparently changes midi notes too\n# Plays note 63.8631\n"
      },
      {
        "code": "\nplay 64\nuse_tuning :just\nplay 64\nuse_tuning :equal\nplay 64\n",
        "comments": "# You may change the tuning multiple times:\n# Plays note 64\n \n# Plays note 63.8631\n \n# Plays note 64\n"
      }
    ]
  },
  "vector": {
    "summary": "Create a vector",
    "doc": "Create a new immutable vector from args. Out of range indexes return nil.",
    "introduced": "v2.6",
    "args": {
      "required": {
        "list": {
          "type": "array"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "(vector 1, 2, 3)[0]\n",
        "comments": "#=> 1\n"
      },
      {
        "code": "(vector 1, 2, 3)[1]\n",
        "comments": "#=> 2\n"
      },
      {
        "code": "(vector 1, 2, 3)[2]\n",
        "comments": "#=> 3\n"
      },
      {
        "code": "(vector 1, 2, 3)[3]\n",
        "comments": "#=> nil\n"
      },
      {
        "code": "(vector 1, 2, 3)[1000]\n",
        "comments": "#=> nil\n"
      },
      {
        "code": "(vector 1, 2, 3)[-1]\n",
        "comments": "#=> nil\n"
      },
      {
        "code": "(vector 1, 2, 3)[-1000]\n",
        "comments": "#=> nil\n"
      }
    ]
  },
  "version": {
    "summary": "Get current version information",
    "doc": "Return information representing the current version of Sonic Pi. This information may be further inspected with `version.major`, `version.minor`, `version.patch` and `version.dev`",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts version\n",
        "comments": "# => Prints out the current version such as v2.0.1\n"
      },
      {
        "code": "puts version.major\n",
        "comments": "# => Prints out the major version number such as 2\n"
      },
      {
        "code": "puts version.minor\n",
        "comments": "# => Prints out the minor version number such as 0\n"
      },
      {
        "code": "puts version.patch\n",
        "comments": "# => Prints out the patch level for this version such as 0\n"
      }
    ]
  },
  "vt": {
    "summary": "Get virtual time",
    "doc": "Get the virtual time of the current thread.",
    "introduced": "v2.1",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "puts vt\n   sleep 1\n   puts vt\n",
        "comments": "# prints 0\n \n# prints 1\n"
      }
    ]
  },
  "wait": {
    "summary": "Wait for duration",
    "doc": "Synonym for `sleep` - see `sleep`",
    "introduced": "v2.0",
    "args": {
      "required": {
        "beats": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [

    ]
  },
  "with_arg_bpm_scaling": {
    "summary": "Block-level enable and disable BPM scaling",
    "doc": "Turn synth argument bpm scaling on or off for the supplied block. Note, using `rt` for args will result in incorrect times when used within this block.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 120\nplay 50, release: 2\nwith_arg_bpm_scaling false do\n  play 50, release: 2\nend",
        "comments": " \n# release is actually 1 due to bpm scaling\n \n# release is now 2\n \n"
      },
      {
        "code": "\nuse_bpm 120\nplay 50, release: rt(2)  \nsleep rt(2)              \nwith_arg_bpm_scaling false do\n  play 50, release: rt(2)\n  sleep rt(2)            \nend",
        "comments": "# Interaction with rt\n \n# release is 2 seconds\n# sleeps for 2 seconds\n \n# ** Warning: release is NOT 2 seconds! **\n# still sleeps for 2 seconds\n \n"
      }
    ]
  },
  "with_arg_checks": {
    "summary": "Block-level enable and disable arg checks",
    "doc": "Similar to `use_arg_checks` except only applies to code within supplied `do`/`end` block. Previous arg check value is restored after block.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nuse_arg_checks true\n\nplay 80, cutoff: 100\n\nwith_arg_checks false do\n \n  play 50, release: 3\n  sleep 1\n  play 72            \nend\n\n\nplay 90\n",
        "comments": "# Turn on arg checking:\n \n \n# Args are checked\n \n \n#Arg checking is now disabled\n# Args are not checked\n \n# Arg is not checked\n \n \n# Arg checking is re-enabled\n# Args are checked\n"
      }
    ]
  },
  "with_bpm": {
    "summary": "Set the tempo for the code block",
    "doc": "Sets the tempo in bpm (beats per minute) for everything in the given block. Affects all containing calls to `sleep` and all temporal synth arguments which will be scaled to match the new bpm. See also `use_bpm`\n\n  For dance music here's a rough guide for which BPM to aim for depending on your genre:\n\n  * Dub: 60-90 bpm\n  * Hip-hop: 60-100 bpm\n  * Downtempo: 90-120 bpm\n  * House: 115-130 bpm\n  * Techno/trance: 120-140 bpm\n  * Dubstep: 135-145 bpm\n  * Drum and bass: 160-180 bpm\n  ",
    "introduced": "v2.0",
    "args": {
      "required": {
        "bpm": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  4.times do\n    sample :drum_bass_hard\n    sleep 1\n  end\n\n  sleep 5\n\n \n \n  with_bpm 120 do \n    4.times do\n      sample :drum_bass_hard\n      sleep 1\n    end\n  end\n\n  sleep 5\n\n \n  4.times do\n    sample :drum_bass_hard\n    sleep 1\n  end",
        "comments": "# default tempo is 60 bpm\n \n \n# sleeps for 1 second\n \n \n# sleeps for 5 seconds\n \n# with_bpm sets a tempo for everything between do ... end (a block)\n# Hear how it gets faster?\n# set bpm to be twice as fast\n \n \n# now sleeps for 0.5 seconds\n \n \n \n \n \n# bpm goes back to normal\n \n \n# sleeps for 1 second\n \n"
      }
    ]
  },
  "with_bpm_mul": {
    "summary": "Set new tempo as a multiple of current tempo for block",
    "doc": "Sets the tempo in bpm (beats per minute) for everything in the given block as a multiplication of the current tempo. Affects all containing calls to `sleep` and all temporal synth arguments which will be scaled to match the new bpm. See also `with_bpm`",
    "introduced": "v2.3",
    "args": {
      "required": {
        "mul": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_bpm 60  \n  play 50\n  sleep 1     \n  play 62\n  sleep 2     \n  with_bpm_mul 0.5 do\n    play 50\n    sleep 1          \n    play 62\n  end\n  sleep 1           \n",
        "comments": "# Set the BPM to 60\n \n# Sleeps for 1 second\n \n# Sleeps for 2 seconds\n# BPM is now (60 * 0.5) == 30\n \n# Sleeps for 2 seconds\n \n \n# BPM is now back to 60, therefore sleep is 1 second\n"
      }
    ]
  },
  "with_cent_tuning": {
    "summary": "Block-level cent tuning",
    "doc": "Similar to `use_cent_tuning` except only applies cent shift to code within supplied `do`/`end` block. Previous cent tuning value is restored after block. One semitone consists of 100 cents. To transpose entire semitones see `with_transpose`.",
    "introduced": "v2.9",
    "args": {
      "required": {
        "cent_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_cent_tuning 1\nplay 50\n\nwith_cent_tuning 2 do\n  play 50\nend\n\n\nplay 50\n",
        "comments": " \n# Plays note 50.01\n \n \n# Plays note 50.02\n \n \n# Original cent tuning value is restored\n# Plays note 50.01\n"
      }
    ]
  },
  "with_cue_logging": {
    "summary": "Block-level enable and disable cue logging",
    "doc": "Similar to use_cue_logging except only applies to code within supplied `do`/`end` block. Previous cue log value is restored after block.",
    "introduced": "v2.6",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  use_cue_logging true\n\n  cue :foo\n\n  with_cue_logging false do\n   \n    cue :bar\n  end\n  sleep 1\n \n  cue :quux\n",
        "comments": "# Turn on debugging:\n \n \n# cue message is printed to log\n \n \n#Cue logging is now disabled\n# cue *is* sent but not displayed in log\n \n \n# Debug is re-enabled\n# cue is displayed in log\n"
      }
    ]
  },
  "with_debug": {
    "summary": "Block-level enable and disable debug",
    "doc": "Similar to use_debug except only applies to code within supplied `do`/`end` block. Previous debug value is restored after block.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\nuse_debug true\n\nplay 80\n\nwith_debug false do\n \n  play 50\n  sleep 1\n  play 72\nend\n\n\nplay 90\n",
        "comments": "# Turn on debugging:\n \n \n# Debug message is sent\n \n \n#Debug is now disabled\n# Debug message is not sent\n \n# Debug message is not sent\n \n \n# Debug is re-enabled\n# Debug message is sent\n"
      }
    ]
  },
  "with_fx": {
    "summary": "Use Studio FX",
    "doc": "This applies the named effect (FX) to everything within a given `do`/`end` block. Effects may take extra parameters to modify their behaviour. See FX help for parameter details.\n\nFor advanced control, it is also possible to modify the parameters of an effect within the body of the block. If you define the block with a single argument, the argument becomes a reference to the current effect and can be used to control its parameters (see examples).",
    "introduced": "v2.0",
    "args": {
      "required": {
        "fx_name": {
          "type": "symbol"
        }
      },
      "optional": {
        "reps": {
          "desc": "Number of times to repeat the block in an iteration."
        },
        "kill_delay": {
          "desc": "Amount of time to wait after all synths triggered by the block have completed before stopping and freeing the effect synthesiser."
        }
      }
    },
    "examples": [
      {
        "code": "\nwith_fx :distortion do\n  play 50\n  sleep 1\n  sample :loop_amen\nend",
        "comments": "# Basic usage\n# Use the distortion effect with default parameters\n# => plays note 50 with distortion\n \n# => plays the loop_amen sample with distortion too\n \n"
      },
      {
        "code": "\nwith_fx :level, amp: 0.3 do\n  play 50\n  sleep 1\n  sample :loop_amen\nend",
        "comments": "# Specify effect parameters\n# Use the level effect with the amp parameter set to 0.3\n \n \n \n \n"
      },
      {
        "code": "\nwith_fx :reverb, mix: 0.1 do |fx|\n \n \n\n  play 60\n  sleep 2\n\n  control fx, mix: 0.5\n  play 60\n  sleep 2\n\n  control fx, mix: 1\n  play 60\n  sleep 2\nend",
        "comments": "# Controlling the effect parameters within the block\n \n# here we set the reverb level quite low to start with (0.1)\n# and we can change it later by using the 'fx' reference we've set up\n \n# plays note 60 with a little bit of reverb\n \n \n# change the parameters of the effect to add more reverb\n# again note 60 but with more reverb\n \n \n# change the parameters of the effect to add more reverb\n# plays note 60 with loads of reverb\n \n \n"
      },
      {
        "code": "\nwith_fx :reverb, reps: 16 do\n  play (scale :e3, :minor_pentatonic), release: 0.1\n  sleep 0.125\nend\n\n\nwith_fx :reverb do\n  16.times do\n    play (scale :e3, :minor_pentatonic), release: 0.1\n    sleep 0.125\n  end\nend",
        "comments": "# Repeat the block 16 times internally\n \n \n \n \n \n# The above is a shorthand for this:\n \n \n \n \n \n \n"
      }
    ]
  },
  "with_merged_midi_defaults": {
    "summary": "Block-level merge midi defaults",
    "doc": "Specify opt values to be used by any following call to the `midi_*` fns within the specified `do`/`end` block. Merges the specified values with any previous midi defaults, rather than replacing them. After the `do`/`end` block has completed, previous defaults (if any) are restored.",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "MIDI channel(s) to send event on"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "velocity": {
          "desc": "Note velocity as a MIDI number."
        },
        "vel_f": {
          "desc": "Velocity as a value between 0 and 1 (will be converted to a MIDI velocity between 0 and 127)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi note on message from being sent out. (Ensures all opts are evaluated in this call to `midi_note_on` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_note_on :e1\n\nuse_midi_defaults channel: 3, port: \"foo\"\n\nmidi_note_on :e3\n\nwith_merged_midi_defaults channel: 1 do\n\n  midi_note_on :e2\n                  \n                  \nend\n\nmidi_note_on :e2\n                \n                \n",
        "comments": "# Sends MIDI :e1 note_on with default opts\n \n \n \n# Sends MIDI :e3 note_on to channel 3 on port \"foo\"\n \n \n \n# Sends MIDI :e2 note_on to channel 1 on port \"foo\".\n# This is because the call to use_merged_midi_defaults overrode the\n# channel but not the port which got merged in.\n \n \n# Sends MIDI :e2 note_on to channel 3 on port \"foo\".\n# This is because the previous defaults were restored after\n# the call to with_merged_midi_defaults.\n"
      }
    ]
  },
  "with_merged_sample_defaults": {
    "summary": "Block-level use merged sample defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `sample` within the `do`/`end` block.  Merges the specified values with any previous sample defaults, rather than replacing them. After the `do`/`end` block has completed, the previous sampled defaults (if any) are restored.",
    "introduced": "v2.9",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen\n\nuse_merged_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nwith_merged_sample_defaults cutoff: 90 do\n  sample :loop_amen \nend\n\nsample :loop_amen \n",
        "comments": "# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n# plays amen break with a cutoff of 90 and amp of 0.5\n \n \n# plays amen break with a cutoff of 70 and amp is 0.5 again as the previous defaults are restored.\n"
      }
    ]
  },
  "with_merged_synth_defaults": {
    "summary": "Block-level merge synth defaults",
    "doc": "Specify synth arg values to be used by any following call to play within the specified `do`/`end` block. Merges the specified values with any previous synth defaults, rather than replacing them. After the `do`/`end` block has completed, previous defaults (if any) are restored.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "with_merged_synth_defaults amp: 0.5, pan: 1 do\n  play 50\nend",
        "comments": " \n# => plays note 50 with amp 0.5 and pan 1\n \n"
      },
      {
        "code": "play 50\nwith_merged_synth_defaults amp: 0.5 do\n  play 50\n\n  with_merged_synth_defaults pan: -1 do\n    with_merged_synth_defaults amp: 0.7 do\n      play 50\n    end\n  end\n  play 50\nend",
        "comments": "#=> plays note 50\n \n#=> plays note 50 with amp 0.5\n \n \n \n#=> plays note 50 with amp 0.7 and pan -1\n \n \n#=> plays note 50 with amp 0.5\n \n"
      }
    ]
  },
  "with_midi_defaults": {
    "summary": "Block-level use new MIDI defaults",
    "doc": "Specify new default values to be used by all calls to `midi_*` fns within the `do`/`end` block. After the `do`/`end` block has completed the previous MIDI defaults (if any) are restored.",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
        "channel": {
          "desc": "MIDI channel(s) to send event on"
        },
        "port": {
          "desc": "MIDI port(s) to send to"
        },
        "velocity": {
          "desc": "Note velocity as a MIDI number."
        },
        "vel_f": {
          "desc": "Velocity as a value between 0 and 1 (will be converted to a MIDI velocity between 0 and 127)"
        },
        "on": {
          "desc": "If specified and false/nil/0 will stop the midi note on message from being sent out. (Ensures all opts are evaluated in this call to `midi_note_on` regardless of value)."
        }
      }
    },
    "examples": [
      {
        "code": "midi_note_on :e1\n\nwith_midi_defaults channel: 3, port: \"foo\" do\n  midi_note_on :e3\nend\n\nuse_midi_defaults channel: 1  \n\nwith_midi_defaults channel: 5 do\n  midi_note_on :e2\n                  \nend\n\n  midi_note_on :e4\n                  \n",
        "comments": "# Sends MIDI :e1 note on with default opts\n \n \n# Sends MIDI :e3 note on to channel 3 on port \"foo\"\n \n \n# this will be overridden by the following\n \n \n# Sends MIDI :e2 note on to channel 5.\n# Note that the port is back to the default\n \n \n# Sends MIDI :e4 note on to channel 1\n# Note that the call to use_midi_defaults is now honoured.\n"
      }
    ]
  },
  "with_midi_logging": {
    "summary": "Block-level enable and disable MIDI logging",
    "doc": "Similar to use_midi_logging except only applies to code within supplied `do`/`end` block. Previous MIDI log value is restored after block.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  use_midi_logging true\n\n  midi :e1\n\n  with_midi_logging false do\n   \n    midi :f2\n  end\n  sleep 1\n \n  midi :G3\n",
        "comments": "# Turn on MIDI logging:\n \n \n#  message is printed to log\n \n \n#MIDI logging is now disabled\n# MIDI message *is* sent but not displayed in log\n \n \n# Debug is re-enabled\n# message is displayed in log\n"
      }
    ]
  },
  "with_octave": {
    "summary": "Block level octave transposition",
    "doc": "Transposes your music by shifting all notes played by the specified number of octaves within the specified block. To shift up by an octave use a transpose of 1. To shift down use negative numbers. For transposing the notes within the octave range see `with_transpose`.",
    "introduced": "v2.9",
    "args": {
      "required": {
        "octave_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nsleep 1\nwith_octave 1 do\n play 50\nend\nsleep 1\nplay 50\n",
        "comments": "# Plays note 50\n \n \n# Plays note 62\n \n \n# Plays note 50\n"
      }
    ]
  },
  "with_osc": {
    "summary": "Block-level setting for the default hostname and port number of outgoing OSC messages.",
    "doc": "Sets the destination host and port that `osc` will send messages to for the given do/end block.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "hostname": {
          "type": "string"
        },
        "port": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_osc \"localhost\", 7000 \nosc \"/foo/baz\"            \n\nwith_osc \"localhost\", 7010 do\n                               \n   osc \"/foo/baz\"            \nend\n\nosc \"/foo/baz\"            \n                            \n                            \n",
        "comments": "# Specify port 7010\n# Send an OSC message to port 7000\n \n# set hostname and port for the duration\n# of this do/end block\n# Send an OSC message to port 7010\n \n \n# Send an OSC message to port 7000\n# as old setting is restored outside\n# do/end block\n"
      }
    ]
  },
  "with_osc_logging": {
    "summary": "Block-level enable and disable OSC logging",
    "doc": "Similar to use_osc_logging except only applies to code within supplied `do`/`end` block. Previous OSC log value is restored after block.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "true_or_false": {
          "type": "boolean"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "\n  use_osc_logging true\n\n  osc \"/foo\"\n\n  with_osc_logging false do\n   \n    osc \"/foo\"\n  end\n  sleep 1\n \n  osc \"/foo\"\n",
        "comments": "# Turn on OSC logging:\n \n \n#  message is printed to log\n \n \n#OSC logging is now disabled\n# OSC message *is* sent but not displayed in log\n \n \n# Debug is re-enabled\n# message is displayed in log\n"
      }
    ]
  },
  "with_random_seed": {
    "summary": "Specify random seed for code block",
    "doc": "Resets the random number generator to the specified seed for the specified code block. All generated random numbers and randomisation functions such as `shuffle` and `choose` within the code block will use this new generator. Once the code block has completed, the original generator is restored and the code block generator is discarded. Use this to change the sequence of random numbers in your piece in a way that can be reproduced. Especially useful if combined with iteration. See examples.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "seed": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_random_seed 1\n  puts rand\n  puts rand \n  use_random_seed 1\n  puts rand\n  with_random_seed 1 do\n    puts rand\n    puts rand\n  end\n  puts rand\n           \n",
        "comments": "# reset random seed to 1\n# => 0.417022004702574\n#=> 0.7203244934421581\n# reset it back to 1\n# => 0.417022004702574\n# reset seed back to 1 just for this block\n# => 0.417022004702574\n#=> 0.7203244934421581\n \n# => 0.7203244934421581\n# notice how the original generator is restored\n"
      },
      {
        "code": "\n  notes = (scale :eb3, :minor_pentatonic, num_octaves: 2) \n                                          \n\n  with_fx :reverb do\n    live_loop :repeating_melody do        \n\n      with_random_seed 300 do             \n                                          \n                                          \n                                          \n                                          \n\n        8.times do                        \n                                          \n                                          \n\n          play notes.choose, release: 0.1 \n                                          \n                                          \n                                          \n          sleep 0.125\n        end\n      end\n\n      play notes.choose, amp: 1.5, release: 0.5\n                                               \n                                               \n                                               \n    end\n  end",
        "comments": "# Generating melodies\n# Create a set of notes to choose from.\n# Scales work well for this\n \n \n# Create a live loop\n \n# Set the random seed to a known value every\n# time around the loop. This seed is the key\n# to our melody. Try changing the number to\n# something else. Different numbers produce\n# different melodies\n \n# Now iterate a number of times. The size of\n# the iteration will be the length of the\n# repeating melody.\n \n# 'Randomly' choose a note from our ring of\n# notes. See how this isn't actually random\n# but uses a reproducible method! These notes\n# are therefore repeated over and over...\n \n \n \n \n# Note that this line is outside of\n# the with_random_seed block and therefore\n# the randomisation never gets reset and this\n# part of the melody never repeats.\n \n \n"
      }
    ]
  },
  "with_random_source": {
    "summary": "Specify random distribution for code block",
    "doc": "Resets the random number generator to the specified noise type for the specified code block. All generated random numbers and randomisation functions such as `shuffle` and `choose` within the code block will use this new generator. Once the code block has completed, the original generator is restored and the code block generator is discarded. Use this to change the sequence of random numbers in your piece in a way that can be reproduced. Especially useful if combined with iteration. See examples.",
    "introduced": "v3.3",
    "args": {
      "required": {
        "noise_type": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_random_source :white\n  rand_reset\n  puts rand\n  puts rand\n  puts rand\n  rand_reset\n  use_random_source :pink\n  puts rand\n  puts rand\n  rand_reset\n  use_random_source :perlin\n  puts rand\n  puts rand\n\n  with_random_source :white do\n    puts rand\n  end\n\n  puts rand\n           \n",
        "comments": "# use white noise as the distribution (default)\n# reset random seed\n# => 0.75006103515625\n# => 0.733917236328125\n# => 0.464202880859375\n# reset it again\n# use pink noise as the distribution\n# => 0.47808837890625\n# => 0.56011962890625\n# reset it\n# use perlin noise as the distribution\n# => 0.546478271484375\n# => 0.573150634765625\n \n# use white noise just for this block\n# => 0.464202880859375\n \n \n# => 0.597015380859375\n# notice how the last generator (perlin) is restored\n"
      }
    ]
  },
  "with_real_time": {
    "summary": "Sets sched ahead time to 0 within the block for the current thread",
    "doc": "\n\nSets sched ahead time to 0 within the block for the current thread. Shorthand for `with_sched_ahead_time 0`.\n\nSee `with_sched_ahead_time` for a version of this function which allows you to set the schedule ahead time to any arbitrary value. Note, `with_real_time` will override any value set with `set_sched_ahead_time!` for the current thread.\n\n",
    "introduced": "v3.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_real_time 1\n",
        "comments": "# Code will now run approximately 1 second ahead of audio.\n"
      }
    ]
  },
  "with_sample_bpm": {
    "summary": "Block-scoped sample-duration-based bpm modification",
    "doc": "Block-scoped modification of bpm so that sleeping for 1 will sleep for the duration of the sample.",
    "introduced": "v2.1",
    "args": {
      "required": {
        "string_or_number": {
          "type": "sample_name_or_duration"
        }
      },
      "optional": {
        "num_beats": {
          "desc": "The number of beats within the sample. By default this is 1."
        }
      }
    },
    "examples": [
      {
        "code": "live_loop :dnb do\n  with_sample_bpm :loop_amen do\n    sample :bass_dnb_f\n    sample :loop_amen\n    sleep 1                    \n  end\nend",
        "comments": " \n#Set bpm based on :loop_amen duration\n \n \n#`sleep`ing for 1 sleeps for duration of :loop_amen\n \n \n"
      },
      {
        "code": "live_loop :dnb do\n  with_sample_bpm :loop_amen, num_beats: 4 do\n                                             \n                                             \n    sample :bass_dnb_f\n    sample :loop_amen\n    sleep 4                    \n                               \n                               \n  end\nend",
        "comments": " \n# Set bpm based on :loop_amen duration\n# but also specify that the sample duration\n# is actually 4 beats long.\n \n \n#`sleep`ing for 4 sleeps for duration of :loop_amen\n# as we specified that the sample consisted of\n# 4 beats\n \n \n"
      }
    ]
  },
  "with_sample_defaults": {
    "summary": "Block-level use new sample defaults",
    "doc": "Specify new default values to be used by all subsequent calls to `sample` within the `do`/`end` block. After the `do`/`end` block has completed, the previous sampled defaults (if any) are restored. For the contents of the block, will remove and override any previous defaults.",
    "introduced": "v2.5",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "sample :loop_amen\n\nuse_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nwith_sample_defaults cutoff: 90 do\n  sample :loop_amen \nend\n\nsample :loop_amen \n",
        "comments": "# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n# plays amen break with a cutoff of 90 and defaults for rest of args - note that amp is no longer 0.5\n \n \n# plays amen break with a cutoff of 70 and amp is 0.5 again as the previous defaults are restored.\n"
      }
    ]
  },
  "with_sched_ahead_time": {
    "summary": "Block-level set sched ahead time for the current thread",
    "doc": "Specify how many seconds ahead of time the synths should be triggered for the block. See `use_sched_ahead_time` for further information.\n\nSee `set_sched_ahead_time!` for a global version of this function. Note, `with_sched_ahead_time` will override any value set with `set_sched_ahead_time!` for the given block within the current thread.\n\nSee `with_real_time` for a simple way of setting the schedule ahead time to 0.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "time": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "with_sched_ahead_time 1 do\n  play 70 \nend\n\nplay 70 \n",
        "comments": " \n# Sound will happen with a latency of 1\n \n \n# Sound will happen with the default latency (0.5s)\n"
      }
    ]
  },
  "with_swing": {
    "summary": "Add swing to successive calls to do/end block",
    "doc": "Runs block within a `time_warp` except for once every `pulse` consecutive runs (defaulting to 4). When used for rhythmical purposes this results in one in every `pulse` calls of the block being 'on beat' and the rest shifted forward or backwards in time by `shift` beats.",
    "introduced": "v3.0",
    "args": {
      "required": {
        "shift": {
          "type": "beats"
        },
        "pulse": {
          "type": "number"
        },
        "tick": {
          "type": "symbol"
        }
      },
      "optional": {
        "shift": {
          "desc": "How much time to delay/forward the block. Greater values produce more emphasised swing. Defaults to 0.1 beats."
        },
        "pulse": {
          "desc": "How often to apply the swing. Defaults to 4."
        },
        "tick": {
          "desc": "A key for the tick with which to count pulses. Override this if you have more than one `with_swing` block in your `live_loop` or thread to stop them interfering with each other."
        },
        "offset": {
          "desc": "Count offset - before modding the count with the pulse size - integer offset to add to the result of calling `tick` with the specified tick key (via the `tick:` opt)"
        }
      }
    },
    "examples": [
      {
        "code": "live_loop :foo do\n  with_swing 0.1 do\n    sample :elec_beep     \n  end\n  sleep 0.25\nend",
        "comments": " \n \n# plays the :elec_beep sample late except for every 4th time\n \n \n \n"
      },
      {
        "code": "live_loop :foo do\n  with_swing -0.1 do\n    sample :elec_beep     \n  end                     \n  sleep 0.25\nend",
        "comments": " \n \n# plays the :elec_beep sample slightly early\n# except for every 4th time\n \n \n"
      },
      {
        "code": "live_loop :foo do\n  with_swing -0.1, pulse: 8 do\n    sample :elec_beep     \n  end                     \n  sleep 0.25\nend",
        "comments": " \n \n# plays the :elec_beep sample slightly early\n# except for every 8th time\n \n \n"
      },
      {
        "code": "\n\nlive_loop :foo do\n  with_swing 0.14, tick: :a do\n    sample :elec_beep     \n  end                     \n\n  with_swing -0.1, tick: :b do\n    sample :elec_beep, rate: 2 \n  end                          \n  sleep 0.25\nend",
        "comments": "# Use unique tick names if you plan on using with_swing\n# more than once in any given live_loop or thread.\n \n \n# plays the :elec_beep sample slightly late\n# except for every 4th time\n \n \n# plays the :elec_beep sample at double rate\n#  slightly early except for every 4th time\n \n \n"
      },
      {
        "code": "live_loop :foo do\n  with_swing 0.1 do\n    cue :tick             \n  end\n  sleep 0.25\nend\n\nlive_loop :bar do\n  sync :tick\n  sample :elec_beep      \n                         \n                         \nend",
        "comments": " \n \n# send out cue messages with swing timing\n \n \n \n \n \n \n# sync on the swing cue messages to bring the swing into\n# another live loop (sync will match the timing and clock of\n# the sending live loop)\n \n"
      }
    ]
  },
  "with_synth": {
    "summary": "Block-level synth switching",
    "doc": "Switch the current synth to `synth_name` but only for the duration of the `do`/`end` block. After the `do`/`end` block has completed, the previous synth is restored.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "synth_name": {
          "type": "symbol"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\nsleep 2\nuse_synth :supersaw\nplay 50\nsleep 2\nwith_synth :saw_beep do\n  play 50\nend\nsleep 2\n\nplay 50\n",
        "comments": "# Plays with default synth\n \n \n# Plays with supersaw synth\n \n \n# Plays with saw_beep synth\n \n \n# Previous synth is restored\n# Plays with supersaw synth\n"
      }
    ]
  },
  "with_synth_defaults": {
    "summary": "Block-level use new synth defaults",
    "doc": "Specify new default values to be used by all calls to `play` within the `do`/`end` block. After the `do`/`end` block has completed the previous synth defaults (if any) are restored.",
    "introduced": "v2.0",
    "args": {
      "required": {
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "play 50\n\nuse_synth_defaults amp: 0.5, pan: -1\n\nplay 50\n\nwith_synth_defaults amp: 0.6, cutoff: 80 do\n  play 50\nend\n\nplay 60\n",
        "comments": "# plays note 50 with default arguments\n \n \n \n# plays note 50 with an amp of 0.5, pan of -1 and defaults for rest of args\n \n \n# plays note 50 with an amp of 0.6, cutoff of 80 and defaults for rest of args (including pan)\n \n \n# plays note 60 with an amp of 0.5, pan of -1 and defaults for rest of args\n"
      }
    ]
  },
  "with_timing_guarantees": {
    "summary": "Block-scoped inhibition of synth triggers if too late",
    "doc": "For the given block, if set to true, synths will not trigger if it is too late. If false, some synth triggers may be late. After the block has completed, the previous value is restored. ",
    "introduced": "v2.10",
    "args": {
      "required": {
        "bool": {
          "type": "true_or_false"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "with_timing_guarantees true do\n  sample :loop_amen \nend",
        "comments": " \n#=> if time is behind by any margin, this will not trigger\n \n"
      },
      {
        "code": "with_timing_guarantees false do\n  sample :loop_amen \nend",
        "comments": " \n#=> unless time is too far behind, this will trigger even when late.\n \n"
      }
    ]
  },
  "with_transpose": {
    "summary": "Block-level note transposition",
    "doc": "Similar to use_transpose except only applies to code within supplied `do`/`end` block. Previous transpose value is restored after block. To transpose entire octaves see `with_octave`.",
    "introduced": "v2.0",
    "args": {
      "required": {
        "note_shift": {
          "type": "number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_transpose 3\nplay 62\n\nwith_transpose 12 do\n  play 50\n  sleep 1\n  play 72\nend\n\n\nplay 80\n",
        "comments": " \n# Plays note 65\n \n \n# Plays note 62\n \n# Plays note 84\n \n \n# Original transpose value is restored\n# Plays note 83\n"
      }
    ]
  },
  "with_tuning": {
    "summary": "Block-level tuning modification",
    "doc": "Similar to use_tuning except only applies to code within supplied `do`/`end` block. Previous tuning value is restored after block.",
    "introduced": "v2.6",
    "args": {
      "required": {
        "tuning": {
          "type": "symbol"
        },
        "fundamental_note": {
          "type": "symbol_or_number"
        }
      },
      "optional": {
      }
    },
    "examples": [
      {
        "code": "use_tuning :equal, :c\nplay :e4\nwith_tuning :just, :c do\n  play :e4\n  sleep 1\n  play :c4\nend\n\nplay :e4\n",
        "comments": " \n# Plays note 64\n \n# Plays note 63.8631\n \n# Plays note 60\n \n# Original tuning value is restored\n# Plays note 64\n"
      }
    ]
  }
}
