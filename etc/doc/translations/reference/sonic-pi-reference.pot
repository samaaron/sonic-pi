  # This file is distributed under the same license as the Sonic Pi package.
  # Do not edit this file, use Weblate instead.
  # Read TRANSLATION.md for more information.

  msgid ""
  msgstr ""
  "Project-Id-Version: Sonic Pi\n"
  "MIME-Version: 1.0\n"
  "Content-Type: text/plain; charset=UTF-8\n"
  "Content-Transfer-Encoding: 8bit\n"

#: lang.json:mc_camera_fixed:examples:0:comments
#: lang.json:mc_camera_normal:examples:0:comments
#: lang.json:mc_camera_set_location:examples:0:comments
#: lang.json:mc_camera_third_person:examples:0:comments
#: lang.json:mc_checkpoint_restore:examples:0:comments
#: lang.json:mc_checkpoint_save:examples:0:comments
#: lang.json:mc_set_tile:description lang.json:mc_set_tile:examples:0:comments
msgid ""
msgstr ""

#: fx.json:autotuner:description
msgid ""
"Autotune/phase vocoder effect. Used without any arguments, it tries to detect "
"the pitch and shift it to the nearest exact note. This can help with out of tu"
"ne singing, but it's also an interesting effect in its own right. When used wi"
"th the note: arg, it tries to shift the input to match that note instead. This"
" gives that classic \"robot singing\" sound that people associate with vocoders."
" This can then be changed using the control method to create new melodies.\n"
"\n"
"```\n"
"with_fx :autotuner do |c|\n"
"```\n"
"\n"
"```\n"
"  sample \"~/Downloads/acappella.wav\" # any sample with a voice is good\n"
"```\n"
"\n"
"```\n"
"  sleep 4\n"
"```\n"
"\n"
"```\n"
"  # listen to standard auto-tune behaviour for 4 seconds\n"
"```\n"
"\n"
"```\n"
"  64.times do\n"
"```\n"
"\n"
"```\n"
"     # now start changing note: to get robot voice behaviour\n"
"```\n"
"\n"
"```\n"
"     control c, note: (scale :a2, :minor_pentatonic, num_octaves: 2).choose\n"
"```\n"
"\n"
"```\n"
"     sleep 0.5\n"
"```\n"
"\n"
"```\n"
"  end\n"
"```\n"
"\n"
"```\n"
"end\n"
"```\n"
msgstr ""

#: fx.json:autotuner:opts:amp:description fx.json:band_eq:opts:amp:description
#: fx.json:bitcrusher:opts:amp:description fx.json:bpf:opts:amp:description
#: fx.json:compressor:opts:amp:description
#: fx.json:distortion:opts:amp:description fx.json:echo:opts:amp:description
#: fx.json:eq:opts:amp:description fx.json:flanger:opts:amp:description
#: fx.json:gverb:opts:amp:description fx.json:hpf:opts:amp:description
#: fx.json:ixi_techno:opts:amp:description fx.json:krush:opts:amp:description
#: fx.json:level:opts:amp:description fx.json:lpf:opts:amp:description
#: fx.json:mono:opts:amp:description fx.json:nbpf:opts:amp:description
#: fx.json:nhpf:opts:amp:description fx.json:nlpf:opts:amp:description
#: fx.json:normaliser:opts:amp:description fx.json:nrbpf:opts:amp:description
#: fx.json:nrhpf:opts:amp:description fx.json:nrlpf:opts:amp:description
#: fx.json:octaver:opts:amp:description fx.json:pan:opts:amp:description
#: fx.json:ping_pong:opts:amp:description
#: fx.json:pitch_shift:opts:amp:description fx.json:rbpf:opts:amp:description
#: fx.json:record:opts:amp:description fx.json:reverb:opts:amp:description
#: fx.json:rhpf:opts:amp:description fx.json:ring_mod:opts:amp:description
#: fx.json:rlpf:opts:amp:description fx.json:sound_out:opts:amp:description
#: fx.json:sound_out_stereo:opts:amp:description
#: fx.json:tanh:opts:amp:description fx.json:tremolo:opts:amp:description
#: fx.json:vowel:opts:amp:description fx.json:whammy:opts:amp:description
#: fx.json:wobble:opts:amp:description synths.json:beep:opts:amp:description
#: synths.json:blade:opts:amp:description
#: synths.json:bnoise:opts:amp:description
#: synths.json:chipbass:opts:amp:description
#: synths.json:chiplead:opts:amp:description
#: synths.json:chipnoise:opts:amp:description
#: synths.json:cnoise:opts:amp:description
#: synths.json:dark_ambience:opts:amp:description
#: synths.json:dpulse:opts:amp:description
#: synths.json:dsaw:opts:amp:description synths.json:dtri:opts:amp:description
#: synths.json:dull_bell:opts:amp:description
#: synths.json:fm:opts:amp:description synths.json:gnoise:opts:amp:description
#: synths.json:growl:opts:amp:description
#: synths.json:hollow:opts:amp:description
#: synths.json:hoover:opts:amp:description
#: synths.json:kalimba:opts:amp:description
#: synths.json:mod_dsaw:opts:amp:description
#: synths.json:mod_fm:opts:amp:description
#: synths.json:mod_pulse:opts:amp:description
#: synths.json:mod_saw:opts:amp:description
#: synths.json:mod_sine:opts:amp:description
#: synths.json:mod_tri:opts:amp:description
#: synths.json:noise:opts:amp:description
#: synths.json:piano:opts:amp:description
#: synths.json:pluck:opts:amp:description
#: synths.json:pnoise:opts:amp:description
#: synths.json:pretty_bell:opts:amp:description
#: synths.json:prophet:opts:amp:description
#: synths.json:pulse:opts:amp:description
#: synths.json:rodeo:opts:amp:description synths.json:saw:opts:amp:description
#: synths.json:sound_in:opts:amp:description
#: synths.json:sound_in_stereo:opts:amp:description
#: synths.json:square:opts:amp:description
#: synths.json:subpulse:opts:amp:description
#: synths.json:supersaw:opts:amp:description
#: synths.json:tb303:opts:amp:description
#: synths.json:tech_saws:opts:amp:description
#: synths.json:tri:opts:amp:description synths.json:zawa:opts:amp:description
msgid ""
"The amplitude of the sound. Typically a value between 0 and 1. Higher amplitud"
"es may be used, but won't make the sound louder, they will just reduce the qua"
"lity of all the sounds currently being played (due to compression.)"
msgstr ""

#: fx.json:autotuner:opts:formant_ratio:description
msgid ""
"This effect separates pitched content of an input from the formant sounds (per"
"cussive, non-pitched sounds like \"ssss\" and \"ttttt\"). Changing the formant rat"
"io shifts the non-pitched sounds - lower pitched formants (0.5) sound like som"
"eone with a deep voice, higher values (e.g. 2.0 and above) sound like a high p"
"itched voice."
msgstr ""

#: fx.json:autotuner:opts:mix:description fx.json:band_eq:opts:mix:description
#: fx.json:bitcrusher:opts:mix:description fx.json:bpf:opts:mix:description
#: fx.json:compressor:opts:mix:description
#: fx.json:distortion:opts:mix:description fx.json:echo:opts:mix:description
#: fx.json:eq:opts:mix:description fx.json:flanger:opts:mix:description
#: fx.json:gverb:opts:mix:description fx.json:hpf:opts:mix:description
#: fx.json:ixi_techno:opts:mix:description fx.json:krush:opts:mix:description
#: fx.json:lpf:opts:mix:description fx.json:mono:opts:mix:description
#: fx.json:nbpf:opts:mix:description fx.json:nhpf:opts:mix:description
#: fx.json:nlpf:opts:mix:description fx.json:normaliser:opts:mix:description
#: fx.json:nrbpf:opts:mix:description fx.json:nrhpf:opts:mix:description
#: fx.json:nrlpf:opts:mix:description fx.json:octaver:opts:mix:description
#: fx.json:pan:opts:mix:description fx.json:panslicer:opts:mix:description
#: fx.json:ping_pong:opts:mix:description
#: fx.json:pitch_shift:opts:mix:description fx.json:rbpf:opts:mix:description
#: fx.json:record:opts:mix:description fx.json:reverb:opts:mix:description
#: fx.json:rhpf:opts:mix:description fx.json:ring_mod:opts:mix:description
#: fx.json:rlpf:opts:mix:description fx.json:slicer:opts:mix:description
#: fx.json:sound_out:opts:mix:description
#: fx.json:sound_out_stereo:opts:mix:description
#: fx.json:tanh:opts:mix:description fx.json:tremolo:opts:mix:description
#: fx.json:vowel:opts:mix:description fx.json:whammy:opts:mix:description
#: fx.json:wobble:opts:mix:description
msgid ""
"The amount (percentage) of FX present in the resulting sound represented as a "
"value between 0 and 1. For example, a mix of 0 means that only the original so"
"und is heard, a mix of 1 means that only the FX is heard (typically the defaul"
"t) and a mix of 0.5 means that half the original and half of the FX is heard."
msgstr ""

#: fx.json:autotuner:opts:note:description
msgid ""
"Midi note to shift pitch to. The quality of the sound depends on how stable th"
"e pitch of the input is."
msgstr ""

#: fx.json:autotuner:opts:pre_amp:description
#: fx.json:band_eq:opts:pre_amp:description
#: fx.json:bitcrusher:opts:pre_amp:description
#: fx.json:bpf:opts:pre_amp:description
#: fx.json:compressor:opts:pre_amp:description
#: fx.json:distortion:opts:pre_amp:description
#: fx.json:echo:opts:pre_amp:description fx.json:eq:opts:pre_amp:description
#: fx.json:flanger:opts:pre_amp:description
#: fx.json:gverb:opts:pre_amp:description fx.json:hpf:opts:pre_amp:description
#: fx.json:ixi_techno:opts:pre_amp:description
#: fx.json:krush:opts:pre_amp:description fx.json:lpf:opts:pre_amp:description
#: fx.json:mono:opts:pre_amp:description fx.json:nbpf:opts:pre_amp:description
#: fx.json:nhpf:opts:pre_amp:description fx.json:nlpf:opts:pre_amp:description
#: fx.json:normaliser:opts:pre_amp:description
#: fx.json:nrbpf:opts:pre_amp:description
#: fx.json:nrhpf:opts:pre_amp:description
#: fx.json:nrlpf:opts:pre_amp:description
#: fx.json:octaver:opts:pre_amp:description
#: fx.json:pan:opts:pre_amp:description
#: fx.json:panslicer:opts:pre_amp:description
#: fx.json:ping_pong:opts:pre_amp:description
#: fx.json:pitch_shift:opts:pre_amp:description
#: fx.json:rbpf:opts:pre_amp:description
#: fx.json:record:opts:pre_amp:description
#: fx.json:reverb:opts:pre_amp:description
#: fx.json:rhpf:opts:pre_amp:description
#: fx.json:ring_mod:opts:pre_amp:description
#: fx.json:rlpf:opts:pre_amp:description
#: fx.json:slicer:opts:pre_amp:description
#: fx.json:sound_out:opts:pre_amp:description
#: fx.json:sound_out_stereo:opts:pre_amp:description
#: fx.json:tanh:opts:pre_amp:description
#: fx.json:tremolo:opts:pre_amp:description
#: fx.json:vowel:opts:pre_amp:description
#: fx.json:whammy:opts:pre_amp:description
#: fx.json:wobble:opts:pre_amp:description
msgid ""
"Amplification applied to the input signal immediately before it is passed to t"
"he FX."
msgstr ""

#: fx.json:autotuner:opts:pre_mix:description
#: fx.json:band_eq:opts:pre_mix:description
#: fx.json:bitcrusher:opts:pre_mix:description
#: fx.json:bpf:opts:pre_mix:description
#: fx.json:compressor:opts:pre_mix:description
#: fx.json:distortion:opts:pre_mix:description
#: fx.json:echo:opts:pre_mix:description fx.json:eq:opts:pre_mix:description
#: fx.json:flanger:opts:pre_mix:description
#: fx.json:gverb:opts:pre_mix:description fx.json:hpf:opts:pre_mix:description
#: fx.json:ixi_techno:opts:pre_mix:description
#: fx.json:krush:opts:pre_mix:description fx.json:lpf:opts:pre_mix:description
#: fx.json:mono:opts:pre_mix:description fx.json:nbpf:opts:pre_mix:description
#: fx.json:nhpf:opts:pre_mix:description fx.json:nlpf:opts:pre_mix:description
#: fx.json:normaliser:opts:pre_mix:description
#: fx.json:nrbpf:opts:pre_mix:description
#: fx.json:nrhpf:opts:pre_mix:description
#: fx.json:nrlpf:opts:pre_mix:description
#: fx.json:octaver:opts:pre_mix:description
#: fx.json:pan:opts:pre_mix:description
#: fx.json:panslicer:opts:pre_mix:description
#: fx.json:ping_pong:opts:pre_mix:description
#: fx.json:pitch_shift:opts:pre_mix:description
#: fx.json:rbpf:opts:pre_mix:description
#: fx.json:record:opts:pre_mix:description
#: fx.json:reverb:opts:pre_mix:description
#: fx.json:rhpf:opts:pre_mix:description
#: fx.json:ring_mod:opts:pre_mix:description
#: fx.json:rlpf:opts:pre_mix:description
#: fx.json:slicer:opts:pre_mix:description
#: fx.json:sound_out:opts:pre_mix:description
#: fx.json:sound_out_stereo:opts:pre_mix:description
#: fx.json:tanh:opts:pre_mix:description
#: fx.json:tremolo:opts:pre_mix:description
#: fx.json:vowel:opts:pre_mix:description
#: fx.json:whammy:opts:pre_mix:description
#: fx.json:wobble:opts:pre_mix:description
msgid ""
"The amount (percentage) of the original signal that is fed into the internal F"
"X system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely"
" bypassed unlike a mix: of 0 where the internal FX is still being fed the orig"
"inal signal but the output of the FX is ignored. The difference between the tw"
"o is subtle but important and is evident when the FX has a residual component "
"such as echo or reverb. When switching mix: from 0 to 1, the residual componen"
"t of the FX's output from previous audio is present in the output signal. With"
" pre_mix: there is no residual component of the previous audio in the output s"
"ignal."
msgstr ""

#: fx.json:band_eq:description
msgid "Attenuate or Boost a frequency band"
msgstr ""

#: fx.json:band_eq:opts:db:description
msgid ""
"Amount of boost or attenuation of the frequency band. A positive value boosts "
"frequencies in the band, a negative value attenuates them."
msgstr ""

#: fx.json:band_eq:opts:freq:description
msgid "Centre frequency of the band in MIDI."
msgstr ""

#: fx.json:band_eq:opts:res:description
msgid "Width of the band as a value between 0 and 1"
msgstr ""

#: fx.json:bitcrusher:description
msgid ""
"Creates lo-fi output by decimating and deconstructing the incoming audio by lo"
"wering both the sample rate and bit depth. The default sample rate for CD audi"
"o is 44100, so use values less than that for that crunchy chip-tune sound full"
" of artefacts and bitty distortion. Similarly, the default bit depth for CD au"
"dio is 16, so use values less than that for lo-fi sound."
msgstr ""

#: fx.json:bitcrusher:opts:bits:description
msgid ""
"The bit depth of the resampled audio. Lower bit depths make the audio sound gr"
"ainy and less defined. The highest bit depth is 16 (full quality) and the lowe"
"st is 1 (lowest quality)."
msgstr ""

#: fx.json:bitcrusher:opts:cutoff:description
#: fx.json:hpf:opts:cutoff:description fx.json:krush:opts:cutoff:description
#: fx.json:lpf:opts:cutoff:description fx.json:nhpf:opts:cutoff:description
#: fx.json:nlpf:opts:cutoff:description fx.json:nrhpf:opts:cutoff:description
#: fx.json:nrlpf:opts:cutoff:description fx.json:rhpf:opts:cutoff:description
#: fx.json:rlpf:opts:cutoff:description
#: synths.json:blade:opts:cutoff:description
#: synths.json:bnoise:opts:cutoff:description
#: synths.json:cnoise:opts:cutoff:description
#: synths.json:dark_ambience:opts:cutoff:description
#: synths.json:dpulse:opts:cutoff:description
#: synths.json:dsaw:opts:cutoff:description
#: synths.json:dtri:opts:cutoff:description
#: synths.json:fm:opts:cutoff:description
#: synths.json:gnoise:opts:cutoff:description
#: synths.json:growl:opts:cutoff:description
#: synths.json:hollow:opts:cutoff:description
#: synths.json:hoover:opts:cutoff:description
#: synths.json:mod_dsaw:opts:cutoff:description
#: synths.json:mod_fm:opts:cutoff:description
#: synths.json:mod_pulse:opts:cutoff:description
#: synths.json:mod_saw:opts:cutoff:description
#: synths.json:mod_sine:opts:cutoff:description
#: synths.json:mod_tri:opts:cutoff:description
#: synths.json:noise:opts:cutoff:description
#: synths.json:pnoise:opts:cutoff:description
#: synths.json:prophet:opts:cutoff:description
#: synths.json:pulse:opts:cutoff:description
#: synths.json:rodeo:opts:cutoff:description
#: synths.json:saw:opts:cutoff:description
#: synths.json:square:opts:cutoff:description
#: synths.json:subpulse:opts:cutoff:description
#: synths.json:supersaw:opts:cutoff:description
#: synths.json:tech_saws:opts:cutoff:description
#: synths.json:tri:opts:cutoff:description
#: synths.json:zawa:opts:cutoff:description
msgid ""
"MIDI note representing the highest frequencies allowed to be present in the so"
"und. A low value like 30 makes the sound round and dull, a high value like 100"
" makes the sound buzzy and crispy."
msgstr ""

#: fx.json:bitcrusher:opts:sample_rate:description
msgid ""
"The sample rate the audio will be resampled at. This represents the number of "
"times per second the audio is sampled. The higher the sample rate, the closer "
"to the original the sound will be, the lower the more low-fi it will sound. Th"
"e highest sample rate is 44100 (full quality) and the lowest is ~100 (extremel"
"y low quality). Try values in between such as 1000, 3000, 8000..."
msgstr ""

#: fx.json:bpf:description
msgid ""
"Combines low pass and high pass filters to only allow a 'band' of frequencies "
"through. If the band is very narrow (a low res value like 0.0001) then the BPF"
" will reduce the original sound, almost down to a single frequency (controlled"
" by the centre opt).\n"
"\n"
"  With higher values for res we can simulate other filters e.g. telephone line"
"s, by cutting off low and high frequencies.\n"
"\n"
"Use FX `:band_eq` with a negative db for the opposite effect - to attenuate a "
"given band of frequencies."
msgstr ""

#: fx.json:bpf:opts:centre:description fx.json:nbpf:opts:centre:description
#: fx.json:nrbpf:opts:centre:description fx.json:rbpf:opts:centre:description
msgid "Centre frequency for the filter as a MIDI note."
msgstr ""

#: fx.json:bpf:opts:res:description fx.json:ixi_techno:opts:res:description
#: fx.json:krush:opts:res:description fx.json:nbpf:opts:res:description
#: fx.json:nrbpf:opts:res:description fx.json:nrhpf:opts:res:description
#: fx.json:nrlpf:opts:res:description fx.json:rbpf:opts:res:description
#: fx.json:rhpf:opts:res:description fx.json:rlpf:opts:res:description
#: fx.json:wobble:opts:res:description synths.json:bnoise:opts:res:description
#: synths.json:cnoise:opts:res:description
#: synths.json:dark_ambience:opts:res:description
#: synths.json:gnoise:opts:res:description
#: synths.json:growl:opts:res:description
#: synths.json:hoover:opts:res:description
#: synths.json:noise:opts:res:description
#: synths.json:pnoise:opts:res:description
#: synths.json:prophet:opts:res:description
#: synths.json:supersaw:opts:res:description
#: synths.json:tb303:opts:res:description
#: synths.json:tech_saws:opts:res:description
#: synths.json:zawa:opts:res:description
msgid ""
"Filter resonance as a value between 0 and 1. Large amounts of resonance (a res"
": near 1) can create a whistling sound around the cutoff frequency. Smaller va"
"lues produce less resonance."
msgstr ""

#: fx.json:compressor:description
msgid ""
"Compresses the dynamic range of the incoming signal. Equivalent to automatical"
"ly turning the amp down when the signal gets too loud and then back up again w"
"hen it's quiet. Useful for ensuring the containing signal doesn't overwhelm ot"
"her aspects of the sound. Also a general purpose hard-knee dynamic range proce"
"ssor which can be tuned via the opts to both expand and compress the signal."
msgstr ""

#: fx.json:compressor:opts:clamp_time:description
msgid ""
"Time taken for the amplitude adjustments to kick in fully (in seconds). This i"
"s usually pretty small (not much more than 10 milliseconds). Also known as the"
" time of the attack phase"
msgstr ""

#: fx.json:compressor:opts:relax_time:description
msgid ""
"Time taken for the amplitude adjustments to be released. Usually a little long"
"er than clamp_time. If both times are too short, you can get some (possibly un"
"wanted) artefacts. Also known as the time of the release phase."
msgstr ""

#: fx.json:compressor:opts:slope_above:description
msgid ""
"Slope of the amplitude curve above the threshold. A value of 1 means that the "
"output of signals with amplitude above the threshold will be unaffected. Great"
"er values will magnify and smaller values will attenuate the signal."
msgstr ""

#: fx.json:compressor:opts:slope_below:description
msgid ""
"Slope of the amplitude curve below the threshold. A value of 1 means that the "
"output of signals with amplitude below the threshold will be unaffected. Great"
"er values will attenuate and smaller values will magnify the signal."
msgstr ""

#: fx.json:compressor:opts:threshold:description
msgid ""
"Threshold value determining the break point between slope_below and slope_abov"
"e."
msgstr ""

#: fx.json:distortion:description
msgid "Distorts the signal reducing clarity in favour of raw crunchy noise."
msgstr ""

#: fx.json:distortion:opts:distort:description
msgid "Amount of distortion to be applied (as a value between 0 and 1)"
msgstr ""

#: fx.json:echo:description
msgid ""
"Standard echo with variable phase duration (time between echoes) and decay (le"
"ngth of echo fade out). If you wish to have a phase duration longer than 2s, y"
"ou need to specify the longest phase duration you'd like with the arg max_phas"
"e. Be warned, echo FX with very long phases can consume a lot of memory and ta"
"ke longer to initialise."
msgstr ""

#: fx.json:echo:opts:decay:description
msgid "The time it takes for the echoes to fade away in beats."
msgstr ""

#: fx.json:echo:opts:max_phase:description
#: fx.json:ping_pong:opts:max_phase:description
msgid "The maximum phase duration in beats."
msgstr ""

#: fx.json:echo:opts:phase:description fx.json:ping_pong:opts:phase:description
msgid "The time between echoes in beats."
msgstr ""

#: fx.json:eq:description
msgid "Basic parametric EQ"
msgstr ""

#: fx.json:eq:opts:high:description
msgid ""
"Gain - boost or cut the centre frequency of the high part of the sound. The hi"
"gh shelf defines the characteristics of the treble of the eq FX. A value of 0 "
"will neither boost or cut the treble frequencies. A value of 1 will boost by 1"
"5 dB and a value of -1 will cut/attenuate by -15 dB."
msgstr ""

#: fx.json:eq:opts:high_note:description
msgid "Centre frequency of the high eq parameter in MIDI notes."
msgstr ""

#: fx.json:eq:opts:high_q:description
msgid ""
"The Q factor for the high eq parameter.\n"
"\n"
"The Q factor controls the width of frequencies that will be affected by the hi"
"gh parameter of this eq FX. A high Q factor gives a wide bandwidth affecting a"
" larger range of frequencies. A high Q factor will give a narrow bandwidth aff"
"ecting a much smaller range of frequencies.\n"
"\n"
"Here's a list of various Q factors and an approximate corresponding frequency "
"width:\n"
"\n"
"0.7     -> 2 octaves\n"
"1       -> 1 1/3 octaves\n"
"1.4     -> 1 octave\n"
"2.8     -> 1/2 octave\n"
"4.3     -> 1/3 octave\n"
"8.6     -> 1/6 octave\n"
"\n"
"A decent range of Q factors for naturally sounding boosts/cuts is 0.6 to 1.\n"
msgstr ""

#: fx.json:eq:opts:high_shelf:description
msgid ""
"Gain - boost or cut the centre frequency. The high shelf defines the character"
"istics of the highest part of the eq FX. A value of 0 will neither boost or cu"
"t the high_shelf frequencies. A value of 1 will boost by 15 dB and a value of "
"-1 will cut/attenuate by -15 dB."
msgstr ""

#: fx.json:eq:opts:high_shelf_note:description
msgid "Centre frequency of high shelf in MIDI notes."
msgstr ""

#: fx.json:eq:opts:high_shelf_slope:description
msgid ""
"High shelf boost/cut slope. When set to 1 (the default), the shelf slope is as"
" steep as it can be and remain monotonically increasing or decreasing gain wit"
"h frequency."
msgstr ""

#: fx.json:eq:opts:low:description
msgid ""
"Gain - boost or cut the centre frequency of the bass part of the sound. The lo"
"w shelf defines the characteristics of the bass of the eq FX. A value of 0 wil"
"l neither boost or cut the bass frequencies. A value of 1 will boost by 15 dB "
"and a value of -1 will cut/attenuate by -15 dB."
msgstr ""

#: fx.json:eq:opts:low_note:description
msgid "Centre frequency of the low eq parameter in MIDI notes."
msgstr ""

#: fx.json:eq:opts:low_q:description
msgid ""
"The Q factor for the low eq parameter.\n"
"\n"
"The Q factor controls the width of frequencies that will be affected by the lo"
"w parameter of this eq FX. A low Q factor gives a wide bandwidth affecting a l"
"arger range of frequencies. A high Q factor will give a narrow bandwidth affec"
"ting a much smaller range of frequencies.\n"
"\n"
"Here's a list of various Q factors and an approximate corresponding frequency "
"width:\n"
"\n"
"0.7     -> 2 octaves\n"
"1       -> 1 1/3 octaves\n"
"1.4     -> 1 octave\n"
"2.8     -> 1/2 octave\n"
"4.3     -> 1/3 octave\n"
"8.6     -> 1/6 octave\n"
"\n"
"A decent range of Q factors for naturally sounding boosts/cuts is 0.6 to 1.\n"
msgstr ""

#: fx.json:eq:opts:low_shelf:description
msgid ""
"Gain - boost or cut the centre frequency. The low shelf defines the characteri"
"stics of the lowest part of the eq FX. A value of 0 will neither boost or cut "
"the low_shelf frequencies. A value of 1 will boost by 15 dB and a value of -1 "
"will cut/attenuate by -15 dB."
msgstr ""

#: fx.json:eq:opts:low_shelf_note:description
msgid "Centre frequency of low shelf in MIDI notes."
msgstr ""

#: fx.json:eq:opts:low_shelf_slope:description
msgid ""
"Low shelf boost/cut slope. When set to 1 (the default), the shelf slope is as "
"steep as it can be and remain monotonically increasing or decreasing gain with"
" frequency."
msgstr ""

#: fx.json:eq:opts:mid:description
msgid ""
"Gain - boost or cut the centre frequency of the middle part of the sound. The "
"mid shelf defines the characteristics of the bass of the eq FX. A value of 0 w"
"ill neither boost or cut the bass frequencies. A value of 1 will boost by 15 d"
"B and a value of -1 will cut/attenuate by -15 dB."
msgstr ""

#: fx.json:eq:opts:mid_note:description
msgid "Centre frequency of the mid eq parameter in MIDI notes."
msgstr ""

#: fx.json:eq:opts:mid_q:description
msgid ""
"The Q factor for the mid eq parameter.\n"
"\n"
"The Q factor controls the width of frequencies that will be affected by the mi"
"d parameter of this eq FX. A mid Q factor gives a wide bandwidth affecting a l"
"arger range of frequencies. A high Q factor will give a narrow bandwidth affec"
"ting a much smaller range of frequencies.\n"
"\n"
"Here's a list of various Q factors and an approximate corresponding frequency "
"width:\n"
"\n"
"0.7     -> 2 octaves\n"
"1       -> 1 1/3 octaves\n"
"1.4     -> 1 octave\n"
"2.8     -> 1/2 octave\n"
"4.3     -> 1/3 octave\n"
"8.6     -> 1/6 octave\n"
"\n"
"A decent range of Q factors for naturally sounding boosts/cuts is 0.6 to 1.\n"
msgstr ""

#: fx.json:flanger:description
msgid ""
"Mix the incoming signal with a copy of itself which has a rate modulating fast"
"er and slower than the original. Creates a swirling/whooshing effect."
msgstr ""

#: fx.json:flanger:opts:decay:description
msgid "Flange decay time in ms"
msgstr ""

#: fx.json:flanger:opts:delay:description
msgid "Amount of delay time between original and flanged version of audio."
msgstr ""

#: fx.json:flanger:opts:depth:description
msgid "Flange depth - greater depths produce a more prominent effect."
msgstr ""

#: fx.json:flanger:opts:feedback:description
msgid "Amount of feedback."
msgstr ""

#: fx.json:flanger:opts:invert_flange:description
msgid "Invert flanger signal. 0=no inversion, 1=inverted signal."
msgstr ""

#: fx.json:flanger:opts:invert_wave:description
msgid ""
"Invert flanger control waveform (i.e. flip it on the y axis). 0=uninverted wav"
"e, 1=inverted wave."
msgstr ""

#: fx.json:flanger:opts:max_delay:description
msgid "Max delay time. Used to set internal buffer size."
msgstr ""

#: fx.json:flanger:opts:phase:description
msgid "Phase duration in beats of flanger modulation."
msgstr ""

#: fx.json:flanger:opts:phase_offset:description
#: fx.json:ixi_techno:opts:phase_offset:description
#: fx.json:tremolo:opts:phase_offset:description
#: fx.json:wobble:opts:phase_offset:description
#: synths.json:mod_dsaw:opts:mod_phase_offset:description
#: synths.json:mod_fm:opts:mod_phase_offset:description
#: synths.json:mod_pulse:opts:mod_phase_offset:description
#: synths.json:mod_saw:opts:mod_phase_offset:description
#: synths.json:mod_sine:opts:mod_phase_offset:description
#: synths.json:mod_tri:opts:mod_phase_offset:description
msgid "Initial modulation phase offset (a value between 0 and 1)."
msgstr ""

#: fx.json:flanger:opts:stereo_invert_wave:description
msgid ""
"Make the flanger control waveform in the left ear an inversion of the control "
"waveform in the right ear. 0=uninverted wave, 1=inverted wave. This happens af"
"ter the standard wave inversion with param :invert_wave."
msgstr ""

#: fx.json:flanger:opts:wave:description
msgid ""
"Wave type - 0 saw, 1 pulse, 2 triangle, 3 sine, 4 cubic. Different waves will "
"produce different flanging modulation effects."
msgstr ""

#: fx.json:gverb:description
msgid ""
"Make the incoming signal sound more spacious or distant as if it were played i"
"n a large room or cave. Similar to reverb but with a more spacious feel."
msgstr ""

#: fx.json:gverb:opts:damp:description
msgid ""
"High frequency rolloff. 0 is no damping (the reverb will ring out more) and 1 "
"dampens the reverb signal completely"
msgstr ""

#: fx.json:gverb:opts:dry:description
msgid ""
"Amount of original dry signal present in the effect. This is distinct from mix"
"."
msgstr ""

#: fx.json:gverb:opts:pre_damp:description
msgid ""
"High frequency rolloff of input signal. 0 is no damping (the reverb will ring "
"out more) and 1 dampens the reverb signal completely"
msgstr ""

#: fx.json:gverb:opts:ref_level:description
msgid "Reflection level"
msgstr ""

#: fx.json:gverb:opts:release:description
msgid "Time for reverberation to complete in seconds"
msgstr ""

#: fx.json:gverb:opts:room:description
msgid "The room size in squared metres"
msgstr ""

#: fx.json:gverb:opts:spread:description
msgid ""
"Stereo spread. Amount of stereo spread the reverb has over the left and right "
"channels. A value of 0 means no spread at all - left and right stereo values o"
"f the incoming signal are preserved. A value of 1 means full spread - the left"
" and right channels are fully mixed within the reverb - bleeding into each oth"
"er."
msgstr ""

#: fx.json:gverb:opts:tail_level:description
msgid "Tail level amount"
msgstr ""

#: fx.json:hpf:description
msgid ""
"Dampens the parts of the signal that are lower than the cutoff point (typicall"
"y the bass of the sound) and keeps the higher parts (typically the crunchy fiz"
"zy harmonic overtones). Choose a lower cutoff to keep more of the bass/mid and"
" a higher cutoff to make the sound more light and crispy."
msgstr ""

#: fx.json:ixi_techno:description
msgid ""
"Moving resonant low pass filter between min and max cutoffs. Great for sweepin"
"g effects across long synths or samples."
msgstr ""

#: fx.json:ixi_techno:opts:cutoff_max:description
#: fx.json:wobble:opts:cutoff_max:description
msgid ""
"Maximum (MIDI) note that filter will move to whilst wobbling. Choose a higher "
"note for a higher range of movement. Full range of movement is the distance be"
"tween cutoff_max and cutoff_min"
msgstr ""

#: fx.json:ixi_techno:opts:cutoff_min:description
#: fx.json:wobble:opts:cutoff_min:description
msgid ""
"Minimum (MIDI) note that filter will move to whilst wobbling. Choose a lower n"
"ote for a higher range of movement. Full range of movement is the distance bet"
"ween cutoff_max and cutoff_min"
msgstr ""

#: fx.json:ixi_techno:opts:phase:description
#: fx.json:wobble:opts:phase:description
msgid "The phase duration (in beats) for filter modulation cycles"
msgstr ""

#: fx.json:krush:description
msgid "Krush that sound!"
msgstr ""

#: fx.json:krush:opts:gain:description
msgid "Amount of crushing to serve"
msgstr ""

#: fx.json:level:description
msgid ""
"Amplitude modifier. All FX have their own amp built in, so it may be the case "
"that you don't specifically need an isolated amp FX. However, it is useful to "
"be able to control the overall amplitude of a number of running synths. All so"
"unds created in the FX block will have their amplitudes multipled by the amp l"
"evel of this FX. For example, use an amp of 0 to silence all internal synths."
msgstr ""

#: fx.json:lpf:description
msgid ""
"Dampens the parts of the signal that are higher than the cutoff point (typical"
"ly the crunchy fizzy harmonic overtones) and keeps the lower parts (typically "
"the bass/mid of the sound). Choose a higher cutoff to keep more of the high fr"
"equencies/treble of the sound and a lower cutoff to make the sound more dull a"
"nd only keep the bass."
msgstr ""

#: fx.json:mono:description
msgid ""
"Sum left and right channels. Useful with stereo samples that you need as a mon"
"o sound, or for use with panslicer."
msgstr ""

#: fx.json:mono:opts:pan:description fx.json:pan:opts:pan:description
#: synths.json:beep:opts:pan:description synths.json:blade:opts:pan:description
#: synths.json:bnoise:opts:pan:description
#: synths.json:chipbass:opts:pan:description
#: synths.json:chiplead:opts:pan:description
#: synths.json:chipnoise:opts:pan:description
#: synths.json:cnoise:opts:pan:description
#: synths.json:dark_ambience:opts:pan:description
#: synths.json:dpulse:opts:pan:description
#: synths.json:dsaw:opts:pan:description synths.json:dtri:opts:pan:description
#: synths.json:dull_bell:opts:pan:description
#: synths.json:fm:opts:pan:description synths.json:gnoise:opts:pan:description
#: synths.json:growl:opts:pan:description
#: synths.json:hollow:opts:pan:description
#: synths.json:hoover:opts:pan:description
#: synths.json:kalimba:opts:pan:description
#: synths.json:mod_dsaw:opts:pan:description
#: synths.json:mod_fm:opts:pan:description
#: synths.json:mod_pulse:opts:pan:description
#: synths.json:mod_saw:opts:pan:description
#: synths.json:mod_sine:opts:pan:description
#: synths.json:mod_tri:opts:pan:description
#: synths.json:noise:opts:pan:description
#: synths.json:piano:opts:pan:description
#: synths.json:pluck:opts:pan:description
#: synths.json:pnoise:opts:pan:description
#: synths.json:pretty_bell:opts:pan:description
#: synths.json:prophet:opts:pan:description
#: synths.json:pulse:opts:pan:description
#: synths.json:rodeo:opts:pan:description synths.json:saw:opts:pan:description
#: synths.json:sound_in:opts:pan:description
#: synths.json:sound_in_stereo:opts:pan:description
#: synths.json:square:opts:pan:description
#: synths.json:subpulse:opts:pan:description
#: synths.json:supersaw:opts:pan:description
#: synths.json:tb303:opts:pan:description
#: synths.json:tech_saws:opts:pan:description
#: synths.json:tri:opts:pan:description synths.json:zawa:opts:pan:description
msgid ""
"Position of sound in stereo. With headphones on, this means how much of the so"
"und is in the left ear, and how much is in the right ear. With a value of -1, "
"the sound is completely in the left ear, a value of 0 puts the sound equally i"
"n both ears and a value of 1 puts the sound in the right ear. Values in betwee"
"n -1 and 1 move the sound accordingly."
msgstr ""

#: fx.json:nbpf:description
msgid ""
"Like the Band Pass Filter but normalised. The normaliser is useful here as som"
"e volume is lost when filtering the original signal."
msgstr ""

#: fx.json:nhpf:description
msgid ""
"A high pass filter chained to a normaliser. Ensures that the signal is both fi"
"ltered by a standard high pass filter and then normalised to ensure the amplit"
"ude of the final output is constant. A high pass filter will reduce the amplit"
"ude of the resulting signal (as some of the sound has been filtered out) the n"
"ormaliser can compensate for this loss (although will also have the side effec"
"t of flattening all dynamics). See doc for hpf."
msgstr ""

#: fx.json:nlpf:description
msgid ""
"A low pass filter chained to a normaliser. Ensures that the signal is both fil"
"tered by a standard low pass filter and then normalised to ensure the amplitud"
"e of the final output is constant. A low pass filter will reduce the amplitude"
" of the resulting signal (as some of the sound has been filtered out) the norm"
"aliser can compensate for this loss (although will also have the side effect o"
"f flattening all dynamics). See doc for lpf."
msgstr ""

#: fx.json:normaliser:description
msgid ""
"Raise or lower amplitude of sound to a specified level. Evens out the amplitud"
"e of incoming sound across the frequency spectrum by flattening all dynamics."
msgstr ""

#: fx.json:normaliser:opts:level:description
msgid "The peak output amplitude level at which to normalise the input."
msgstr ""

#: fx.json:nrbpf:description
msgid ""
"Like the Band Pass Filter but normalised, with a resonance (slight volume boos"
"t) around the target frequency. This can produce an interesting whistling effe"
"ct, especially when used with larger values for the res opt.\n"
"\n"
"  The normaliser is useful here as some volume is lost when filtering the orig"
"inal signal."
msgstr ""

#: fx.json:nrhpf:description fx.json:rhpf:description
msgid ""
"Dampens the parts of the signal that are lower than the cutoff point (typicall"
"y the bass of the sound) and keeps the higher parts (typically the crunchy fiz"
"zy harmonic overtones). The resonant part of the resonant high pass filter emp"
"hasises/resonates the frequencies around the cutoff point. The amount of empha"
"sis is controlled by the res opt with a higher res resulting in greater resona"
"nce. High amounts of resonance (rq ~1) can create a whistling sound around the"
" cutoff frequency.\n"
"\n"
"  Choose a lower cutoff to keep more of the bass/mid and a higher cutoff to ma"
"ke the sound more light and crispy."
msgstr ""

#: fx.json:nrlpf:description fx.json:rlpf:description
msgid ""
"Dampens the parts of the signal that are higher than the cutoff point (typical"
"ly the crunchy fizzy harmonic overtones) and keeps the lower parts (typically "
"the bass/mid of the sound). The resonant part of the resonant low pass filter "
"emphasises/resonates the frequencies around the cutoff point. The amount of em"
"phasis is controlled by the res opt with a higher res resulting in greater res"
"onance. High amounts of resonance (rq ~1) can create a whistling sound around "
"the cutoff frequency.\n"
"\n"
"  Choose a higher cutoff to keep more of the high frequencies/treble of the so"
"und and a lower cutoff to make the sound more dull and only keep the bass."
msgstr ""

#: fx.json:octaver:description
msgid ""
"This effect adds three pitches based on the input sound. The first is the orig"
"inal sound transposed up an octave (super_amp), the second is the original sou"
"nd transposed down an octave (sub_amp) and the third is the original sound tra"
"nsposed down two octaves (subsub_amp).\n"
"\n"
"  The way the transpositions are done adds some distortion/fuzz, particularly "
"to the lower octaves, whilst the upper octave has a 'cheap' quality. This effe"
"ct is often used in guitar effects pedals but it can work with other sounds to"
"o. There's a great description of the science behind this on Wikipedia here: h"
"ttps://en.wikipedia.org/wiki/Octave_effect"
msgstr ""

#: fx.json:octaver:opts:sub_amp:description
msgid "Volume of the signal 1 octave below the input"
msgstr ""

#: fx.json:octaver:opts:subsub_amp:description
msgid "Volume of the signal 2 octaves below the input"
msgstr ""

#: fx.json:octaver:opts:super_amp:description
msgid "Volume of the signal 1 octave above the input"
msgstr ""

#: fx.json:pan:description
msgid ""
"Specify where in the stereo field the sound should be heard. A value of -1 for"
" pan will put the sound in the left speaker, a value of 1 will put the sound i"
"n the right speaker and values in between will shift the sound accordingly."
msgstr ""

#: fx.json:panslicer:description
msgid ""
"Slice the pan automatically from left to right. Behaves similarly to slicer an"
"d wobble FX but modifies stereo panning of sound in left and right speakers. D"
"efault slice wave form is square (hard slicing between left and right) however"
" other wave forms can be set with the `wave:` opt."
msgstr ""

#: fx.json:panslicer:opts:amp:description fx.json:slicer:opts:amp:description
msgid "The amplitude of the resulting effect."
msgstr ""

#: fx.json:panslicer:opts:invert_wave:description
#: fx.json:slicer:opts:invert_wave:description
#: fx.json:wobble:opts:invert_wave:description
msgid ""
"Invert control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inv"
"erted wave."
msgstr ""

#: fx.json:panslicer:opts:pan_max:description
msgid "Maximum pan value (+1 is the right speaker only)"
msgstr ""

#: fx.json:panslicer:opts:pan_min:description
msgid "Minimum pan value (-1 is the left speaker only)"
msgstr ""

#: fx.json:panslicer:opts:phase:description
#: fx.json:slicer:opts:phase:description
msgid "The phase duration (in beats) of the slices"
msgstr ""

#: fx.json:panslicer:opts:phase_offset:description
#: fx.json:slicer:opts:phase_offset:description
msgid "Initial phase offset."
msgstr ""

#: fx.json:panslicer:opts:prob_pos:description
#: fx.json:slicer:opts:prob_pos:description
msgid ""
"Position of the slicer that will be jumped to when the probability test passes"
" as a value between 0 and 1"
msgstr ""

#: fx.json:panslicer:opts:probability:description
#: fx.json:slicer:opts:probability:description
msgid ""
"Probability (as a value between 0 and 1) that a given slice will be replaced b"
"y the value of the  prob_pos opt (which defaults to 0, i.e. silence)"
msgstr ""

#: fx.json:panslicer:opts:pulse_width:description
#: fx.json:slicer:opts:pulse_width:description
#: synths.json:dpulse:opts:pulse_width:description
#: synths.json:mod_pulse:opts:pulse_width:description
#: synths.json:pulse:opts:pulse_width:description
#: synths.json:subpulse:opts:pulse_width:description
#: synths.json:tb303:opts:pulse_width:description
#: synths.json:tri:opts:pulse_width:description
#: synths.json:zawa:opts:pulse_width:description
msgid ""
"The width of the pulse wave as a value between 0 and 1. A width of 0.5 will pr"
"oduce a square wave. Different values will change the timbre of the sound. Onl"
"y valid if wave is type pulse."
msgstr ""

#: fx.json:panslicer:opts:seed:description fx.json:slicer:opts:seed:description
#: fx.json:wobble:opts:seed:description
msgid "Seed value for rand num generator used for probability test"
msgstr ""

#: fx.json:panslicer:opts:smooth:description
#: fx.json:slicer:opts:smooth:description
#: fx.json:wobble:opts:smooth:description
msgid ""
"Amount of time in seconds to transition from the current value to the next. Al"
"lows you to round off harsh edges in the slicer wave which may cause clicks."
msgstr ""

#: fx.json:panslicer:opts:smooth_down:description
#: fx.json:slicer:opts:smooth_down:description
#: fx.json:wobble:opts:smooth_down:description
msgid ""
"Amount of time in seconds to transition from the current value to the next onl"
"y when the value is going down. This smoothing happens before the main smooth "
"mechanism."
msgstr ""

#: fx.json:panslicer:opts:smooth_up:description
#: fx.json:slicer:opts:smooth_up:description
#: fx.json:wobble:opts:smooth_up:description
msgid ""
"Amount of time in seconds to transition from the current value to the next onl"
"y when the value is going up. This smoothing happens before the main smooth me"
"chanism."
msgstr ""

#: fx.json:panslicer:opts:wave:description fx.json:slicer:opts:wave:description
msgid "Control waveform used to modulate the amplitude. 0=saw, 1=pulse, 2=tri, 3=sine"
msgstr ""

#: fx.json:ping_pong:description
msgid ""
"Echo FX with each delayed echo swapping between left and right channels. Has v"
"ariable phase duration (time between echoes) and feedback (proportion of sound"
" fed into each echo). If you wish to have a phase duration longer than 1s, you"
" need to specify the longest phase duration you'd like with the arg max_phase."
" Be warned, `:ping_pong` FX with very long phases can consume a lot of memory "
"and take longer to initialise. Also, large values for feedback will cause the "
"echo to last for a very long time.\n"
"\n"
"Note: sliding the `phase:` opt with `phase_slide:` will also cause each echo d"
"uring the slide to change in pitch, in much the same way that a sample's pitch"
" changes when altering its rate."
msgstr ""

#: fx.json:ping_pong:opts:feedback:description
msgid "Proportion of sound fed into each successive echo from the previous one."
msgstr ""

#: fx.json:ping_pong:opts:pan_start:description
msgid ""
"Starting position of sound in the stereo field. With headphones on, this means"
" how much of the sound starts in the left ear, and how much starts in the righ"
"t ear. With a value of -1, the sound starts completely in the left ear, a valu"
"e of 0 starts the sound equally in both ears, and a value of 1 starts the soun"
"d completely in the right ear. Values in between -1 and 1 move the sound accor"
"dingly. Each echo will swap between left and right at the same distance away f"
"rom 0 (the centre) that this `pan_start:` opt is set to. For example, with a v"
"alue of -1, the sound starts completely in the left ear, and the echoes after "
"this will swap between fully right and fully left (1 and -1). With a value of "
"0, since the sound starts in the centre of the stereo field, each echo also st"
"ays in the centre, meaning the panning effect is cancelled out."
msgstr ""

#: fx.json:pitch_shift:description
msgid ""
"Changes the pitch of a signal without affecting tempo. Does this mainly throug"
"h the pitch parameter which takes a midi number to transpose by. You can also "
"play with the other params to produce some interesting textures and sounds."
msgstr ""

#: fx.json:pitch_shift:opts:pitch:description
#: lang.json:sample:opts:pitch:description
msgid ""
"Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is "
"down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -"
"72 (down 6 octaves). Decimal numbers can be used for fine tuning."
msgstr ""

#: fx.json:pitch_shift:opts:pitch_dis:description
msgid ""
"Pitch dispersion - how much random variation in pitch to add. Using a low valu"
"e like 0.001 can help to \"soften up\" the metallic sounds, especially on drum l"
"oops. To be really technical, pitch_dispersion is the maximum random deviation"
" of the pitch from the pitch ratio (which is set by the pitch param)"
msgstr ""

#: fx.json:pitch_shift:opts:time_dis:description
msgid ""
"Time dispersion - how much random delay before playing each grain (measured in"
" seconds). Again, low values here like 0.001 can help to soften up metallic so"
"unds introduced by the effect. Large values are also fun as they can make soun"
"dscapes and textures from the input, although you will most likely lose the rh"
"ythm of the original. NB - This won't have an effect if it's larger than windo"
"w_size."
msgstr ""

#: fx.json:pitch_shift:opts:window_size:description
msgid ""
"Pitch shift works by chopping the input into tiny slices, then playing these s"
"lices at a higher or lower rate. If we make the slices small enough and overla"
"p them, it sounds like the original sound with the pitch changed.\n"
"\n"
"  The window_size is the length of the slices and is measured in seconds. It n"
"eeds to be around 0.2 (200ms) or greater for pitched sounds like guitar or bas"
"s, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum"
" loops. You can experiment with this to get the best sound for your input."
msgstr ""

#: fx.json:rbpf:description
msgid ""
"Like the Band Pass Filter but with a resonance (slight volume boost) around th"
"e target frequency. This can produce an interesting whistling effect, especial"
"ly when used with larger values for the res opt."
msgstr ""

#: fx.json:record:description
msgid "Recorder!"
msgstr ""

#: fx.json:record:opts:buffer:description
msgid ""
"The buffer to record into. Must either be a buffer object, buffer name, list o"
"f buffer name and size or the buffer id as a number."
msgstr ""

#: fx.json:reverb:description
msgid ""
"Make the incoming signal sound more spacious or distant as if it were played i"
"n a large room or cave. Signal may also be dampened by reducing the amplitude "
"of the higher frequencies."
msgstr ""

#: fx.json:reverb:opts:damp:description
msgid ""
"High frequency dampening - a value between 0 (no dampening) and 1 (maximum dam"
"pening)"
msgstr ""

#: fx.json:reverb:opts:room:description
msgid "The room size - a value between 0 (no reverb) and 1 (maximum reverb)."
msgstr ""

#: fx.json:ring_mod:description
msgid ""
"Attack of the Daleks! Ring mod is a classic effect often used on soundtracks t"
"o evoke robots or aliens as it sounds hollow or metallic. We take a 'carrier' "
"signal (a sine wave controlled by the freq opt) and modulate its amplitude usi"
"ng the signal given inside the fx block. This produces a wide variety of sound"
"s - the best way to learn is to experiment!"
msgstr ""

#: fx.json:ring_mod:opts:freq:description
msgid "Frequency of the carrier signal (as a midi note)."
msgstr ""

#: fx.json:ring_mod:opts:mod_amp:description
msgid "Amplitude of the modulation"
msgstr ""

#: fx.json:slicer:description
msgid ""
"Modulates the amplitude of the input signal with a specific control wave and p"
"hase duration. With the default pulse wave, slices the signal in and out, with"
" the triangle wave, fades the signal in and out and with the saw wave, phases "
"the signal in and then dramatically out. Control wave may be inverted with the"
" arg invert_wave for more variety."
msgstr ""

#: fx.json:slicer:opts:amp_max:description
msgid "Maximum amplitude of the slicer"
msgstr ""

#: fx.json:slicer:opts:amp_min:description
msgid "Minimum amplitude of the slicer"
msgstr ""

#: fx.json:sound_out:description
msgid ""
"Outputs a mono signal to a soundcard output of your choice. By default will mi"
"x the incoming stereo signal (generated within the FX block) into a single mon"
"o channel. However, with the `mode:` opt, it is possible to alternatively send"
" either the incoming left or right channel out directly. "
msgstr ""

#: fx.json:sound_out:opts:mode:description
msgid ""
"Output mixing mode. 0 is a mixed-down mono version of the stereo input, 1 is t"
"he left channel only, 2 is the right channel only. "
msgstr ""

#: fx.json:sound_out:opts:output:description
msgid ""
"Sound card output to send audio to. Indexing starts at 1, so the third output "
"is output 3."
msgstr ""

#: fx.json:sound_out_stereo:description
msgid ""
"Outputs a two-channel stereo signal to two consecutive soundcard outputs of yo"
"ur choice. By default will route the left and right channels of the incoming s"
"tereo signal (generated within the FX block) into separate left and right outp"
"ut channels. However, with the `mode:` opt, it is possible to alternatively cr"
"oss over the channels or mix the incoming stereo channels into a single mono o"
"utput and duplicate that on both left and right output channels. "
msgstr ""

#: fx.json:sound_out_stereo:opts:mode:description
msgid ""
"Output mixing mode. Mode 0 is standard - left audio on the first channel, righ"
"t on the second. Mode 1 is inverse - right audio on the first channel, left on"
" the second. Mode 2 is mono - a mixed mono version of both channels is sent to"
" both audio outputs."
msgstr ""

#: fx.json:sound_out_stereo:opts:output:description
msgid ""
"First of two consecutive sound card outputs to send audio to. Indexing starts "
"at 1 and two outputs are used. Therefore an output of 2 will send audio to bot"
"h outputs 2 and 3 "
msgstr ""

#: fx.json:tanh:description
msgid ""
"Forces all audio through a hyperbolic tangent function which has the effect of"
" acting like distorted limiter. It works by folding loud signals back in on it"
"self. The louder the input signal, the more folding occurs - resulting in incr"
"eased strange harmonics and distortion. This folding also has the effect of li"
"miting the outgoing signal, therefore to increase the output amplitude use the"
" `amp:` opt and to increase the folding/distortion use the `pre_amp:` opt. "
msgstr ""

#: fx.json:tanh:opts:krunch:description
msgid ""
"Higher values progressively destroy the sound. Achieved through a balanced man"
"ipulation of pre_amp and amp such that the tanh is pushed harder with higher k"
"runch values yet the overall amplitude stays similar."
msgstr ""

#: fx.json:tremolo:description
msgid "Modulate the volume of the sound."
msgstr ""

#: fx.json:tremolo:opts:depth:description
msgid "Tremolo depth - greater depths produce a more prominent effect."
msgstr ""

#: fx.json:tremolo:opts:invert_wave:description
msgid ""
"Invert tremolo control waveform (i.e. flip it on the y axis). 0=uninverted wav"
"e, 1=inverted wave."
msgstr ""

#: fx.json:tremolo:opts:phase:description
msgid "Phase duration in beats of tremolo modulation."
msgstr ""

#: fx.json:tremolo:opts:wave:description
msgid ""
"Wave type - 0 saw, 1 pulse, 2 triangle, 3 sine, 4 cubic. Different waves will "
"produce different tremolo modulation effects."
msgstr ""

#: fx.json:vowel:description
msgid ""
"This effect filters the input to match a human voice singing a certain vowel s"
"ound. Human singing voice sounds are easily achieved with a source of a saw wa"
"ve with a little vibrato."
msgstr ""

#: fx.json:vowel:opts:voice:description
msgid "0,1,2,3,4 => Soprano,Alto,Counter Tenor, Tenor, Bass"
msgstr ""

#: fx.json:vowel:opts:vowel_sound:description
msgid "1,2,3,4,5 => A,E,I,O,U"
msgstr ""

#: fx.json:whammy:description
msgid ""
"A cheap sounding transposition effect, with a slightly robotic edge. Good for "
"adding alien sounds and harmonies to everything from beeps to guitar samples. "
"It's similar to pitch shift although not as smooth sounding."
msgstr ""

#: fx.json:whammy:opts:deltime:description
msgid "The delay time to be used for the effect. This shouldn't need to be adjusted."
msgstr ""

#: fx.json:whammy:opts:grainsize:description
msgid ""
"The size of the initial grain used for transposition. This shouldn't need to b"
"e adjusted."
msgstr ""

#: fx.json:whammy:opts:max_delay_time:description
msgid ""
"The max delay time to be used for the effect. This shouldn't need to be adjust"
"ed."
msgstr ""

#: fx.json:whammy:opts:transpose:description
msgid "This is how much to transpose the input, expressed as a midi pitch."
msgstr ""

#: fx.json:wobble:description
msgid ""
"Versatile wobble FX. Will repeatedly modulate a range of filters (rlpf, rhpf) "
"between two cutoff values using a range of control wave forms (saw, pulse, tri"
", sine). You may alter the phase duration of the wobble, and the resonance of "
"the filter. Combines well with the dsaw synth for crazy dub wobbles. Cutoff va"
"lue is at cutoff_min at the start of phase"
msgstr ""

#: fx.json:wobble:opts:filter:description
msgid ""
"Filter used for wobble effect. Use 0 for a resonant low pass filter or 1 for a"
" resonant high pass filter"
msgstr ""

#: fx.json:wobble:opts:prob_pos:description
msgid ""
"Position of the wobble that will be jumped to when the probability test passes"
" as a value between 0 and 1"
msgstr ""

#: fx.json:wobble:opts:probability:description
msgid ""
"Probability (as a value between 0 and 1) that a given wobble will be replaced "
"by the value of the  prob_pos opt (which defaults to 0, i.e. min_cutoff)"
msgstr ""

#: fx.json:wobble:opts:pulse_width:description
msgid "Only valid if wave is type pulse."
msgstr ""

#: fx.json:wobble:opts:wave:description
msgid ""
"Wave shape of wobble. Use 0 for saw wave, 1 for pulse, 2 for triangle wave and"
" 3 for a sine wave."
msgstr ""

#: lang.json:_types:Exception
msgid "Exception"
msgstr ""

#: lang.json:_types:anything lang.json:_types:anything
#: lang.json:_types:anything lang.json:_types:anything
#: lang.json:_types:anything lang.json:_types:anything
#: lang.json:_types:anything lang.json:_types:anything
#: lang.json:_types:anything lang.json:_types:anything
#: lang.json:_types:anything lang.json:_types:anything
#: lang.json:_types:anything
msgid "anything"
msgstr ""

#: lang.json:_types:arguments
msgid "arguments"
msgstr ""

#: lang.json:_types:array lang.json:_types:array lang.json:_types:array
#: lang.json:_types:array lang.json:_types:array lang.json:_types:array
#: lang.json:_types:array lang.json:_types:array lang.json:_types:array
msgid "array"
msgstr ""

#: lang.json:_types:beats lang.json:_types:beats
msgid "beats"
msgstr ""

#: lang.json:_types:boolean lang.json:_types:boolean lang.json:_types:boolean
#: lang.json:_types:boolean lang.json:_types:boolean lang.json:_types:boolean
#: lang.json:_types:boolean lang.json:_types:boolean lang.json:_types:boolean
#: lang.json:_types:boolean lang.json:_types:boolean
msgid "boolean"
msgstr ""

#: lang.json:_types:default lang.json:_types:default
msgid "default"
msgstr ""

#: lang.json:_types:density
msgid "density"
msgstr ""

#: lang.json:_types:duration
msgid "duration"
msgstr ""

#: lang.json:_types:float01
msgid "float01"
msgstr ""

#: lang.json:_types:int lang.json:_types:int
msgid "int"
msgstr ""

#: lang.json:_types:list lang.json:_types:list lang.json:_types:list
#: lang.json:_types:list lang.json:_types:list lang.json:_types:list
#: lang.json:_types:list lang.json:_types:list
msgid "list"
msgstr ""

#: lang.json:_types:list_or_number
msgid "list_or_number"
msgstr ""

#: lang.json:_types:midi lang.json:_types:midi lang.json:_types:midi
#: lang.json:_types:midi lang.json:_types:midi lang.json:_types:midi
#: lang.json:_types:midi lang.json:_types:midi lang.json:_types:midi
#: lang.json:_types:midi
msgid "midi"
msgstr ""

#: lang.json:_types:midi_number
msgid "midi_number"
msgstr ""

#: lang.json:_types:mode_keyword
msgid "mode_keyword"
msgstr ""

#: lang.json:_types:name
msgid "name"
msgstr ""

#: lang.json:_types:note lang.json:_types:note lang.json:_types:note
msgid "note"
msgstr ""

#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
#: lang.json:_types:number lang.json:_types:number lang.json:_types:number
msgid "number"
msgstr ""

#: lang.json:_types:number_or_nil
msgid "number_or_nil"
msgstr ""

#: lang.json:_types:number_or_range lang.json:_types:number_or_range
#: lang.json:_types:number_or_range lang.json:_types:number_or_range
msgid "number_or_range"
msgstr ""

#: lang.json:_types:number_or_symbol
msgid "number_or_symbol"
msgstr ""

#: lang.json:_types:number_symbol_or_map
msgid "number_symbol_or_map"
msgstr ""

#: lang.json:_types:osc_path
msgid "osc_path"
msgstr ""

#: lang.json:_types:path lang.json:_types:path
msgid "path"
msgstr ""

#: lang.json:_types:pos_int
msgid "pos_int"
msgstr ""

#: lang.json:_types:positive_number
msgid "positive_number"
msgstr ""

#: lang.json:_types:sample_name_or_duration
#: lang.json:_types:sample_name_or_duration
msgid "sample_name_or_duration"
msgstr ""

#: lang.json:_types:source_and_filter_types
msgid "source_and_filter_types"
msgstr ""

#: lang.json:_types:string lang.json:_types:string lang.json:_types:string
#: lang.json:_types:string lang.json:_types:string lang.json:_types:string
#: lang.json:_types:string lang.json:_types:string lang.json:_types:string
#: lang.json:_types:string lang.json:_types:string lang.json:_types:string
#: lang.json:_types:string lang.json:_types:string
msgid "string"
msgstr ""

#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
#: lang.json:_types:symbol lang.json:_types:symbol lang.json:_types:symbol
msgid "symbol"
msgstr ""

#: lang.json:_types:symbol_or_number lang.json:_types:symbol_or_number
#: lang.json:_types:symbol_or_number lang.json:_types:symbol_or_number
#: lang.json:_types:symbol_or_number lang.json:_types:symbol_or_number
#: lang.json:_types:symbol_or_number lang.json:_types:symbol_or_number
#: lang.json:_types:symbol_or_number lang.json:_types:symbol_or_number
#: lang.json:_types:symbol_or_number
msgid "symbol_or_number"
msgstr ""

#: lang.json:_types:symbol_or_string
msgid "symbol_or_string"
msgstr ""

#: lang.json:_types:synth_node lang.json:_types:synth_node
msgid "synth_node"
msgstr ""

#: lang.json:_types:true_or_false lang.json:_types:true_or_false
msgid "true_or_false"
msgstr ""

#: lang.json:_types:truthy
msgid "truthy"
msgstr ""

#: lang.json:all_sample_names:description
msgid "Return a list of all the sample names available"
msgstr ""

#: lang.json:all_sample_names:summary
msgid "Get all sample names"
msgstr ""

#: lang.json:assert:description
msgid "Raises an exception if the argument is either nil or false."
msgstr ""

#: lang.json:assert:examples:0:comments
msgid ""
"# Simple assertions\n"
"# As true is neither nil or false, this assertion passes\n"
"# Similarly, 1 passes\n"
"# As do string\n"
"# This will raise an exception\n"
msgstr ""

#: lang.json:assert:examples:1:comments
#: lang.json:assert_not:examples:1:comments
msgid ""
"# Communicating error messages\n"
"# This will raise an exception containing the message \"oops\"\n"
msgstr ""

#: lang.json:assert:examples:2:comments
#: lang.json:assert_equal:examples:1:comments
msgid ""
"# More interesting assertions\n"
"# Ensure that arithmetic is sane!\n"
"# ensure lists can be correctly counted\n"
msgstr ""

#: lang.json:assert:summary
msgid "Ensure arg is valid"
msgstr ""

#: lang.json:assert_equal:description
msgid "Raises an exception if both arguments aren't equal. "
msgstr ""

#: lang.json:assert_equal:examples:0:comments
msgid ""
"# Simple assertions\n"
" \n"
msgstr ""

#: lang.json:assert_equal:examples:2:comments
#: lang.json:assert_not_equal:examples:1:comments
msgid ""
"# Add messages to the exceptions\n"
" \n"
msgstr ""

#: lang.json:assert_equal:summary
msgid "Ensure args are equal"
msgstr ""

#: lang.json:assert_error:description
msgid ""
"Runs the block and ensures that it raises the correct Exception. Useful for as"
"serting that an Exception will be raised. You may specify the particular Excep"
"tion class, which defaults to `Exception`."
msgstr ""

#: lang.json:assert_error:examples:0:comments
msgid ""
" \n"
" \n"
"# Will throw an exception: \"Assert error failed!\" as the block\n"
"# contains no errors.\n"
msgstr ""

#: lang.json:assert_error:examples:1:comments
msgid ""
" \n"
" \n"
"# Will not throw an exception as the block contains an error.\n"
msgstr ""

#: lang.json:assert_error:examples:2:comments
msgid ""
" \n"
" \n"
"# Will not throw an exception as the block contains a ZeroDivisionError.\n"
msgstr ""

#: lang.json:assert_error:examples:3:comments
msgid ""
" \n"
" \n"
"# Will throw an exception as the block contains a ZeroDivisionError rather tha"
"n\n"
"# a ThreadError.\n"
msgstr ""

#: lang.json:assert_error:summary
msgid "Ensure block throws an error"
msgstr ""

#: lang.json:assert_not:description
msgid "Raises an exception if the argument is not either nil or false."
msgstr ""

#: lang.json:assert_not:examples:0:comments
msgid ""
"# Simple assertions\n"
"# As false is either nil or false, this assertion passes\n"
"# As nil is either nil or false, this assertion passes\n"
"# These numbers are not equal\n"
"# This will raise an exception\n"
msgstr ""

#: lang.json:assert_not:summary
msgid "Ensure arg is not valid"
msgstr ""

#: lang.json:assert_not_equal:description
msgid "Raises an exception if both arguments are qual. "
msgstr ""

#: lang.json:assert_not_equal:examples:0:comments
msgid ""
"# Simple assertions\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:assert_not_equal:summary
msgid "Ensure args are not equal"
msgstr ""

#: lang.json:assert_similar:description
msgid ""
"Raises an exception if both arguments aren't similar.\n"
"\n"
"Currently similarity is only defined for numbers - all other types are compare"
"d for equality with assert_equal.\n"
"\n"
"Useful for testing in cases where floating point imprecision stops you from be"
"ing able to use `assert_equal`. "
msgstr ""

#: lang.json:assert_similar:examples:0:comments
msgid ""
"# Simple assertions\n"
"#=> True\n"
msgstr ""

#: lang.json:assert_similar:examples:1:comments
msgid ""
"# Handles floating point imprecision\n"
"#=> True\n"
msgstr ""

#: lang.json:assert_similar:summary
msgid "Ensure args are similar"
msgstr ""

#: lang.json:at:description
msgid ""
"Given a list of times, run the block once after waiting each given time. If pa"
"ssed an optional params list, will pass each param individually to each block "
"call. If size of params list is smaller than the times list, the param values "
"will act as rings (rotate through). If the block is given 1 arg, the times are"
" fed through. If the block is given 2 args, both the times and the params are "
"fed through. A third block arg will receive the index of the time.\n"
"\n"
"Note, all code within the block is executed in its own thread. Therefore despi"
"te inheriting all thread locals such as the random stream and ticks, modificat"
"ions will be isolated to the block and will not affect external code.\n"
"\n"
"`at` is just-in-time scheduling using multiple isolated threads. See `time_war"
"p` for ahead-of-time scheduling within the current thread."
msgstr ""

#: lang.json:at:examples:0:comments
msgid ""
" \n"
"# play sample after waiting for 4 beats\n"
" \n"
msgstr ""

#: lang.json:at:examples:1:comments lang.json:time_warp:examples:6:comments
msgid ""
"# plays a note after waiting 1 beat,\n"
"# then after 1 more beat,\n"
"# then after 2 more beats (4 beats total)\n"
msgstr ""

#: lang.json:at:examples:2:comments lang.json:time_warp:examples:7:comments
msgid ""
"# plays 3 different notes\n"
" \n"
" \n"
msgstr ""

#: lang.json:at:examples:3:comments lang.json:time_warp:examples:8:comments
msgid ""
" \n"
"# alternate soft and loud\n"
"# cymbal hits three times\n"
" \n"
msgstr ""

#: lang.json:at:examples:4:comments lang.json:time_warp:examples:9:comments
msgid ""
"# when no params are given to at, the times are fed through to the block\n"
"#=> prints 0, 1, then 2\n"
" \n"
msgstr ""

#: lang.json:at:examples:5:comments
msgid ""
"#If you specify the block with 2 args, it will pass through both the time and "
"the param\n"
"#=> prints out [0, :a], [1, :b], then [2, :a]\n"
" \n"
msgstr ""

#: lang.json:at:examples:6:comments
msgid ""
"#If you specify the block with 2 args, and no param list to at, it will pass t"
"hrough both the time and the index\n"
"#=> prints out [0, 0], [0.5, 1], then [2, 2]\n"
" \n"
msgstr ""

#: lang.json:at:examples:7:comments
msgid ""
"#If you specify the block with 3 args, it will pass through the time, the para"
"m and the index\n"
"#=> prints out [0, :a, 0], [0.5, :b, 1], then [2, :a, 2]\n"
" \n"
msgstr ""

#: lang.json:at:examples:8:comments
msgid ""
"# at does not consume & interfere with the outer random stream\n"
"# 0.75006103515625\n"
" \n"
"# the random stream inside the at block is separate and\n"
"# isolated from the outer stream.\n"
"# 0.9287109375\n"
"# 0.1043701171875\n"
" \n"
" \n"
"# value is still 0.75006103515625\n"
msgstr ""

#: lang.json:at:examples:9:comments
msgid ""
"# Each block run within at has its own isolated random stream:\n"
" \n"
"# first time round (after 1 beat) prints:\n"
"# 0.9287109375\n"
"# 0.1043701171875\n"
" \n"
"# second time round (after 2 beats) prints:\n"
"# 0.1043701171875\n"
"# 0.764617919921875\n"
msgstr ""

#: lang.json:at:summary
msgid "Asynchronous Time. Run a block at the given time(s)"
msgstr ""

#: lang.json:beat:description
msgid ""
"Returns the beat value for the current thread/live_loop. Beats are advanced on"
"ly by calls to `sleep` and `sync`. Beats are distinct from virtual time (the v"
"alue obtained by calling `vt`) in that it has no notion of rate. It is just es"
"sentially a counter for sleeps. After a `sync`, the beat is overridden with th"
"e beat value from the thread which called `cue`. "
msgstr ""

#: lang.json:beat:examples:0:comments
msgid ""
"# The current BPM makes no difference\n"
"#=> 0\n"
" \n"
"#=> 1\n"
" \n"
" \n"
"#=> 3\n"
msgstr ""

#: lang.json:beat:summary
msgid "Get current beat"
msgstr ""

#: lang.json:block_duration:description
msgid ""
"Given a block, runs it and returns the amount of time that has passed. This ti"
"me is in seconds and is not scaled to the current BPM. Any threads spawned in "
"the block are not accounted for."
msgstr ""

#: lang.json:block_duration:examples:0:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
"#=> Returns 3 as 3 seconds have passed within the block\n"
msgstr ""

#: lang.json:block_duration:examples:1:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
"#=> Returns 1.5 as 1.5 seconds have passed within the block\n"
"#   (due to the BPM being 120)\n"
msgstr ""

#: lang.json:block_duration:summary
msgid "Return block duration"
msgstr ""

#: lang.json:block_slept?:description
msgid ""
"Given a block, runs it and returns whether or not the block contained sleeps o"
"r syncs"
msgstr ""

#: lang.json:block_slept?:examples:0:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
"#=> Returns true as there were sleeps in the block\n"
msgstr ""

#: lang.json:block_slept?:examples:1:comments
msgid ""
" \n"
" \n"
"# trigger a cue on a different thread\n"
" \n"
" \n"
"# wait for the cue before playing the note\n"
" \n"
" \n"
"#=> Returns true as the block contained a sync.\n"
msgstr ""

#: lang.json:block_slept?:examples:2:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
"#=> Returns false as there were no sleeps in the block\n"
msgstr ""

#: lang.json:block_slept?:summary
msgid "Determine if block contains sleep time"
msgstr ""

#: lang.json:bools:description
msgid ""
"Create a new ring of booleans values from 1s and 0s, which can be easier to wr"
"ite and manipulate in a live setting."
msgstr ""

#: lang.json:bools:examples:0:comments
msgid ""
"#=> (ring true, false)\n"
msgstr ""

#: lang.json:bools:examples:1:comments
msgid ""
"#=> (ring true, false, true, false, false)\n"
msgstr ""

#: lang.json:bools:summary
msgid "Create a ring of boolean values"
msgstr ""

#: lang.json:bt:description
msgid ""
"Beat time representation. Scales the time to the current BPM. Useful for addin"
"g bpm scaling"
msgstr ""

#: lang.json:bt:examples:0:comments
msgid ""
"# Set the BPM to be double the default\n"
"# 0.5\n"
"# BPM is now default\n"
"# 1\n"
"# BPM is now half the default\n"
"# 2\n"
msgstr ""

#: lang.json:bt:summary
msgid "Beat time conversion"
msgstr ""

#: lang.json:buffer:description
msgid ""
"Initialise or return a named buffer with a specific duration (defaults to 8 be"
"ats). Useful for working with the `:record` FX. If the buffer is requested wit"
"h a different duration, then a new buffer will be initialised and the old one "
"recycled."
msgstr ""

#: lang.json:buffer:examples:0:comments
msgid ""
"# load a 8s buffer and name it :foo\n"
"# return cached buffer and bind it to b\n"
"#=> 8.0\n"
msgstr ""

#: lang.json:buffer:examples:1:comments
msgid ""
"# load a 16s buffer and name it :foo\n"
msgstr ""

#: lang.json:buffer:examples:2:comments
msgid ""
" \n"
"# load a 8s buffer and name it :foo\n"
"# (this isn't 16s as the BPM has been\n"
"# doubled from the default of 60)\n"
msgstr ""

#: lang.json:buffer:examples:3:comments
msgid ""
"# init a 8s buffer and name it :foo\n"
"# return cached 8s buffer (has the same duration)\n"
"# init a new 10s buffer and name it :foo\n"
"# return cached 10s buffer\n"
"# init a 8s buffer and name it :foo\n"
"# return cached 8s buffer (has the same duration)\n"
msgstr ""

#: lang.json:buffer:summary
msgid "Initialise or return named buffer"
msgstr ""

#: lang.json:choose:description
msgid ""
"Choose an element at random from a list (array).\n"
"\n"
"If no arguments are given, will return a lambda function which when called tak"
"es an argument which will be a list to be chosen from. This is useful for choo"
"sing random `onset:` vals for samples\n"
"\n"
"Always returns a single element (or nil)"
msgstr ""

#: lang.json:choose:examples:0:comments
msgid ""
" \n"
"#=> plays one of 60, 64 or 67 at random\n"
" \n"
"#=> You can also call .choose on the list\n"
" \n"
" \n"
msgstr ""

#: lang.json:choose:examples:1:comments
msgid ""
"# Using choose for random sample onsets\n"
" \n"
"# choose a random onset value each time\n"
" \n"
" \n"
msgstr ""

#: lang.json:choose:summary
msgid "Random list selection"
msgstr ""

#: lang.json:chord:description
msgid ""
"Creates an immutable ring of Midi note numbers when given a tonic note and a c"
"hord type. If only passed a chord type, will default the tonic to 0. See examp"
"les."
msgstr ""

#: lang.json:chord:examples:0:comments
msgid ""
"# returns a ring of midi notes - (ring 64, 67, 71)\n"
msgstr ""

#: lang.json:chord:examples:1:comments
msgid ""
"# Play all the notes together\n"
" \n"
msgstr ""

#: lang.json:chord:examples:2:comments
msgid ""
"# Chord inversions (see the fn chord_invert)\n"
"# Play the basic :e3, :minor chord - (ring 52, 55, 59)\n"
"# Play the first inversion of :e3, :minor - (ring 55, 59, 64)\n"
"# Play the first inversion of :e3, :minor - (ring 59, 64, 67)\n"
msgstr ""

#: lang.json:chord:examples:3:comments
msgid ""
"# You can create a chord without a tonic:\n"
"#=> (ring 0, 3, 7)\n"
msgstr ""

#: lang.json:chord:examples:4:comments
msgid ""
"# chords are great for arpeggiators\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:chord:examples:5:comments
msgid ""
"# Sonic Pi supports a large range of chords\n"
"# Notice that the more exotic ones have to be surrounded by ' quotes\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:chord:opts:invert:description
#: lang.json:chord_degree:opts:invert:description
msgid "Apply the specified num inversions to chord. See the fn `chord_invert`."
msgstr ""

#: lang.json:chord:opts:num_octaves:description
msgid "Create an arpeggio of the chord over n octaves"
msgstr ""

#: lang.json:chord:summary
msgid "Create chord"
msgstr ""

#: lang.json:chord_degree:description
msgid ""
"In music we build chords from scales. For example, a C major chord is made by "
"taking the 1st, 3rd and 5th notes of the C major scale (C, E and G). If you do"
" this on a piano you might notice that you play one, skip one, play one, skip "
"one etc. If we use the same spacing and start from the second note in C major "
"(which is a D), we get a D minor chord which is the 2nd, 4th and 6th notes in "
"C major (D, F and A). We can move this pattern all the way up or down the scal"
"e to get different types of chords. `chord_degree` is a helper method that ret"
"urns a ring of midi note numbers when given a degree (starting point in a scal"
"e) which is a symbol `:i`, `:ii`, `:iii`, `:iv`, `:v`, `:vi`, `:vii` or a numb"
"er `1`-`7`. The second argument is the tonic note of the scale, the third argu"
"ment is the scale type and finally the fourth argument is number of notes to s"
"tack up in the chord. If we choose 4 notes from degree `:i` of the C major sca"
"le, we take the 1st, 3rd, 5th and 7th notes of the scale to get a C major 7 ch"
"ord."
msgstr ""

#: lang.json:chord_degree:examples:0:comments
msgid ""
"# returns a ring of midi notes - (ring 57, 61, 64, 68) - an A major 7 chord\n"
msgstr ""

#: lang.json:chord_degree:examples:1:comments
#: lang.json:play_chord:examples:2:comments
#: lang.json:sample_buffer:examples:0:comments
#: lang.json:sample_info:examples:0:comments
#: lang.json:sync_bpm:examples:0:comments
msgid ""
" \n"
msgstr ""

#: lang.json:chord_degree:examples:2:comments
msgid ""
"# Chord ii in A major is a B minor chord\n"
msgstr ""

#: lang.json:chord_degree:examples:3:comments
msgid ""
"# Chord iii in A major is a C# minor chord\n"
msgstr ""

#: lang.json:chord_degree:examples:4:comments
msgid ""
"# Chord iv in A major is a D major chord\n"
msgstr ""

#: lang.json:chord_degree:examples:5:comments
msgid ""
"# Taking four notes is the default. This gives us 7th chords - here it plays a"
" C major 7\n"
msgstr ""

#: lang.json:chord_degree:examples:6:comments
msgid ""
"# Taking five notes gives us 9th chords - here it plays a C major 9 chord\n"
msgstr ""

#: lang.json:chord_degree:examples:7:comments
msgid ""
"# Play the first inversion of chord i in C major - (ring 64, 67, 72)\n"
msgstr ""

#: lang.json:chord_degree:summary
msgid "Construct chords of stacked thirds, based on scale degrees"
msgstr ""

#: lang.json:chord_invert:description
msgid ""
"Given a set of notes, apply a number of inversions indicated by the `shift` pa"
"rameter. Inversions being an increase to notes if `shift` is positive or decre"
"asing the notes if `shift` is negative.\n"
"\n"
"An inversion is simply rotating the chord and shifting the wrapped notes up or"
" down an octave. For example, consider the chord :e3, :minor - `(ring 52, 55, "
"59)`. When we invert it once, we rotate the notes around to `(ring 55, 59, 52)"
"`. However, because note 52 is wrapped round, it's shifted up an octave (12 se"
"mitones) so the actual first inversion of the chord :e3, :minor is `(ring 55, "
"59, 52 + 12)` or `(ring 55, 59, 64)`.\n"
"\n"
"Note that it's also possible to directly invert chords on creation with the `i"
"nvert:` opt - `(chord :e3, :minor, invert: 2)`"
msgstr ""

#: lang.json:chord_invert:examples:0:comments
msgid ""
"#No inversion     - (ring 57, 61, 64)\n"
" \n"
"#First inversion  - (ring 61, 64, 69)\n"
" \n"
"#Second inversion - (ring 64, 69, 73)\n"
msgstr ""

#: lang.json:chord_invert:summary
msgid "Chord inversion"
msgstr ""

#: lang.json:chord_names:description
msgid "Returns a ring containing all chord names known to Sonic Pi"
msgstr ""

#: lang.json:chord_names:examples:0:comments
msgid ""
"#=>  prints a list of all the chords\n"
msgstr ""

#: lang.json:chord_names:summary
msgid "All chord names"
msgstr ""

#: lang.json:clear:description
msgid ""
"All settings such as the current synth, BPM, random stream and tick values wil"
"l be reset to their defaults. Consider using `reset` to reset all these values"
" to those inherited from the parent thread."
msgstr ""

#: lang.json:clear:examples:0:comments
msgid ""
" \n"
" \n"
" \n"
"#=> \"before\"\n"
"#=> :blade\n"
"#=> 3\n"
"#=> 0.75006103515625\n"
"#=> 0\n"
" \n"
" \n"
"#=> 0.9287109375\n"
" \n"
"#=> \"thread\"\n"
"# The clear reset the current synth to the default\n"
"# of :beep. We are therefore ignoring any inherited\n"
"# synth settings. It is as if the thread was a completely\n"
"# new Run.\n"
"#=> :beep\n"
"# The current octave defaults back to 0\n"
"#=> 0\n"
"# The random stream defaults back to the standard\n"
"# stream used by every new Run.\n"
"#=> 0.75006103515625\n"
"#=> 0\n"
" \n"
msgstr ""

#: lang.json:clear:summary
msgid "Clear all thread locals to defaults"
msgstr ""

#: lang.json:comment:description
msgid ""
"Does not evaluate any of the code within the block. However, any optional args"
" passed before the block *will* be evaluated although they will be ignored. Se"
"e `uncomment` for switching commenting off without having to remove the commen"
"t form."
msgstr ""

#: lang.json:comment:examples:0:comments
msgid ""
"# starting a block level comment:\n"
"# not played\n"
"# no sleep happens\n"
"# not played\n"
" \n"
msgstr ""

#: lang.json:comment:summary
msgid "Block level commenting"
msgstr ""

#: lang.json:control:description
msgid ""
"Control a running synth node by passing new parameters to it. A synth node rep"
"resents a running synth and can be obtained by assigning the return value of a"
" call to play or sample or by specifying a parameter to the do/end block of an"
" FX. You may modify any of the parameters you can set when triggering the synt"
"h, sample or FX. See documentation for opt details. If the synth to control is"
" a chord, then control will change all the notes of that chord group at once t"
"o a new target set of notes - see example. Also, you may use the on: opt to co"
"nditionally trigger the control - see the docs for the `synth` and `sample` fn"
"s for more information.\n"
"\n"
"If no synth to control is specified, then the last synth triggered by the curr"
"ent (or parent) thread will be controlled - see example below."
msgstr ""

#: lang.json:control:examples:0:comments
msgid ""
"# Basic control\n"
"# play note 50 with release of 5 and cutoff of 60. Assign return value to vari"
"able my_node\n"
"# Sleep for a second\n"
"# Now modify cutoff from 60 to 70, sound is still playing\n"
"# Sleep for another second\n"
"# Now modify cutoff from 70 to 90, sound is still playing\n"
msgstr ""

#: lang.json:control:examples:10:comments
msgid ""
"# Controlling multiple synths without variables\n"
"# Trigger a beep synth\n"
" \n"
"# Control last triggered synth (:beep)\n"
" \n"
"# Next, trigger a dsaw synth\n"
" \n"
"# Control last triggered synth (:dsaw)\n"
msgstr ""

#: lang.json:control:examples:1:comments
msgid ""
"# Combining control with slide opts allows you to create nice transitions.\n"
"# start synth and specify slide time for cutoff opt\n"
"# Change the cutoff value with a control.\n"
"# Cutoff will now slide over 8 beats from 70 to 130\n"
msgstr ""

#: lang.json:control:examples:2:comments
msgid ""
"# Use a short slide time and many controls to create a sliding melody\n"
"# get a random ordering of a scale\n"
"# Start our synth running with a long sustain and short note slide time\n"
" \n"
"# Keep quickly changing the note by ticking through notes repeatedly\n"
" \n"
" \n"
msgstr ""

#: lang.json:control:examples:3:comments
msgid ""
"# Controlling FX\n"
"# Start FX but also use the handy || goalposts\n"
"# to grab a handle on the running FX. We can call\n"
"# our handle anything we want. Here we've called it bc\n"
" \n"
"# We can use our handle bc now just like we used s in the\n"
"# previous example to modify the FX as it runs.\n"
" \n"
msgstr ""

#: lang.json:control:examples:4:comments
msgid ""
"# Controlling chords\n"
"# start a chord\n"
" \n"
"# transition to new chord.\n"
"# Each note in the original chord is mapped onto\n"
"# the equivalent in the new chord.\n"
msgstr ""

#: lang.json:control:examples:5:comments
msgid ""
"# Sliding between chords\n"
"# start a chord\n"
" \n"
"# slide to new chord.\n"
"# Each note in the original chord is mapped onto\n"
"# the equivalent in the new chord.\n"
msgstr ""

#: lang.json:control:examples:6:comments
msgid ""
"# Sliding from a larger to smaller chord\n"
"# start a chord with 7 notes\n"
" \n"
"# slide to new chord with fewer notes (3)\n"
"# Each note in the original chord is mapped onto\n"
"# the equivalent in the new chord using ring-like indexing.\n"
"# This means that the 4th note in the original chord will\n"
"# be mapped onto the 1st note in the second chord and so-on.\n"
msgstr ""

#: lang.json:control:examples:7:comments
msgid ""
"# Sliding from a smaller to larger chord\n"
"# start a chord with 3 notes\n"
" \n"
"# slide to new chord with more notes (7)\n"
"# Each note in the original chord is mapped onto\n"
"# the equivalent in the new chord.\n"
"# This means that the 4th note in the new chord\n"
"# will not sound as there is no 4th note in the\n"
"# original chord.\n"
msgstr ""

#: lang.json:control:examples:8:comments
msgid ""
"# Changing the slide rate\n"
"# Start a synth playing with a long cutoff slide\n"
"# wait a beat\n"
"# change the cutoff so it starts sliding slowly\n"
"# wait for 3 beats\n"
"# Change the cutoff_slide - the cutoff now slides more quickly to 130\n"
"# it will now take 1 beat to slide from its *current* value\n"
"# (somewhere between 70 and 130) to 130\n"
msgstr ""

#: lang.json:control:examples:9:comments
msgid ""
"# Controlling the last triggered synth\n"
"# Every time a synth is triggered, Sonic Pi automatically remembers the node\n"
" \n"
" \n"
"# This means we don't need to use an explicit variable to control the synth\n"
"# we last triggered.\n"
" \n"
msgstr ""

#: lang.json:control:summary
msgid "Control running synth"
msgstr ""

#: lang.json:cue:description
msgid ""
"Send a heartbeat synchronisation message containing the (virtual) timestamp of"
" the current thread. Useful for syncing up external threads via the `sync` fn."
" Any opts which are passed are given to the thread which syncs on the `cue_id`"
". The values of the opts must be immutable. Currently numbers, symbols, boolea"
"ns, nil and frozen strings, or vectors/rings/frozen arrays/maps of immutable v"
"alues are supported."
msgstr ""

#: lang.json:cue:examples:0:comments
msgid ""
" \n"
"# this parks the current thread waiting for a foo cue message to be received.\n"
" \n"
" \n"
" \n"
"# We send a cue message from the main thread.\n"
"# This then unblocks the thread above and we then hear the sample\n"
msgstr ""

#: lang.json:cue:examples:1:comments
msgid ""
"# Start a metronome thread\n"
"# Loop forever:\n"
"# sending tick heartbeat messages\n"
"# and sleeping for 0.5 beats between ticks\n"
" \n"
" \n"
"# We can now play sounds using the metronome.\n"
"# In the main thread, just loop\n"
"# waiting for :tick cue messages\n"
"# after which play the drum kick sample\n"
" \n"
msgstr ""

#: lang.json:cue:examples:2:comments
msgid ""
"# Start a metronome thread\n"
"# Loop forever:\n"
"# sending one of three tick heartbeat messages randomly\n"
"# and sleeping for 0.5 beats between ticks\n"
" \n"
" \n"
"# We can now play sounds using the metronome:\n"
" \n"
"# In the main thread, just loop\n"
"# waiting for :foo cue messages\n"
"# after which play the elec beep sample\n"
" \n"
" \n"
" \n"
"# In the main thread, just loop\n"
"# waiting for :bar cue messages\n"
"# after which play the elec flip sample\n"
" \n"
" \n"
" \n"
"# In the main thread, just loop\n"
"# waiting for :baz cue messages\n"
"# after which play the elec blup sample\n"
" \n"
" \n"
msgstr ""

#: lang.json:cue:examples:3:comments
msgid ""
" \n"
" \n"
"# sending tick heartbeat messages with a value :foo\n"
" \n"
" \n"
" \n"
"# The value for :foo can now be used in synced threads\n"
" \n"
" \n"
"# play the note value from :foo\n"
" \n"
msgstr ""

#: lang.json:cue:opts:another_key:description
msgid "Another value"
msgstr ""

#: lang.json:cue:opts:key:description
msgid "All these opts are passed through to the thread which syncs"
msgstr ""

#: lang.json:cue:opts:your_key:description
msgid "Your value"
msgstr ""

#: lang.json:cue:summary
msgid "Cue other threads"
msgstr ""

#: lang.json:current_arg_checks:description
msgid ""
"Returns the current arg checking setting (`true` or `false`).\n"
"\n"
"This can be set via the fns `use_arg_checks` and `with_arg_checks`."
msgstr ""

#: lang.json:current_arg_checks:examples:0:comments
msgid ""
"# Print out the current arg check setting\n"
msgstr ""

#: lang.json:current_arg_checks:summary
msgid "Get current arg checking status"
msgstr ""

#: lang.json:current_beat_duration:description
msgid ""
"Get the duration of the current beat in seconds. This is the actual length of "
"time which will elapse with `sleep 1`.\n"
"\n"
"Affected by calls to `use_bpm`, `with_bpm`, `use_sample_bpm` and `with_sample_"
"bpm`."
msgstr ""

#: lang.json:current_beat_duration:examples:0:comments
msgid ""
" \n"
"#=> 1\n"
" \n"
"#=> 0.5\n"
msgstr ""

#: lang.json:current_beat_duration:summary
msgid "Duration of current beat"
msgstr ""

#: lang.json:current_bpm:description
msgid ""
"Returns the current tempo as a bpm value.\n"
"\n"
"This can be set via the fns `use_bpm`, `with_bpm`, `use_sample_bpm` and `with_"
"sample_bpm`."
msgstr ""

#: lang.json:current_bpm:examples:0:comments
msgid ""
"# Print out the current bpm\n"
msgstr ""

#: lang.json:current_bpm:summary
msgid "Get current tempo"
msgstr ""

#: lang.json:current_cent_tuning:description
msgid ""
"Returns the cent shift value.\n"
"\n"
"This can be set via the fns `use_cent_tuning` and `with_cent_tuning`."
msgstr ""

#: lang.json:current_cent_tuning:examples:0:comments
msgid ""
"# Print out the current cent shift\n"
msgstr ""

#: lang.json:current_cent_tuning:summary
msgid "Get current cent shift"
msgstr ""

#: lang.json:current_debug:description
msgid ""
"Returns the current debug setting (`true` or `false`).\n"
"\n"
"This can be set via the fns `use_debug` and `with_debug`."
msgstr ""

#: lang.json:current_debug:examples:0:comments
msgid ""
"# Print out the current debug setting\n"
msgstr ""

#: lang.json:current_debug:summary
msgid "Get current debug status"
msgstr ""

#: lang.json:current_midi_defaults:description
msgid ""
"Returns the current MIDI defaults. This is a map of opt names to values\n"
"\n"
"This can be set via the fns `use_midi_defaults`, `with_midi_defaults`, `use_me"
"rged_midi_defaults` and `with_merged_midi_defaults`."
msgstr ""

#: lang.json:current_midi_defaults:examples:0:comments
msgid ""
" \n"
"# Sends MIDI :e1 note on to channel 1 on port \"foo\"\n"
"#=> Prints {channel: 1, port: \"foo\"}\n"
msgstr ""

#: lang.json:current_midi_defaults:summary
msgid "Get current MIDI defaults"
msgstr ""

#: lang.json:current_octave:description
msgid ""
"Returns the octave shift value.\n"
"\n"
"This can be set via the fns `use_octave` and `with_octave`."
msgstr ""

#: lang.json:current_octave:examples:0:comments
msgid ""
"# Print out the current octave shift\n"
msgstr ""

#: lang.json:current_octave:summary
msgid "Get current octave shift"
msgstr ""

#: lang.json:current_random_seed:description
msgid ""
"Returns the current random seed.\n"
"\n"
"This can be set via the fns `use_random_seed` and `with_random_seed`. It is in"
"cremented every time you use the random number generator via fns such as `choo"
"se` and `rand`."
msgstr ""

#: lang.json:current_random_seed:examples:0:comments
msgid ""
"# Print out the current random seed\n"
msgstr ""

#: lang.json:current_random_seed:examples:1:comments
msgid ""
"# Resetting the seed back to a known place\n"
"#=>  0.75006103515625\n"
"#=>  0.733917236328125\n"
"# Grab the current seed\n"
"#=> 0.464202880859375\n"
"#=> 0.24249267578125\n"
"# Restore the seed\n"
"# we'll now get the same random values:\n"
"#=> 0.464202880859375\n"
"#=> 0.24249267578125\n"
msgstr ""

#: lang.json:current_random_seed:summary
msgid "Get current random seed"
msgstr ""

#: lang.json:current_sample_defaults:description
msgid ""
"Returns the current sample defaults. This is a map of synth arg names to eithe"
"r values or functions.\n"
"\n"
"This can be set via the fns `use_sample_defaults`, `with_sample_defaults`, `us"
"e_merged_sample_defaults` and `with_merged_sample_defaults`."
msgstr ""

#: lang.json:current_sample_defaults:examples:0:comments
msgid ""
" \n"
"# Plays amen break with amp 0.5 and cutoff 80\n"
"#=> Prints {amp: 0.5, cutoff: 80}\n"
msgstr ""

#: lang.json:current_sample_defaults:summary
msgid "Get current sample defaults"
msgstr ""

#: lang.json:current_sched_ahead_time:description
msgid ""
"Returns the current schedule ahead time.\n"
"\n"
"This can be set via the fn `set_sched_ahead_time!`."
msgstr ""

#: lang.json:current_sched_ahead_time:examples:0:comments
msgid ""
" \n"
"# Prints 0.5\n"
msgstr ""

#: lang.json:current_sched_ahead_time:summary
msgid "Get current sched ahead time"
msgstr ""

#: lang.json:current_synth:description
msgid ""
"Returns the current synth name.\n"
"\n"
"This can be set via the fns `use_synth` and `with_synth`."
msgstr ""

#: lang.json:current_synth:examples:0:comments
msgid ""
"# Print out the current synth name\n"
msgstr ""

#: lang.json:current_synth:summary
msgid "Get current synth"
msgstr ""

#: lang.json:current_synth_defaults:description
msgid ""
"Returns the current synth defaults. This is a map of synth arg names to values"
".\n"
"\n"
"This can be set via the fns `use_synth_defaults`, `with_synth_defaults`, `use_"
"merged_synth_defaults` and `with_merged_synth_defaults`."
msgstr ""

#: lang.json:current_synth_defaults:examples:0:comments
msgid ""
" \n"
"# Plays note 50 with amp 0.5 and cutoff 80\n"
"#=> Prints {amp: 0.5, cutoff: 80}\n"
msgstr ""

#: lang.json:current_synth_defaults:summary
msgid "Get current synth defaults"
msgstr ""

#: lang.json:current_time:description
msgid ""
"Returns the current logical time. This is a 'wall-clock' time which should typ"
"ically be pretty similar to Time.now but quantised to a nearby sleep point in "
"the thread. May be quite different to Time.now within a time_warp!\n"
"\n"
"Unlike `Time.now`, Multiple calls to `current_time` with no interleaved calls "
"to `sleep` or `sync` will return the same value."
msgstr ""

#: lang.json:current_time:examples:0:comments
msgid ""
"# 2017-03-19 23:37:57 +0000\n"
msgstr ""

#: lang.json:current_time:examples:1:comments
msgid ""
"# The difference between current_time and Time.now\n"
"# See that Time.now is continuous and current_time is discrete\n"
"#\n"
"# {run: 19, time: 0.0}\n"
"# ├─ \"A\" 1489966042.761211\n"
"# ├─ \"B\" 1489966042.760181\n"
"# ├─ \"C\" 1489966042.761235\n"
"# ├─ \"D\" 1489966042.760181\n"
"# └─ \"E\" 1489966042.760181\n"
msgstr ""

#: lang.json:current_time:summary
msgid "Get current (logically quantized) time"
msgstr ""

#: lang.json:current_transpose:description
msgid ""
"Returns the current transpose value.\n"
"\n"
"This can be set via the fns `use_transpose` and `with_transpose`."
msgstr ""

#: lang.json:current_transpose:examples:0:comments
msgid ""
"# Print out the current transpose value\n"
msgstr ""

#: lang.json:current_transpose:summary
msgid "Get current transposition"
msgstr ""

#: lang.json:current_volume:description
msgid ""
"Returns the current volume.\n"
"\n"
"This can be set via the fn `set_volume!`."
msgstr ""

#: lang.json:current_volume:examples:0:comments
msgid ""
"# Print out the current volume\n"
msgstr ""

#: lang.json:current_volume:examples:1:comments
msgid ""
" \n"
"#=> 2\n"
msgstr ""

#: lang.json:current_volume:summary
msgid "Get current volume"
msgstr ""

#: lang.json:dec:description
msgid "Decrement a number by `1`. Equivalent to `n - 1`"
msgstr ""

#: lang.json:dec:examples:0:comments lang.json:inc:examples:1:comments
msgid ""
"# returns 0\n"
msgstr ""

#: lang.json:dec:examples:1:comments
msgid ""
"# returns -2\n"
msgstr ""

#: lang.json:dec:summary
msgid "Decrement"
msgstr ""

#: lang.json:define:description
msgid ""
"Allows you to group a bunch of code and give it your own name for future re-us"
"e. Functions are very useful for structuring your code. They are also the gate"
"way into live coding as you may redefine a function whilst a thread is calling"
" it, and the next time the thread calls your function, it will use the latest "
"definition."
msgstr ""

#: lang.json:define:examples:0:comments
msgid ""
"# Define a new function called foo\n"
" \n"
" \n"
" \n"
" \n"
"# Call foo on its own\n"
" \n"
"# You can use foo anywhere you would use normal code.\n"
"# For example, in a block:\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:define:summary lang.json:ndefine:summary
msgid "Define a new function"
msgstr ""

#: lang.json:defonce:description
msgid ""
"Allows you to assign the result of some code to a name, with the property that"
" the code will only execute once - therefore stopping re-definitions. This is "
"useful for defining values that you use in your compositions but you don't wan"
"t to reset every time you press run. You may force the block to execute again "
"regardless of whether or not it has executed once already by using the overrid"
"e option (see examples)."
msgstr ""

#: lang.json:defonce:examples:0:comments
msgid ""
"# Define a new function called foo\n"
"# Sleep for a beat in the function definition. Note that this amount\n"
"# of time in seconds will depend on the current BPM of the live_loop\n"
"# or thread calling this function.\n"
"# Print hello\n"
"# Return a value of 10\n"
" \n"
"# Call foo on its own\n"
"# The run sleeps for a beat and prints \"hello\" before returning 10\n"
"# Try it again:\n"
"# This time the run doesn't sleep or print anything out. However, 10 is still "
"returned.\n"
"# Try redefining foo\n"
" \n"
" \n"
" \n"
"# We still don't see any printing or sleeping, and the result is still 10\n"
"# You can use foo anywhere you would use normal code.\n"
"# For example, in a block:\n"
" \n"
"# play 10\n"
" \n"
msgstr ""

#: lang.json:defonce:examples:1:comments
msgid ""
" \n"
" \n"
" \n"
"# plays 50\n"
"# This redefinition doesn't work due to the behaviour of defonce\n"
" \n"
" \n"
"# Still plays 50\n"
"# Force definition to take place with override option\n"
" \n"
" \n"
"# plays 80\n"
msgstr ""

#: lang.json:defonce:opts:override:description
msgid "If set to true, re-definitions are allowed and this acts like define"
msgstr ""

#: lang.json:defonce:summary
msgid "Define a named value only once"
msgstr ""

#: lang.json:degree:description
msgid ""
"For a given scale and tonic it takes a symbol/string/number and resolves it to"
" a midi note. The degree can be either a decimal number or a roman numeral (if"
" it's a string or symbol), and may optionally be prefixed an augmentation (`a`"
"/`d` for an augmented/diminished interval, `aa`/`dd` for double augmented/dimi"
"nished or `p` for a perfect (unchanged) interval)."
msgstr ""

#: lang.json:degree:examples:0:comments
msgid ""
"# major third up from :D3\n"
"# minor third up from :C3\n"
"# diminished fifth up from :B3\n"
msgstr ""

#: lang.json:degree:examples:1:comments
msgid ""
" \n"
"# for each degree in the chord\n"
"# add the corresponding note\n"
" \n"
"# play an F# 13+11-9 chord, using roman numeral symbols\n"
msgstr ""

#: lang.json:degree:examples:2:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
"# the same chord as above, but using decimal number strings\n"
msgstr ""

#: lang.json:degree:summary
msgid "Convert a degree into a note"
msgstr ""

#: lang.json:density:description
msgid ""
"Runs the block `d` times with the bpm for the block also multiplied by `d`. Gr"
"eat for repeating sections a number of times faster yet keeping within a fixed"
" time. If `d` is less than 1, then time will be stretched accordingly and the "
"block will take longer to complete."
msgstr ""

#: lang.json:density:examples:0:comments
msgid ""
"# Set the BPM to 60\n"
"# BPM for block is now 120\n"
"# block is called 2.times\n"
"# sample is played twice\n"
"# sleep is 0.25s\n"
" \n"
msgstr ""

#: lang.json:density:examples:1:comments
msgid ""
"# You may also pass a param to the block similar to n.times\n"
"# prints out 0, 1\n"
"# sleep is 0.25s\n"
" \n"
msgstr ""

#: lang.json:density:examples:2:comments
msgid ""
"# Specifying a density val of < 1 will stretch out time\n"
"# A density of 0.5 will double the length of the block's\n"
"# execution time.\n"
"# plays note 80 with 2s release\n"
"# sleep is 1s\n"
" \n"
msgstr ""

#: lang.json:density:summary
msgid "Squash and repeat time"
msgstr ""

#: lang.json:dice:description
msgid ""
"Throws a dice with the specified num_sides (defaults to `6`) and returns the s"
"core as a number between `1` and `num_sides`."
msgstr ""

#: lang.json:dice:examples:0:comments
msgid ""
"# will return a number between 1 and 6 inclusively\n"
"# (with an even probability distribution).\n"
msgstr ""

#: lang.json:dice:examples:1:comments
msgid ""
"# will return a number between 1 and 3 inclusively\n"
msgstr ""

#: lang.json:dice:summary
msgid "Random dice throw"
msgstr ""

#: lang.json:doubles:description
msgid ""
"Create a ring containing the results of successive doubling of the `start` val"
"ue. If `num_doubles` is negative, will return a ring of `halves`."
msgstr ""

#: lang.json:doubles:examples:0:comments
msgid ""
"#=> (ring 60, 120)\n"
msgstr ""

#: lang.json:doubles:examples:1:comments
msgid ""
"#=> (ring 1.5, 3, 6)\n"
msgstr ""

#: lang.json:doubles:examples:2:comments
msgid ""
"#=> (ring 1.5, 3, 6, 12, 24)\n"
msgstr ""

#: lang.json:doubles:examples:3:comments
msgid ""
"#=> (ring 100, 50, 25, 12.5)\n"
msgstr ""

#: lang.json:doubles:summary
msgid "Create a ring of successive doubles"
msgstr ""

#: lang.json:eval_file:description
msgid ""
"Reads the full contents of the file with `path` and executes within the curren"
"t thread like a function call."
msgstr ""

#: lang.json:eval_file:examples:0:comments
#: lang.json:run_file:examples:0:comments
msgid ""
"#=> will run the contents of this file\n"
msgstr ""

#: lang.json:eval_file:summary
msgid ""
"Evaluate the contents of the file inline in the current thread like a function"
"."
msgstr ""

#: lang.json:factor?:description
msgid ""
"Test to see if factor is indeed a factor of `val`. In other words, can `val` b"
"e divided exactly by factor."
msgstr ""

#: lang.json:factor?:examples:0:comments
msgid ""
"# true - 10 is a multiple of 2 (2 * 5 = 10)\n"
msgstr ""

#: lang.json:factor?:examples:1:comments
msgid ""
"#false - 11 is not a multiple of 2\n"
msgstr ""

#: lang.json:factor?:examples:2:comments
msgid ""
"#true - 2 is a multiple of 0.5 (0.5 * 4 = 2)\n"
msgstr ""

#: lang.json:factor?:summary
msgid "Factor test"
msgstr ""

#: lang.json:fx_names:description
msgid "Return a list of all the FX available"
msgstr ""

#: lang.json:fx_names:summary
msgid "Get all FX names"
msgstr ""

#: lang.json:get:description
msgid ""
"Retrieve information from Time State set prior to the current time from either"
" the current or any other thread. If called multiple times will always return "
"the same value unless a call to `sleep`, `sync`, `set` or `cue` is interleaved"
". Also, calls to `get` will always return the same value across Runs for deter"
"ministic behaviour - which means you may safely use it in your compositions fo"
"r repeatable music. If no value is stored with the relevant key, will return `"
"nil`.\n"
"\n"
"May be used within a `time_warp` to retrieve past events. If in a time warp, `"
"get` can not be called from a future position. Does not advance time."
msgstr ""

#: lang.json:get:examples:0:comments
msgid ""
"#=> returns the last value set as :foo, or nil\n"
msgstr ""

#: lang.json:get:examples:1:comments
msgid ""
" \n"
"#=> returns 3\n"
msgstr ""

#: lang.json:get:examples:2:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
"#=> always returns 3 (no race conditions here!)\n"
" \n"
msgstr ""

#: lang.json:get:summary
msgid "Get information from the Time State"
msgstr ""

#: lang.json:halves:description
msgid ""
"Create a ring containing the results of successive halving of the `start` valu"
"e. If `num_halves` is negative, will return a ring of `doubles`."
msgstr ""

#: lang.json:halves:examples:0:comments
msgid ""
"#=> (ring 60, 30)\n"
msgstr ""

#: lang.json:halves:examples:1:comments
msgid ""
"#=> (ring 120, 60, 30)\n"
msgstr ""

#: lang.json:halves:examples:2:comments
msgid ""
"#=> (ring 120, 60, 30, 15, 7.5)\n"
msgstr ""

#: lang.json:halves:examples:3:comments
msgid ""
"#=> (ring 30, 60, 120, 240, 480)\n"
msgstr ""

#: lang.json:halves:summary
msgid "Create a ring of successive halves"
msgstr ""

#: lang.json:hz_to_midi:description
msgid ""
"Convert a frequency in hz to a midi note. Note that the result isn't an intege"
"r and there is a potential for some very minor rounding errors."
msgstr ""

#: lang.json:hz_to_midi:examples:0:comments
msgid ""
"#=> 60.0003\n"
msgstr ""

#: lang.json:hz_to_midi:summary
msgid "Hz to MIDI conversion"
msgstr ""

#: lang.json:in_thread:description
msgid ""
"Execute a given block (between `do` ... `end`) in a new thread. Use for playin"
"g multiple 'parts' at once. Each new thread created inherits all the use/with "
"defaults of the parent thread such as the time, current synth, bpm, default sy"
"nth args, etc. Despite inheriting defaults from the parent thread, any modific"
"ations of the defaults in the new thread will *not* affect the parent thread. "
"Threads may be named with the `name:` optional arg. Named threads will print t"
"heir name in the logging pane when they print their activity. If you attempt t"
"o create a new named thread with a name that is already in use by another exec"
"uting thread, no new thread will be created.\n"
"\n"
"It is possible to delay the initial trigger of the thread on creation with bot"
"h the `delay:` and `sync:` opts. See their respective docstrings. If both `del"
"ay:` and `sync:` are specified, on initial thread creation first the delay wil"
"l be honoured and then the sync.\n"
msgstr ""

#: lang.json:in_thread:examples:0:comments
msgid ""
"# If you write two loops one after another like this,\n"
"# then only the first loop will execute as the loop acts\n"
"# like a trap not letting the flow of control out\n"
" \n"
"# This code is never executed.\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:in_thread:examples:1:comments
msgid ""
"# In order to play two loops at the same time, the first loops need to\n"
"# be in a thread (note that it's probably more idiomatic to use live_loop\n"
"# when performing):\n"
"# By wrapping our loop in an in_thread block, we split the\n"
"# control flow into two parts. One flows into the loop (a) and\n"
"# the other part flows immediately after the in_thread block (b).\n"
"# both parts of the control flow execute at exactly the same time.\n"
" \n"
"# (a)\n"
" \n"
"# (a)\n"
" \n"
" \n"
" \n"
" \n"
"# (b)\n"
"# This loop is executed thanks to the thread above\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:in_thread:examples:2:comments
msgid ""
"# Set the bpm to be double rate\n"
"# Set the current synth to be :dsaw\n"
"# Create a new thread\n"
"# Play note 50 at time 0\n"
"# Switch to fm synth (only affects this thread)\n"
"# sleep for 0.5 seconds (as we're double rate)\n"
"# Play note 38 at time 0.5\n"
" \n"
"# Play note 62 at time 0 (with dsaw synth)\n"
"# sleep 1s\n"
"# Play note 67 at time 1s (also with dsaw synth)\n"
msgstr ""

#: lang.json:in_thread:examples:3:comments
msgid ""
"# Here we've created a named thread\n"
" \n"
" \n"
" \n"
" \n"
" \n"
"# This thread isn't created as the name is\n"
"# the same as the previous thread which is\n"
"# still executing.\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:in_thread:examples:4:comments
msgid ""
"# Named threads work well with functions for live coding:\n"
"# Create a function foo\n"
"# which does something simple\n"
"# and sleeps for some time\n"
" \n"
"# Create a named thread\n"
"# which loops forever\n"
"# calling our function\n"
" \n"
" \n"
"# We are now free to modify the contents of :foo and re-run the entire buffer."
"\n"
"# We'll hear the effect immediately without having to stop and re-start the co"
"de.\n"
"# This is because our fn has been redefined, (which our thread will pick up) a"
"nd\n"
"# due to the thread being named, the second re-run will not create a new simil"
"arly\n"
"# named thread. This is a nice pattern for live coding and is the basis of liv"
"e_loop.\n"
msgstr ""

#: lang.json:in_thread:examples:5:comments
msgid ""
"#Delaying the start of a thread\n"
" \n"
"# this sample is not triggered at time 0 but after 1 beat\n"
" \n"
"# Note 80 is played at time 0\n"
msgstr ""

#: lang.json:in_thread:opts:delay:description
msgid "Initial delay in beats before the thread starts. Default is 0."
msgstr ""

#: lang.json:in_thread:opts:name:description
msgid ""
"Make this thread a named thread with name. If a thread with this name already "
"exists, a new thread will not be created."
msgstr ""

#: lang.json:in_thread:opts:sync:description
msgid "Initial sync symbol. Will sync with this symbol before the thread starts."
msgstr ""

#: lang.json:in_thread:opts:sync_bpm:description
#: lang.json:live_loop:opts:sync_bpm:description
msgid ""
"Initial sync symbol. Will sync with this symbol before the live_loop starts. L"
"ive loop will also inherit the BPM of the thread which cued the symbol."
msgstr ""

#: lang.json:in_thread:summary
msgid "Run code block at the same time"
msgstr ""

#: lang.json:inc:description
msgid "Increment a number by `1`. Equivalent to `n + 1`"
msgstr ""

#: lang.json:inc:examples:0:comments
msgid ""
"# returns 2\n"
msgstr ""

#: lang.json:inc:summary
msgid "Increment"
msgstr ""

#: lang.json:kill:description
msgid ""
"Kill a running synth sound or sample. In order to kill a sound, you need to ha"
"ve stored a reference to it in a variable."
msgstr ""

#: lang.json:kill:examples:0:comments
msgid ""
"# store a reference to a running synth in a variable called foo:\n"
" \n"
" \n"
"# foo is still playing, but we can kill it early:\n"
" \n"
msgstr ""

#: lang.json:kill:examples:1:comments
msgid ""
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:kill:summary
msgid "Kill synth"
msgstr ""

#: lang.json:knit:description
msgid ""
"Knits a series of value, count pairs to create a ring buffer where each value "
"is repeated count times."
msgstr ""

#: lang.json:knit:examples:0:comments
msgid ""
"#=> (ring 1, 1, 1, 1, 1)\n"
msgstr ""

#: lang.json:knit:examples:1:comments
msgid ""
"#=> (ring :e2, :e2, :c2, :c2, :c2)\n"
msgstr ""

#: lang.json:knit:summary
msgid "Knit a sequence of repeated values"
msgstr ""

#: lang.json:line:description
msgid ""
"Create a ring buffer representing a straight line between start and finish of "
"steps elements. Steps defaults to `4`. Indexes wrap around positively and nega"
"tively. Similar to `range`."
msgstr ""

#: lang.json:line:examples:0:comments lang.json:line:examples:2:comments
msgid ""
"#=> (ring 0.0, 1.0, 2.0, 3.0)\n"
msgstr ""

#: lang.json:line:examples:1:comments
msgid ""
"#=> (ring 5.0, 4.0, 3.0, 2.0, 1.0)\n"
msgstr ""

#: lang.json:line:opts:inclusive:description
msgid "boolean value representing whether or not to include finish value in line"
msgstr ""

#: lang.json:line:opts:steps:description
msgid "number of slices or segments along the line"
msgstr ""

#: lang.json:line:summary
msgid "Create a ring buffer representing a straight line"
msgstr ""

#: lang.json:live_audio:description
msgid ""
"Create a named synthesiser which works similar to `play`, `sample` or `synth`."
" Rather than synthesising the sound mathematically or playing back recorded au"
"dio, it streams audio live from your sound card.\n"
"\n"
"However, unlike `play`, `sample` and `synth`, which allow multiple similar syn"
"ths to play at the same time (i.e. a chord) only one `live_audio` synth of a g"
"iven name may exist in the system at any one time. This is similar to `live_lo"
"op` where only one live loop of each name may exist at any one time. See examp"
"les for further information.\n"
"\n"
"An additional difference is that `live_audio` will create an infinitely long s"
"ynth rather than be timed to an envelope like the standard `synth` and `sample"
"` synths. This is particularly suitable for working with continuous incoming a"
"udio streams where the source of the audio is unknown (for example, it may be "
"a guitar, an analog synth or an electronic violin). If the source is continuou"
"s, then it may not be suited to being stitched together by successive envelope"
"d calls to something like: `synth :sound_in, attack: 0, sustain: 4, release: 0"
"`. If we were to `live_loop` this with a `sleep 4` to match the sustain durati"
"on, we would get something that emulated a continuous stream, but for certain "
"inputs you'll hear clicking at the seams between each successive call to `synt"
"h` where the final part of the audio signal from the previous synth doesn't pr"
"ecisely match up with the start of the signal in the next synth due to very mi"
"nor timing differences.\n"
"\n"
"Another important feature of `live_audio` is that it will automatically move a"
"n existing `live_audio` synth into the current FX context. This means you can "
"live code the FX chain around the live stream and it will update automatically"
". See examples.\n"
"\n"
"To stop a `live_audio` synth, use the `:stop` arg: `live_audio :foo, :stop`.\n"
".\n"
msgstr ""

#: lang.json:live_audio:examples:0:comments
msgid ""
"# Basic usage\n"
"# Play whatever audio is coming into the sound card on input 1\n"
msgstr ""

#: lang.json:live_audio:examples:1:comments
msgid ""
"# Specify an input\n"
"# Play whatever audio is coming into the sound card on input 3\n"
msgstr ""

#: lang.json:live_audio:examples:2:comments
msgid ""
"# Work with stereo input\n"
"# Play whatever audio is coming into the sound card on inputs 3 and 4\n"
"# as a stereo stream\n"
msgstr ""

#: lang.json:live_audio:examples:3:comments
msgid ""
"# Switching audio contexts (i.e. changing FX)\n"
"# Play whatever audio is coming into the sound card on input 1\n"
"# Wait for 2 seconds then...\n"
" \n"
"# Add reverb to the audio from input 1\n"
" \n"
"# Wait for another 2 seconds then...\n"
"# Remove the reverb from input 1\n"
msgstr ""

#: lang.json:live_audio:examples:4:comments
msgid ""
"# Working with live_loops\n"
" \n"
"# chooses a new FX each time round the live loop\n"
"# the audio stream from input 1 will be moved to the\n"
"# new FX and the old FX will complete and finish as normal.\n"
" \n"
" \n"
msgstr ""

#: lang.json:live_audio:examples:5:comments
msgid ""
"# Stopping\n"
"#=> start playing audio from input 1\n"
"#=> start playing audio from input 2\n"
"#=> wait for 3s...\n"
"#=> stop playing audio from input 1\n"
"#=> (live_audio :bar is still playing)\n"
msgstr ""

#: lang.json:live_audio:opts:input:description
msgid "The audio card input to read audio from."
msgstr ""

#: lang.json:live_audio:opts:stereo:description
msgid ""
"If set to truthy value (true, 1) will read from two consecutive audio card inp"
"uts."
msgstr ""

#: lang.json:live_audio:summary
msgid "A named audio stream live from your soundcard"
msgstr ""

#: lang.json:live_loop:description
msgid ""
"Loop the do/end block forever. However, unlike a basic loop, a live_loop has t"
"wo special properties. Firstly it runs in a thread - so you can have any numbe"
"r of live loops running at the same time (concurrently). Secondly, you can cha"
"nge the behaviour of a live loop whilst it is still running without needing to"
" stop it. Live loops are therefore the secret to live coding with Sonic Pi.\n"
"\n"
"As live loops are excecuted within a named in_thread, they behave similarly. S"
"ee the in_thread documentation for all the details. However, it's worth mentio"
"ning a few important points here. Firstly, only one live loop with a given nam"
"e can run at any one time. Therefore, if you define two or more `live_loop`s c"
"alled `:foo` only one will be running. Another important aspect of `live_loop`"
"s is that they manage their own thread locals set with the `use_*` and `with_*"
"` fns. This means that each `live_loop` can have its own separate default synt"
"h, BPM and sample defaults. When a `live_loop` is *first* created, it inherits"
" the thread locals from the parent thread, but once it has started, the only w"
"ay to change them is by re-defining the do/end body of the `live_loop`. See th"
"e examples below for details. Finally, as mentioned above, provided their name"
"s are different, you may have many `live_loop`s executing at once.\n"
"\n"
"A typical way of live coding with live loops is to define a number of them in "
"a buffer, hit Run to start them and then to modify their do/end blocks and the"
"n hit Run again. This will not create any more thread, but instead just modify"
" the behaviour of the existing threads. The changes will *not* happen immediat"
"ely. Instead, they will only happen the next time round the loop. This is beca"
"use the behaviour of each live loop is implemented with a standard function. W"
"hen a live loop is updated, the function definition is also updated. Each time"
" round the live loop, the function is called, so the new behviour is only obse"
"rved next time round the loop.\n"
"\n"
"Also sends a `cue` with the same name each time the `live_loop` repeats. This "
"may be used to `sync` with other threads and `live_loop`s.\n"
"\n"
"If the `live_loop` block is given a parameter, this is given the result of the"
" last run of the loop (with initial value either being `0` or an init arg). Th"
"is allows you to 'thread' values across loops.\n"
"\n"
"Finally, it is possible to delay the initial trigger of the live_loop on creat"
"ion with both the `delay:` and `sync:` opts. See their respective docstrings. "
"If both `delay:` and `sync:` are specified, on initial live_loop creation firs"
"t the delay will be honoured and then the sync.\n"
msgstr ""

#: lang.json:live_loop:examples:0:comments
msgid ""
"# Define and start a simple live loop\n"
"# Create a live loop called :ping\n"
"# This live loops plays the :elec_ping sample\n"
"# Then sleeps for 1 beat before repeating\n"
" \n"
msgstr ""

#: lang.json:live_loop:examples:1:comments
msgid ""
"# Every live loop must sleep or sync\n"
"# Create a live loop called :ping\n"
"# This live loops plays the :elec_ping sample\n"
"# However, because the do/end lock of the live loop does not\n"
"# contain any calls to sleep or sync, the live loop stops at\n"
"# the end of the first loop with a 'Did not sleep' error.\n"
" \n"
msgstr ""

#: lang.json:live_loop:examples:2:comments
msgid ""
"# Multiple live loops will play at the same time\n"
"# Start a live loop called :foo\n"
" \n"
" \n"
" \n"
"# Start another live loop called :bar\n"
"# Both :foo and :bar will be playing\n"
"# at the same time.\n"
" \n"
msgstr ""

#: lang.json:live_loop:examples:3:comments
msgid ""
"# Live loops inherit external use_* thread locals\n"
" \n"
" \n"
"# live loop :foo now has a BPM of 30\n"
"# This sleep will be for 2 seconds\n"
" \n"
msgstr ""

#: lang.json:live_loop:examples:4:comments
msgid ""
"# Live loops can have their own thread locals\n"
" \n"
"# Set the BPM of live loop :foo to 30\n"
" \n"
"# This sleep will be for 2 seconds\n"
" \n"
" \n"
"# Set the BPM of live loop :bar to 120\n"
" \n"
"# This sleep will be for 0.5 seconds\n"
" \n"
msgstr ""

#: lang.json:live_loop:examples:5:comments
msgid ""
"# Live loops can pass values between iterations\n"
"# pass a param (a) to the block (inits to 0)\n"
"# prints out all the integers\n"
" \n"
"# increment a by 1 (last value is passed back into the loop)\n"
" \n"
msgstr ""

#: lang.json:live_loop:examples:6:comments
msgid ""
"# Live loop names must be unique\n"
"# Start a live loop called :foo\n"
" \n"
" \n"
" \n"
"# Attempt to start another also called :foo\n"
"# With a different do/end block\n"
"# This will not start another live loop\n"
"# but instead replace the behaviour of the first.\n"
"# There will only be one live loop running playing\n"
"# The bass drum\n"
msgstr ""

#: lang.json:live_loop:examples:7:comments
msgid ""
"# You can sync multiple live loops together\n"
"# Wait for a :bar cue event before starting :foo\n"
"# Live loop :foo is therefore blocked and does\n"
"# not make a sound initially\n"
" \n"
"# Wait for 4 beats\n"
"# Start a live loop called :foo which will emit a :bar\n"
"# cue message therefore releasing the :foo live loop.\n"
"# Live loop :foo therefore starts and also inherits the\n"
"# logical time of live loop :bar.\n"
"# This pattern is also useful to re-sync live loops after\n"
"# errors are made. For example, when modifying live loop :foo\n"
"# it is possible to introduce a runtime error which will stop\n"
"# :foo but not :bar (as they are separate, isolated threads).\n"
"# Once the error has been fixed and the code is re-run, :foo\n"
"# will automatically wait for :bar to loop round and restart\n"
"# in sync with the correct virtual clock.\n"
msgstr ""

#: lang.json:live_loop:opts:auto_cue:description
msgid "enable or disable automatic cue (default is true)"
msgstr ""

#: lang.json:live_loop:opts:delay:description
msgid "Initial delay in beats before the live_loop starts. Default is 0."
msgstr ""

#: lang.json:live_loop:opts:init:description
msgid "initial value for optional block arg"
msgstr ""

#: lang.json:live_loop:opts:seed:description
msgid "override initial random generator seed before starting loop."
msgstr ""

#: lang.json:live_loop:opts:sync:description
msgid "Initial sync symbol. Will sync with this symbol before the live_loop starts."
msgstr ""

#: lang.json:live_loop:summary
msgid "A loop for live coding"
msgstr ""

#: lang.json:load_buffer:description
msgid ""
"Given a path to a file, will read the contents and load it into the current bu"
"ffer. This will replace any previous content."
msgstr ""

#: lang.json:load_buffer:examples:0:comments
msgid ""
"# will replace content of current buffer with contents of the file\n"
msgstr ""

#: lang.json:load_buffer:summary
msgid "Load the contents of a file to the current buffer"
msgstr ""

#: lang.json:load_example:description
msgid ""
"Given a keyword representing an example, will load it into the current buffer."
" This will replace any previous content."
msgstr ""

#: lang.json:load_example:examples:0:comments
msgid ""
"# will replace content of current buffer with the rerezzed example\n"
msgstr ""

#: lang.json:load_example:summary
msgid "Load a built-in example"
msgstr ""

#: lang.json:load_sample:description
msgid ""
"Given a path to a `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` "
"file, pre-loads the sample into memory.\n"
"\n"
"You may also specify the same set of source and filter pre-args available to `"
"sample` itself. `load_sample` will then load all matching samples. See `sample"
"`'s docs for more information."
msgstr ""

#: lang.json:load_sample:examples:0:comments
#: lang.json:load_samples:examples:0:comments
msgid ""
"# :elec_blip is now loaded and ready to play as a sample\n"
"# No delay takes place when attempting to trigger it\n"
msgstr ""

#: lang.json:load_sample:examples:1:comments
msgid ""
"# Using source and filter pre-args\n"
" \n"
"# loads first matching sample in \"/path/to/sample/dir\"\n"
"# loads sample with index 1 in \"/path/to/sample/dir\"\n"
"# loads sample with name \"foo\" in \"/path/to/sample/dir\"\n"
"# loads first sample with file name containing \"quux\" in \"/path/to/sample/dir\""
"\n"
"# loads first sample which matches regex /[Bb]ar/ in \"/path/to/sample/dir\"\n"
msgstr ""

#: lang.json:load_sample:summary
msgid "Pre-load first matching sample"
msgstr ""

#: lang.json:load_samples:description
msgid ""
"Given a directory containing multiple `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`"
", `.oga` or `.flac` files, pre-loads all the samples into memory.\n"
"\n"
" You may also specify the same set of source and filter pre-args available to "
"`sample` itself. `load_sample` will load all matching samples (not just the sa"
"mple `sample` would play given the same opts) - see `sample`'s docs for more i"
"nformation."
msgstr ""

#: lang.json:load_samples:examples:1:comments
msgid ""
"# Using source and filter pre-args\n"
" \n"
"# loads all samples in \"/path/to/sample/dir\"\n"
"# loads sample with index 1 in \"/path/to/sample/dir\"\n"
"# loads sample with name \"foo\" in \"/path/to/sample/dir\"\n"
"# loads all samples with file names containing \"quux\" in \"/path/to/sample/dir\""
"\n"
"# loads all samples which match regex /[Bb]ar/ in \"/path/to/sample/dir\"\n"
msgstr ""

#: lang.json:load_samples:summary
msgid "Pre-load all matching samples"
msgstr ""

#: lang.json:load_synthdefs:description
msgid ""
"Load all pre-compiled synth designs in the specified directory. The binary fil"
"es containing synth designs need to have the extension `.scsyndef`. This is us"
"eful if you wish to use your own SuperCollider synthesiser designs within Soni"
"c Pi.\n"
"\n"
"## Important notes\n"
"\n"
"You may not trigger external synthdefs unless you enable the following GUI pre"
"ference:\n"
"\n"
"```\n"
"Studio -> Synths and FX -> Enable external synths and FX\n"
"```\n"
"\n"
"Also, if you wish your synth to work with Sonic Pi's automatic stereo sound in"
"frastructure *you need to ensure your synth outputs a stereo signal* to an aud"
"io bus with an index specified by a synth arg named `out_bus`. For example, th"
"e following synth would work nicely:\n"
"\n"
"\n"
"    (\n"
"    SynthDef(\\piTest,\n"
"             {|freq = 200, amp = 1, out_bus = 0 |\n"
"               Out.ar(out_bus,\n"
"                      SinOsc.ar([freq,freq],0,0.5)* Line.kr(1, 0, 5, amp, done"
"Action: 2))}\n"
"    ).writeDefFile(\"/Users/sam/Desktop/\")\n"
"    )\n"
"\n"
"\n"
"    "
msgstr ""

#: lang.json:load_synthdefs:examples:0:comments
msgid ""
"# Load all synthdefs in my_noises folder\n"
msgstr ""

#: lang.json:load_synthdefs:summary
msgid "Load external synthdefs"
msgstr ""

#: lang.json:look:description
msgid ""
"Read and return value of default tick. If a `key` is specified, read the value"
" of that specific tick. Ticks are `in_thread` and `live_loop` local, so the ti"
"ck read will be the tick of the current thread calling `look`."
msgstr ""

#: lang.json:look:examples:0:comments
msgid ""
"#=> 0\n"
"#=> 0\n"
"#=> 0 # look doesn't advance the tick, it just returns the current value\n"
msgstr ""

#: lang.json:look:examples:1:comments
msgid ""
"#=> 0 # A look is always 0 before the first tick\n"
"# advance the tick\n"
"#=> 0 # Note: a look is still 0 after the first tick.\n"
" \n"
"#=> 1\n"
"#=> 1 # making multiple calls to look doesn't affect tick value\n"
" \n"
"#=> 2\n"
msgstr ""

#: lang.json:look:examples:2:comments
msgid ""
" \n"
" \n"
"#=> 1 (keyed look :foo has been advanced)\n"
"#=> 0 (default look hasn't been advanced)\n"
"#=> 0 (other keyed looks haven't been advanced either)\n"
msgstr ""

#: lang.json:look:examples:3:comments
msgid ""
"# You can call look on lists and rings\n"
" \n"
"# advance the default tick\n"
" \n"
"# look into the default tick to play all notes in sequence\n"
" \n"
" \n"
"# use the same look on another ring\n"
" \n"
" \n"
msgstr ""

#: lang.json:look:examples:4:comments
msgid ""
"# Returns numbers unchanged if single argument\n"
"#=> 0\n"
"#=> 4\n"
"#=> -4\n"
"#=> 20.3\n"
msgstr ""

#: lang.json:look:opts:offset:description
msgid ""
"Offset to add to index returned. Useful when calling look on lists, rings and "
"vectors to offset the returned value"
msgstr ""

#: lang.json:look:summary
msgid "Obtain value of a tick"
msgstr ""

#: lang.json:loop:description
msgid ""
"Given a do/end block, repeats it forever. Note that once the program enters th"
"e loop - it will not move on but will instead stay within the loop. Plain loop"
"s like this are like black holes - instead of sucking in the light they suck i"
"n the program.\n"
"\n"
"The loop must either `sleep` or `sync` each time round otherwise it will stop "
"and throw an error. This is to stop the loop from spinning out of control and "
"locking the system.\n"
"\n"
"For a more powerful, flexible loop built for live coding see `live_loop`."
msgstr ""

#: lang.json:loop:examples:0:comments
msgid ""
"# note 70 is played\n"
" \n"
"# This loop will repeat notes 50 and 62 forever\n"
" \n"
" \n"
" \n"
" \n"
"# This is *never* played as the program is trapped in the loop above\n"
msgstr ""

#: lang.json:loop:summary
msgid "Repeat do/end block forever"
msgstr ""

#: lang.json:map:description
msgid "Create a new immutable key/value map from args. "
msgstr ""

#: lang.json:map:examples:0:comments lang.json:ramp:examples:0:comments
#: lang.json:ramp:examples:5:comments lang.json:ramp:examples:6:comments
#: lang.json:ring:examples:0:comments lang.json:ring:examples:2:comments
#: lang.json:vector:examples:0:comments
msgid ""
"#=> 1\n"
msgstr ""

#: lang.json:map:examples:1:comments lang.json:ramp:examples:1:comments
#: lang.json:ring:examples:1:comments lang.json:vector:examples:1:comments
msgid ""
"#=> 2\n"
msgstr ""

#: lang.json:map:examples:2:comments lang.json:vector:examples:3:comments
#: lang.json:vector:examples:4:comments lang.json:vector:examples:5:comments
#: lang.json:vector:examples:6:comments
msgid ""
"#=> nil\n"
msgstr ""

#: lang.json:map:summary
msgid "Create an immutable map"
msgstr ""

#: lang.json:mc_block_id:description
msgid ""
"Given a block name or id will return a number representing the id of the block"
" or throw an exception if the name or id isn't valid"
msgstr ""

#: lang.json:mc_block_id:examples:0:comments
#: lang.json:mc_block_id:examples:1:comments
msgid ""
"#=> 0\n"
msgstr ""

#: lang.json:mc_block_id:examples:2:comments
#: lang.json:mc_block_name:examples:2:comments
msgid ""
"#=> Throws an invalid block id exception\n"
msgstr ""

#: lang.json:mc_block_id:examples:3:comments
#: lang.json:mc_block_name:examples:3:comments
msgid ""
"#=> Throws an invalid block name exception\n"
msgstr ""

#: lang.json:mc_block_id:summary
msgid "Minecraft Pi - normalise block code"
msgstr ""

#: lang.json:mc_block_ids:description
msgid ""
"Returns a list of all the valid block ids as numbers. Note not all numbers are"
" valid block ids. For example, 19 is not a valid block id."
msgstr ""

#: lang.json:mc_block_ids:examples:0:comments
msgid ""
"#=> [0, 1, 2, 3, 4, 5...\n"
msgstr ""

#: lang.json:mc_block_ids:summary
msgid "Minecraft Pi - list all block ids"
msgstr ""

#: lang.json:mc_block_name:description
msgid ""
"Given a block id or a block name will return a symbol representing the block n"
"ame or throw an exception if the id or name isn't valid."
msgstr ""

#: lang.json:mc_block_name:examples:0:comments
#: lang.json:mc_block_name:examples:1:comments
#: lang.json:mc_get_block:examples:0:comments
msgid ""
"#=> :air\n"
msgstr ""

#: lang.json:mc_block_name:summary
msgid "Minecraft Pi - normalise block name"
msgstr ""

#: lang.json:mc_block_names:description
msgid "Returns a list of all the valid block names as symbols"
msgstr ""

#: lang.json:mc_block_names:examples:0:comments
msgid ""
"#=> [:air, :stone, :grass, :dirt, :cobblestone...\n"
msgstr ""

#: lang.json:mc_block_names:summary
msgid "Minecraft Pi - list all block names"
msgstr ""

#: lang.json:mc_camera_fixed:description
msgid "Set the camera mode to fixed."
msgstr ""

#: lang.json:mc_camera_fixed:summary
msgid "Minecraft Pi - fixed camera mode"
msgstr ""

#: lang.json:mc_camera_normal:description
msgid "Set the camera mode to normal."
msgstr ""

#: lang.json:mc_camera_normal:summary
msgid "Minecraft Pi - normal camera mode"
msgstr ""

#: lang.json:mc_camera_set_location:description
msgid "Move the camera to a new location."
msgstr ""

#: lang.json:mc_camera_set_location:summary
msgid "Minecraft Pi - move camera"
msgstr ""

#: lang.json:mc_camera_third_person:description
msgid "Set the camera mode to third person"
msgstr ""

#: lang.json:mc_camera_third_person:summary
msgid "Minecraft Pi - third person camera mode"
msgstr ""

#: lang.json:mc_chat_post:description
msgid "See mc_message"
msgstr ""

#: lang.json:mc_chat_post:summary
msgid "Minecraft Pi - synonym for mc_message"
msgstr ""

#: lang.json:mc_checkpoint_restore:description
msgid "Restore the world to the last snapshot taken with `mc_checkpoint_save`."
msgstr ""

#: lang.json:mc_checkpoint_restore:summary
msgid "Minecraft Pi - restore checkpoint"
msgstr ""

#: lang.json:mc_checkpoint_save:description
msgid ""
"Take a snapshot of the world and save it. Restore back with `mc_checkpoint_res"
"tore`"
msgstr ""

#: lang.json:mc_checkpoint_save:summary
msgid "Minecraft Pi - save checkpoint"
msgstr ""

#: lang.json:mc_get_block:description
msgid "Returns the type of the block at the coords `x`, `y`, `z` as a symbol."
msgstr ""

#: lang.json:mc_get_block:summary
msgid "Minecraft Pi - get type of block at coords"
msgstr ""

#: lang.json:mc_get_height:description
msgid "See `mc_ground_height`"
msgstr ""

#: lang.json:mc_get_height:summary
msgid "Minecraft Pi - synonym for mc_ground_height"
msgstr ""

#: lang.json:mc_get_pos:description
msgid "See `mc_location`"
msgstr ""

#: lang.json:mc_get_pos:summary
msgid "Minecraft Pi - synonym for mc_location"
msgstr ""

#: lang.json:mc_get_tile:description
msgid ""
"Returns the coordinates of the nearest block that the player is next to. This "
"is more course grained than `mc_location` as it only returns whole number coor"
"dinates."
msgstr ""

#: lang.json:mc_get_tile:examples:0:comments
msgid ""
"#=> [10, 20, 101]\n"
msgstr ""

#: lang.json:mc_get_tile:summary
msgid "Minecraft Pi - get location of current tile/block"
msgstr ""

#: lang.json:mc_ground_height:description
msgid "Returns the height of the ground at the specified `x` and `z` coords."
msgstr ""

#: lang.json:mc_ground_height:examples:0:comments
msgid ""
"#=> 43 (height of world at x=40, z=50)\n"
msgstr ""

#: lang.json:mc_ground_height:summary
msgid "Minecraft Pi - get ground height at x, z coords"
msgstr ""

#: lang.json:mc_location:description
msgid ""
"Returns a list of floats `[x, y, z]` coords of the current location for Steve."
" The coordinates are finer grained than raw block coordinates but may be used "
"anywhere you might use block coords."
msgstr ""

#: lang.json:mc_location:examples:0:comments
msgid ""
"#=> [10.1, 20.67, 101.34]\n"
msgstr ""

#: lang.json:mc_location:examples:1:comments
msgid ""
"#=> Find the current location and store in x, y and z variables.\n"
msgstr ""

#: lang.json:mc_location:summary
msgid "Minecraft Pi - get current location"
msgstr ""

#: lang.json:mc_message:description
msgid ""
"Post contents of `msg` on the Minecraft chat display. You may pass multiple ar"
"guments and all will be joined to form a single message (with spaces)."
msgstr ""

#: lang.json:mc_message:examples:0:comments
msgid ""
"#=> Displays \"Hello from Sonic Pi\" on Minecraft's chat display\n"
msgstr ""

#: lang.json:mc_message:summary
msgid "Minecraft Pi - post a chat message"
msgstr ""

#: lang.json:mc_set_area:description
msgid ""
"Set an area/box of blocks of type `block_name` defined by two distinct sets of"
" coordinates."
msgstr ""

#: lang.json:mc_set_area:summary
msgid "Minecraft Pi - set area of blocks"
msgstr ""

#: lang.json:mc_set_block:description
msgid ""
"Change the block type of the block at coords `x`, `y`, `z` to `block_type`. Th"
"e block type may be specified either as a symbol such as `:air` or a number. S"
"ee `mc_block_ids` and `mc_block_types` for lists of valid symbols and numbers."
msgstr ""

#: lang.json:mc_set_block:examples:0:comments
msgid ""
"#=> set block at coords 40, 50, 60 to type glass\n"
msgstr ""

#: lang.json:mc_set_block:summary
msgid "Minecraft Pi - set block at specific coord"
msgstr ""

#: lang.json:mc_set_pos:description
msgid "See `mc_teleport`"
msgstr ""

#: lang.json:mc_set_pos:summary
msgid "Minecraft Pi - synonym for mc_teleport"
msgstr ""

#: lang.json:mc_set_tile:summary
msgid "Minecraft Pi - set location to coords of specified tile/block"
msgstr ""

#: lang.json:mc_surface_teleport:description
msgid ""
"Teleports you to the specified x and z coordinates with the y automatically se"
"t to place you on the surface of the world. For example, if the x and z coords"
" target a mountain, you'll be placed on top of the mountain, not in the air or"
" under the ground. See mc_ground_height for discovering the height of the grou"
"nd at a given x, z point."
msgstr ""

#: lang.json:mc_surface_teleport:examples:0:comments
msgid ""
"#=> Teleport user to coords x = 40, y = height of surface, z = 50\n"
msgstr ""

#: lang.json:mc_surface_teleport:summary
msgid "Minecraft Pi - teleport to world surface at x and z coords"
msgstr ""

#: lang.json:mc_teleport:description
msgid ""
"Magically teleport the player to the location specified by the `x`, `y`, `z` c"
"oordinates. Use this for automatically moving the player either small or large"
" distances around the world."
msgstr ""

#: lang.json:mc_teleport:examples:0:comments
msgid ""
"# The player will be moved to the position with coords:\n"
"# x: 40, y: 50, z: 60\n"
msgstr ""

#: lang.json:mc_teleport:summary
msgid "Minecraft Pi - teleport to a new location"
msgstr ""

#: lang.json:midi:description
msgid ""
"Sends a MIDI note on event to *all* connected MIDI devices and *all* channels "
"and then after sustain beats sends a MIDI note off event. Ensures MIDI trigger"
" is synchronised with standard calls to play and sample. Co-operates completel"
"y with Sonic Pi's timing system including `time_warp`.\n"
"\n"
"If `note` is specified as `:off` then all notes will be turned off (same as `m"
"idi_all_notes_off`).\n"
msgstr ""

#: lang.json:midi:examples:0:comments
msgid ""
"# Play E, octave 1 for 0.3 beats at half velocity on channel 3 on all connecte"
"d MIDI ports.\n"
msgstr ""

#: lang.json:midi:examples:1:comments
msgid ""
"#=> Turn off all notes on channel 3 on all connected MIDI ports\n"
msgstr ""

#: lang.json:midi:examples:2:comments
msgid ""
"#=> Play note :E1 for 1 beats on channel 3 on MIDI port named \"foo\" only\n"
msgstr ""

#: lang.json:midi:examples:3:comments
msgid ""
" \n"
"# repeatedly play a ring of octaves\n"
" \n"
" \n"
msgstr ""

#: lang.json:midi:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi on/off messages from being sen"
"t out. (Ensures all opts are evaluated in this call to `midi` regardless of va"
"lue)."
msgstr ""

#: lang.json:midi:opts:sustain:description
msgid "Duration of note event in beats"
msgstr ""

#: lang.json:midi:opts:vel:description
msgid "Velocity of note as a MIDI number"
msgstr ""

#: lang.json:midi:summary
msgid "Trigger and release an external synth via MIDI"
msgstr ""

#: lang.json:midi_all_notes_off:description
msgid ""
"Sends a MIDI all notes off message to *all* connected MIDI devices. on *all* c"
"hannels. Use the `port:` and `channel:` opts to restrict which MIDI ports and "
"channels are used.\n"
"\n"
"When an All Notes Off event is received, all oscillators will turn off.\n"
"\n"
"[MIDI 1.0 Specification - Channel Mode Messages - All Notes Off](https://www.m"
"idi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_all_notes_off:examples:0:comments
msgid ""
"#=> Turn off all notes on MIDI devices on all channels (and ports)\n"
msgstr ""

#: lang.json:midi_all_notes_off:examples:1:comments
msgid ""
"#=> Turn off all notes on MIDI devices on channel 2\n"
msgstr ""

#: lang.json:midi_all_notes_off:opts:channel:description
msgid "Channel to send the all notes off message to"
msgstr ""

#: lang.json:midi_all_notes_off:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi all notes off message from bei"
"ng sent out. (Ensures all opts are evaluated in this call to `midi_all_notes_o"
"ff` regardless of value)."
msgstr ""

#: lang.json:midi_all_notes_off:opts:port:description
#: lang.json:midi_clock_beat:opts:port:description
#: lang.json:midi_clock_tick:opts:port:description
#: lang.json:midi_local_control_off:opts:port:description
#: lang.json:midi_local_control_on:opts:port:description
#: lang.json:midi_mode:opts:port:description
#: lang.json:midi_reset:opts:port:description
#: lang.json:midi_sound_off:opts:port:description
msgid "MIDI port to send to"
msgstr ""

#: lang.json:midi_all_notes_off:summary
msgid "Turn off all notes on MIDI devices"
msgstr ""

#: lang.json:midi_cc:description
msgid ""
"Sends a MIDI control change message to *all* connected devices on *all* channe"
"ls. Use the `port:` and `channel:` opts to restrict which MIDI ports and chann"
"els are used.\n"
"\n"
"Control number and control value can be passed as a note such as `:e3` and dec"
"imal values will be rounded down or up to the nearest whole number - so values"
" between 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3"
" will be rounded down to 3.\n"
"\n"
"You may also optionally pass the control value as a floating point value betwe"
"en 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between 0"
" and 127) using the `val_f:` opt.\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Control change](https://www"
".midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_cc:examples:0:comments lang.json:midi_cc:examples:1:comments
msgid ""
"#=> Sends MIDI cc message to control 100 with value 32 to all ports and channe"
"ls\n"
msgstr ""

#: lang.json:midi_cc:examples:2:comments
msgid ""
"#=> Sends MIDI cc message to control 100 with value 32 on channel 5 to all por"
"ts\n"
msgstr ""

#: lang.json:midi_cc:examples:3:comments
msgid ""
"#=> Sends MIDI cc message to control 100 with value 102 on channel 5 to all po"
"rts\n"
msgstr ""

#: lang.json:midi_cc:examples:4:comments
msgid ""
"#=> Sends MIDI cc message to control 100 with value 102 on channel 1 and 5 to "
"all ports\n"
msgstr ""

#: lang.json:midi_cc:opts:channel:description
#: lang.json:midi_channel_pressure:opts:channel:description
#: lang.json:midi_pc:opts:channel:description
#: lang.json:midi_pitch_bend:opts:channel:description
#: lang.json:midi_poly_pressure:opts:channel:description
msgid "Channel(s) to send to"
msgstr ""

#: lang.json:midi_cc:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi cc message from being sent out"
". (Ensures all opts are evaluated in this call to `midi_cc` regardless of valu"
"e)."
msgstr ""

#: lang.json:midi_cc:opts:port:description
#: lang.json:midi_channel_pressure:opts:port:description
#: lang.json:midi_note_on:opts:port:description
#: lang.json:midi_pc:opts:port:description
#: lang.json:midi_pitch_bend:opts:port:description
#: lang.json:midi_poly_pressure:opts:port:description
#: lang.json:use_merged_midi_defaults:opts:port:description
#: lang.json:use_midi_defaults:opts:port:description
#: lang.json:with_merged_midi_defaults:opts:port:description
#: lang.json:with_midi_defaults:opts:port:description
msgid "MIDI port(s) to send to"
msgstr ""

#: lang.json:midi_cc:opts:val_f:description
msgid "Control value as a value between 0 and 1 (will be converted to a MIDI value)"
msgstr ""

#: lang.json:midi_cc:opts:value:description
msgid "Control value as a MIDI number."
msgstr ""

#: lang.json:midi_cc:summary
msgid "Send MIDI control change message"
msgstr ""

#: lang.json:midi_channel_pressure:description
msgid ""
"Sends a MIDI channel pressure (aftertouch) message to *all* connected devices "
"on *all* channels. Use the `port:` and `channel:` opts to restrict which MIDI "
"ports and channels are used.\n"
"\n"
"The pressure value can be passed as a note such as `:e3` and decimal values wi"
"ll be rounded down or up to the nearest whole number - so values between 3.5 a"
"nd 4 will be rounded up to 4 and values between 3.49999... and 3 will be round"
"ed down to 3.\n"
"\n"
"You may also optionally pass the pressure value as a floating point value betw"
"een 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between "
"0 and 127) using the `val_f:` opt.\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Channel Pressure (Aftertouc"
"h)](https://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_channel_pressure:examples:0:comments
msgid ""
"#=> Sends MIDI channel pressure message with value 50 to all ports and channel"
"s\n"
msgstr ""

#: lang.json:midi_channel_pressure:examples:1:comments
msgid ""
"#=> Sends MIDI channel pressure message with value 60 to all ports and channel"
"s\n"
msgstr ""

#: lang.json:midi_channel_pressure:examples:2:comments
msgid ""
"#=> Sends MIDI channel pressure message with value 63.5 to all ports and chann"
"els\n"
msgstr ""

#: lang.json:midi_channel_pressure:examples:3:comments
msgid ""
"#=> Sends MIDI channel pressure message with value 30 on channel 1 and 5 to al"
"l ports\n"
msgstr ""

#: lang.json:midi_channel_pressure:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi channel pressure message from "
"being sent out. (Ensures all opts are evaluated in this call to `midi_channel_"
"pressure` regardless of value)."
msgstr ""

#: lang.json:midi_channel_pressure:opts:val_f:description
#: lang.json:midi_poly_pressure:opts:val_f:description
msgid "Pressure value as a value between 0 and 1 (will be converted to a MIDI value)"
msgstr ""

#: lang.json:midi_channel_pressure:opts:value:description
#: lang.json:midi_poly_pressure:opts:value:description
msgid "Pressure value as a MIDI number."
msgstr ""

#: lang.json:midi_channel_pressure:summary
msgid "Send MIDI channel pressure (aftertouch) message"
msgstr ""

#: lang.json:midi_clock_beat:description
msgid ""
"Sends enough MIDI clock ticks for one beat to *all* connected MIDI devices. Us"
"e the `port:` opt to restrict which MIDI ports are used.\n"
"\n"
"The MIDI specification requires 24 clock tick events to be sent per beat. Thes"
"e can either be sent manually using `midi_clock_tick` or all 24 can be schedul"
"ed in one go using this fn. `midi_clock_beat` will therefore schedule for 24 c"
"lock ticks to be sent linearly spread over duration beats. This fn will automa"
"tically take into account the current BPM and any `time_warp`s.\n"
msgstr ""

#: lang.json:midi_clock_beat:examples:0:comments
msgid ""
"#=> Send 24 clock ticks over a period of 1 beat\n"
msgstr ""

#: lang.json:midi_clock_beat:examples:1:comments
msgid ""
"#=> Send 24 clock ticks over a period of 0.5 beats\n"
msgstr ""

#: lang.json:midi_clock_beat:examples:2:comments
msgid ""
"# Create a live loop which continually sends out MIDI clock\n"
"# events at the current BPM\n"
" \n"
" \n"
msgstr ""

#: lang.json:midi_clock_beat:examples:3:comments
msgid ""
"# Ensuring Clock Phase is Correct\n"
" \n"
"# Send a midi_start event the first time round the live loop only\n"
"# this will not just send a steady clock beat, but also ensure\n"
"# the clock phase of the MIDI device matches Sonic Pi.\n"
" \n"
msgstr ""

#: lang.json:midi_clock_beat:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi clock tick messages from being"
" sent out. (Ensures all opts are evaluated in this call to `midi_clock_beat` r"
"egardless of value)."
msgstr ""

#: lang.json:midi_clock_beat:summary
msgid "Send a quarter-note's worth of MIDI clock ticks"
msgstr ""

#: lang.json:midi_clock_tick:description
msgid ""
"Sends a MIDI clock tick message to *all* connected devices on *all* channels. "
"Use the `port:` and `channel:` opts to restrict which MIDI ports and channels "
"are used.\n"
"\n"
"Typical MIDI devices expect the clock to send 24 ticks per quarter note (typic"
"ally a beat). See `midi_clock_beat` for a simple way of sending all the ticks "
"for a given beat.\n"
"\n"
"[MIDI 1.0 Specification - System Real-Time Messages - Timing Clock](https://ww"
"w.midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_clock_tick:examples:0:comments
msgid ""
"#=> Send an individual clock tick to all connected MIDI devices on all ports.\n"
msgstr ""

#: lang.json:midi_clock_tick:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi clock tick message from being "
"sent out. (Ensures all opts are evaluated in this call to `midi_clock_tick` re"
"gardless of value)."
msgstr ""

#: lang.json:midi_clock_tick:summary
msgid "Send an individual MIDI clock tick"
msgstr ""

#: lang.json:midi_continue:description
msgid ""
"Sends the MIDI continue system message to *all* connected MIDI devices on *all"
"* ports.  Use the `port:` opt to restrict which MIDI ports are used.\n"
"\n"
"Upon receiving the MIDI continue event, the MIDI device(s) will continue at th"
"e point the sequence was stopped.\n"
"\n"
"[MIDI 1.0 Specification - System Real-Time Messages - Continue](https://www.mi"
"di.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_continue:examples:0:comments
msgid ""
"#=> Send continue message to all connected MIDI devices\n"
msgstr ""

#: lang.json:midi_continue:opts:port:description
msgid "MIDI Port(s) to send the continue message to"
msgstr ""

#: lang.json:midi_continue:summary
msgid "Send MIDI system message - continue"
msgstr ""

#: lang.json:midi_local_control_off:description
msgid ""
"Sends a MIDI local control off message to *all* connected devices on *all* cha"
"nnels. Use the `port:` and `channel:` opts to restrict which MIDI ports and ch"
"annels are used.\n"
"\n"
"All devices on a given channel will respond only to data received over MIDI. P"
"layed data, etc. will be ignored. See `midi_local_control_on` to enable local "
"control.\n"
"\n"
"[MIDI 1.0 Specification - Channel Mode Messages - Local Control Off](https://w"
"ww.midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_local_control_off:examples:0:comments
msgid ""
"#=> Disable local control on MIDI devices on all channels (and ports)\n"
msgstr ""

#: lang.json:midi_local_control_off:examples:1:comments
msgid ""
"#=> Disable local control on MIDI devices on channel 2\n"
msgstr ""

#: lang.json:midi_local_control_off:opts:channel:description
msgid "Channel to send the local control off message to"
msgstr ""

#: lang.json:midi_local_control_off:opts:on:description
#: lang.json:midi_mode:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi local control off message from"
" being sent out. (Ensures all opts are evaluated in this call to `midi_local_c"
"ontrol_off` regardless of value)."
msgstr ""

#: lang.json:midi_local_control_off:summary
msgid "Disable local control on MIDI devices"
msgstr ""

#: lang.json:midi_local_control_on:description
msgid ""
"Sends a MIDI local control on message to *all* connected devices on *all* chan"
"nels. Use the `port:` and `channel:` opts to restrict which MIDI ports and cha"
"nnels are used.\n"
"\n"
"All devices on a given channel will respond both to data received over MIDI an"
"d played data, etc. See `midi_local_control_off` to disable local control.\n"
"\n"
"[MIDI 1.0 Specification - Channel Mode Messages - Local Control On](https://ww"
"w.midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_local_control_on:examples:0:comments
msgid ""
"#=> Enable local control on MIDI devices on all channels (and ports)\n"
msgstr ""

#: lang.json:midi_local_control_on:examples:1:comments
msgid ""
"#=> Enable local control on MIDI devices on channel 2\n"
msgstr ""

#: lang.json:midi_local_control_on:opts:channel:description
msgid "Channel to send the local control on message to"
msgstr ""

#: lang.json:midi_local_control_on:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi local control on message from "
"being sent out. (Ensures all opts are evaluated in this call to `midi_local_co"
"ntrol_on` regardless of value)."
msgstr ""

#: lang.json:midi_local_control_on:summary
msgid "Enable local control on MIDI devices"
msgstr ""

#: lang.json:midi_mode:description
msgid ""
"Sends the Omni/Mono/Poly MIDI mode message to *all* connected MIDI devices on "
"*all* channels. Use the `port:` and `channel:` opts to restrict which MIDI por"
"ts and channels are used.\n"
"\n"
"Valid modes are:\n"
"\n"
":omni_off - Omni Mode Off\n"
":omni_on  - Omni Mode On\n"
":mono     - Mono Mode On (Poly Off). Set num_chans: to be the number of channe"
"ls to use (Omni Off) or 0 (Omni On). Default for num_chans: is 16.\n"
":poly     - Poly Mode On (Mono Off)\n"
"\n"
"Note that this fn also includes the behaviour of `midi_all_notes_off`.\n"
"\n"
"[MIDI 1.0 Specification - Channel Mode Messages - Omni Mode Off | Omni Mode On"
" | Mono Mode On (Poly Off) | Poly Mode On](https://www.midi.org/specifications"
"/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_mode:examples:0:comments
msgid ""
"#=> Turn Omni Mode On on all ports and channels\n"
msgstr ""

#: lang.json:midi_mode:examples:1:comments
msgid ""
"#=> Mono Mode On, Omni off using 5 channels.\n"
msgstr ""

#: lang.json:midi_mode:examples:2:comments
msgid ""
"#=> Mono Mode On, Omni on.\n"
msgstr ""

#: lang.json:midi_mode:examples:3:comments
msgid ""
"#=> Mono Mode On, Omni off using 16 channels (the default) .\n"
msgstr ""

#: lang.json:midi_mode:opts:channel:description
msgid "Channel to send the MIDI mode message to"
msgstr ""

#: lang.json:midi_mode:opts:mode:description
msgid "Mode keyword - one of :omni_off, :omni_on, :mono or :poly"
msgstr ""

#: lang.json:midi_mode:opts:num_chans:description
msgid "Used in mono mode only - Number of channels (defaults to 16)"
msgstr ""

#: lang.json:midi_mode:summary
msgid "Set Omni/Mono/Poly mode"
msgstr ""

#: lang.json:midi_note_off:description
msgid ""
"Sends the MIDI note off message to *all* connected devices on *all* channels. "
"Use the `port:` and `channel:` opts to restrict which MIDI ports and channels "
"are used.\n"
"\n"
"Note and release velocity values can be passed as a note symbol such as `:e3` "
"or a number. Decimal values will be rounded down or up to the nearest whole nu"
"mber - so values between 3.5 and 4 will be rounded up to 4 and values between "
"3.49999... and 3 will be rounded down to 3. These values will also be clipped "
"within the range 0->127 so all values lower then 0 will be increased to 0 and "
"all values greater than 127 will be reduced to 127.\n"
"\n"
"The `release_velocity` param may be omitted - in which case it will default to"
" 127 unless you supply it as a named opt via the keys `velocity:` or `vel_f:`."
"\n"
"\n"
"You may also optionally pass the release velocity value as a floating point va"
"lue between 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values "
"between 0 and 127) using the `vel_f:` opt.\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Note off event](https://www"
".midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_note_off:examples:0:comments
msgid ""
"#=> Sends MIDI note off for :e3 with the default release velocity of 127 to al"
"l ports and channels\n"
msgstr ""

#: lang.json:midi_note_off:examples:1:comments
msgid ""
"#=> Sends MIDI note off on :e3 with velocity 12 on all channels\n"
msgstr ""

#: lang.json:midi_note_off:examples:2:comments
msgid ""
"#=> Sends MIDI note off on :e3 with velocity 12 to channel 3\n"
msgstr ""

#: lang.json:midi_note_off:examples:3:comments
msgid ""
"#=> Sends MIDI note on for :e3 with release velocity 100\n"
msgstr ""

#: lang.json:midi_note_off:examples:4:comments
msgid ""
"#=> Scales release velocity 0.8 to MIDI value 102 and sends MIDI note off for "
":e3 with release velocity 102\n"
msgstr ""

#: lang.json:midi_note_off:examples:5:comments
msgid ""
"#=> Rounds params up or down to the nearest whole number and sends MIDI note o"
"ff for note 60 with velocity 51\n"
msgstr ""

#: lang.json:midi_note_off:examples:6:comments
msgid ""
"#=> Send MIDI note off on :e3 to channels 1, 3, 5 on all connected ports\n"
msgstr ""

#: lang.json:midi_note_off:examples:7:comments
msgid ""
"#=> Send MIDI note off on :e3 to on all channels on ports named \"foo\" and \"bar"
"\"\n"
msgstr ""

#: lang.json:midi_note_off:examples:8:comments
msgid ""
"#=> Send MIDI note off on :e3 only on channel 1 on port \"foo\"\n"
msgstr ""

#: lang.json:midi_note_off:opts:channel:description
msgid "MIDI channel(s) to send event on as a number or list of numbers."
msgstr ""

#: lang.json:midi_note_off:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi note off message from being se"
"nt out. (Ensures all opts are evaluated in this call to `midi_note_off` regard"
"less of value)."
msgstr ""

#: lang.json:midi_note_off:opts:port:description
msgid "MIDI port(s) to send to as a string or list of strings."
msgstr ""

#: lang.json:midi_note_off:opts:vel_f:description
msgid ""
"Release velocity as a value between 0 and 1 (will be converted to a MIDI veloc"
"ity)"
msgstr ""

#: lang.json:midi_note_off:opts:velocity:description
msgid "Release velocity as a MIDI number."
msgstr ""

#: lang.json:midi_note_off:summary
msgid "Send MIDI note off message"
msgstr ""

#: lang.json:midi_note_on:description
msgid ""
"Sends a MIDI Note On Event to *all* connected devices on *all* channels. Use t"
"he `port:` and `channel:` opts to indepently restrict which MIDI ports and cha"
"nnels are used.\n"
"\n"
"Note and velocity values can be passed as a note symbol such as `:e3` or a MID"
"I number such as 52. Decimal values will be rounded down or up to the nearest "
"whole number - so values between 3.5 and 4 will be rounded up to 4 and values "
"between 3.49999... and 3 will be rounded down to 3. These values will also be "
"clipped within the range 0->127 so all values lower than 0 will be increased t"
"o 0 and all values greater than 127 will be reduced to 127.\n"
"\n"
"The `velocity` param may be omitted - in which case it will default to 127 unl"
"ess you supply it as an opt via the keys `velocity:` or `vel_f:`.\n"
"\n"
"You may also optionally pass the velocity value as a floating point value betw"
"een 0 and 1 such as 0.2 or 0.785 (which will be linearly mapped to MIDI values"
" between 0 and 127) using the vel_f: opt.\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Note on event](https://www."
"midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_note_on:examples:0:comments
msgid ""
"#=> Sends MIDI note on :e3 with the default velocity of 12 to all ports and ch"
"annels\n"
msgstr ""

#: lang.json:midi_note_on:examples:1:comments
msgid ""
"#=> Sends MIDI note on :e3 with velocity 12 to all channels\n"
msgstr ""

#: lang.json:midi_note_on:examples:2:comments
msgid ""
"#=> Sends MIDI note on :e3 with velocity 12 on channel 3\n"
msgstr ""

#: lang.json:midi_note_on:examples:3:comments
msgid ""
"#=> Sends MIDI note on for :e3 with velocity 100\n"
msgstr ""

#: lang.json:midi_note_on:examples:4:comments
msgid ""
"#=> Scales velocity 0.8 to MIDI value 102 and sends MIDI note on for :e3 with "
"velocity 102\n"
msgstr ""

#: lang.json:midi_note_on:examples:5:comments
msgid ""
"#=> Rounds params up or down to the nearest whole number and sends MIDI note o"
"n for note 60 with velocity 51\n"
msgstr ""

#: lang.json:midi_note_on:examples:6:comments
msgid ""
"#=> Send MIDI note :e3 on to channels 1, 3, 5 on all connected ports\n"
msgstr ""

#: lang.json:midi_note_on:examples:7:comments
msgid ""
"#=> Send MIDI note :e3 on to on all channels on ports named \"foo\" and \"bar\"\n"
msgstr ""

#: lang.json:midi_note_on:examples:8:comments
msgid ""
"#=> Send MIDI note :e3 on only on channel 1 on port \"foo\"\n"
msgstr ""

#: lang.json:midi_note_on:opts:channel:description
#: lang.json:use_merged_midi_defaults:opts:channel:description
#: lang.json:use_midi_defaults:opts:channel:description
#: lang.json:with_merged_midi_defaults:opts:channel:description
#: lang.json:with_midi_defaults:opts:channel:description
msgid "MIDI channel(s) to send event on"
msgstr ""

#: lang.json:midi_note_on:opts:on:description
#: lang.json:use_merged_midi_defaults:opts:on:description
#: lang.json:use_midi_defaults:opts:on:description
#: lang.json:with_merged_midi_defaults:opts:on:description
#: lang.json:with_midi_defaults:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi note on message from being sen"
"t out. (Ensures all opts are evaluated in this call to `midi_note_on` regardle"
"ss of value)."
msgstr ""

#: lang.json:midi_note_on:opts:vel_f:description
#: lang.json:use_merged_midi_defaults:opts:vel_f:description
#: lang.json:use_midi_defaults:opts:vel_f:description
#: lang.json:with_merged_midi_defaults:opts:vel_f:description
#: lang.json:with_midi_defaults:opts:vel_f:description
msgid ""
"Velocity as a value between 0 and 1 (will be converted to a MIDI velocity betw"
"een 0 and 127)"
msgstr ""

#: lang.json:midi_note_on:opts:velocity:description
#: lang.json:use_merged_midi_defaults:opts:velocity:description
#: lang.json:use_midi_defaults:opts:velocity:description
#: lang.json:with_merged_midi_defaults:opts:velocity:description
#: lang.json:with_midi_defaults:opts:velocity:description
msgid "Note velocity as a MIDI number."
msgstr ""

#: lang.json:midi_note_on:summary
msgid "Send MIDI note on message"
msgstr ""

#: lang.json:midi_notes:description
msgid ""
"Create a new immutable ring buffer of notes from args. Indexes wrap around pos"
"itively and negatively. Final ring consists only of MIDI numbers and nil."
msgstr ""

#: lang.json:midi_notes:examples:0:comments
msgid ""
"#=> (ring 50, 62, 74)\n"
msgstr ""

#: lang.json:midi_notes:examples:1:comments
msgid ""
"#=> (ring 50, 62, nil)\n"
msgstr ""

#: lang.json:midi_notes:summary
msgid "Create a ring buffer of midi note numbers"
msgstr ""

#: lang.json:midi_pc:description
msgid ""
"Sends a MIDI program change message to *all* connected devices on *all* channe"
"ls. Use the `port:` and `channel:` opts to restrict which MIDI ports and chann"
"els are used.\n"
"\n"
"Program number can be passed as a note such as `:e3` and decimal values will b"
"e rounded down or up to the nearest whole number - so values between 3.5 and 4"
" will be rounded up to 4 and values between 3.49999... and 3 will be rounded d"
"own to 3.\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Program change](https://www"
".midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_pc:examples:0:comments lang.json:midi_pc:examples:1:comments
msgid ""
"#=> Sends MIDI pc message to all ports and channels\n"
msgstr ""

#: lang.json:midi_pc:examples:2:comments lang.json:midi_pc:examples:3:comments
msgid ""
"#=> Sends MIDI pc message on channel 5 to all ports\n"
msgstr ""

#: lang.json:midi_pc:examples:4:comments
msgid ""
"#=> Sends MIDI pc message on channel 1 and 5 to all ports\n"
msgstr ""

#: lang.json:midi_pc:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi pc message from being sent out"
". (Ensures all opts are evaluated in this call to `midi_pc` regardless of valu"
"e)."
msgstr ""

#: lang.json:midi_pc:summary
msgid "Send MIDI program change message"
msgstr ""

#: lang.json:midi_pitch_bend:description
msgid ""
"Sends a MIDI pitch bend message to *all* connected devices on *all* channels. "
"Use the `port:` and `channel:` opts to restrict which MIDI ports and channels "
"are used.\n"
"\n"
"Delta value is between 0 and 1 with 0.5 representing no pitch bend, 1 max pitc"
"h bend and 0 minimum pitch bend.\n"
"\n"
"Typical MIDI values such as note or cc are represented with 7 bit numbers whic"
"h translates to the range 0-127. This makes sense for keyboards which have at "
"most 88 keys. However, it translates to a poor resolution when working with pi"
"tch bend. Therefore, pitch bend is unlike most MIDI values in that it has a mu"
"ch greater range: 0 - 16383 (by virtue of being represented by 14 bits).\n"
"\n"
"* It is also possible to specify the delta value as a (14 bit) MIDI pitch bend"
" value between 0 and 16383 using the `delta_midi:` opt.\n"
"* When using the `delta_midi:` opt no pitch bend is the value 8192\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Pitch Bend Change](https://"
"www.midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_pitch_bend:examples:0:comments
msgid ""
"#=> Sends MIDI pitch bend message with value 0 to all ports and channels\n"
msgstr ""

#: lang.json:midi_pitch_bend:examples:1:comments
msgid ""
"#=> Sends MIDI pitch bend message with value 16383 to all ports and channels\n"
msgstr ""

#: lang.json:midi_pitch_bend:examples:2:comments
#: lang.json:midi_pitch_bend:examples:3:comments
msgid ""
"#=> Sends MIDI pitch bend message with value 8192 to all ports and channels\n"
msgstr ""

#: lang.json:midi_pitch_bend:examples:4:comments
msgid ""
"#=> Sends MIDI pitch bend message with value 0 on channel 1 and 5 to all ports"
"\n"
msgstr ""

#: lang.json:midi_pitch_bend:opts:delta:description
msgid ""
"Pitch bend value as a number between 0 and 1 (will be converted to a value bet"
"ween 0 and 16383). No bend is the central value 0.5"
msgstr ""

#: lang.json:midi_pitch_bend:opts:delta_midi:description
msgid ""
"Pitch bend value as a number between 0 and 16383 inclusively. No bend is centr"
"al value 8192."
msgstr ""

#: lang.json:midi_pitch_bend:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi pitch bend message from being "
"sent out. (Ensures all opts are evaluated in this call to `midi_pitch_bend` re"
"gardless of value)."
msgstr ""

#: lang.json:midi_pitch_bend:summary
msgid "Send MIDI pitch bend message"
msgstr ""

#: lang.json:midi_poly_pressure:description
msgid ""
"Sends a MIDI polyphonic key pressure message to *all* connected devices on *al"
"l* channels. Use the `port:` and `channel:` opts to restrict which MIDI ports "
"and channels are used.\n"
"\n"
"Note number and pressure value can be passed as a note such as `:e3` and decim"
"al values will be rounded down or up to the nearest whole number - so values b"
"etween 3.5 and 4 will be rounded up to 4 and values between 3.49999... and 3 w"
"ill be rounded down to 3.\n"
"\n"
"You may also optionally pass the pressure value as a floating point value betw"
"een 0 and 1 such as 0.2 or 0.785 (which will be mapped to MIDI values between "
"0 and 127) using the `val_f:` opt.\n"
"\n"
"[MIDI 1.0 Specification - Channel Voice Messages - Polyphonic Key Pressure (Af"
"tertouch)](https://www.midi.org/specifications/item/table-1-summary-of-midi-me"
"ssage)\n"
msgstr ""

#: lang.json:midi_poly_pressure:examples:0:comments
#: lang.json:midi_poly_pressure:examples:1:comments
msgid ""
"#=> Sends a MIDI poly key pressure message to control note 100 with value 32 t"
"o all ports and channels\n"
msgstr ""

#: lang.json:midi_poly_pressure:examples:2:comments
msgid ""
"#=> Sends MIDI poly key pressure message to control note 100 with value 32 on "
"channel 5 to all ports\n"
msgstr ""

#: lang.json:midi_poly_pressure:examples:3:comments
msgid ""
"#=> Sends a MIDI poly key pressure message to control note 100 with value 102 "
"on channel 5 to all ports\n"
msgstr ""

#: lang.json:midi_poly_pressure:examples:4:comments
msgid ""
"#=> Sends MIDI poly key pressure message to control note 100 with value 102 on"
" channel 1 and 5 to all ports\n"
msgstr ""

#: lang.json:midi_poly_pressure:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi poly pressure message from bei"
"ng sent out. (Ensures all opts are evaluated in this call to `midi_poly_pressu"
"re` regardless of value)."
msgstr ""

#: lang.json:midi_poly_pressure:summary
msgid "Send a MIDI polyphonic key pressure message"
msgstr ""

#: lang.json:midi_raw:description
msgid ""
"Sends the raw MIDI message to *all* connected MIDI devices. Gives you direct a"
"ccess to sending the individual bytes of a MIDI message. Typically this should"
" be rarely used - prefer the other `midi_` fns where possible.\n"
"\n"
"A raw MIDI message consists of multiple bytes as numbers in decimal notation ("
"i.e. 176), hex (0xb0) or binary (0b10110000).\n"
"\n"
"See https://www.midi.org/specifications/item/table-1-summary-of-midi-message f"
"or a summary of MIDI messages and their corresponding byte structures.\n"
msgstr ""

#: lang.json:midi_raw:examples:0:comments
#: lang.json:midi_raw:examples:2:comments
#: lang.json:midi_raw:examples:3:comments
msgid ""
"#=> Sends the MIDI reset command\n"
msgstr ""

#: lang.json:midi_raw:examples:1:comments
msgid ""
"#=> Sends the MIDI reset command (values are rounded down, up and down respect"
"ively)\n"
msgstr ""

#: lang.json:midi_raw:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the raw midi message from being sent ou"
"t. (Ensures all opts are evaluated in this call to `midi_raw` regardless of va"
"lue)."
msgstr ""

#: lang.json:midi_raw:opts:port:description
msgid "Port(s) to send the raw MIDI message events to"
msgstr ""

#: lang.json:midi_raw:summary
msgid "Send raw MIDI message"
msgstr ""

#: lang.json:midi_reset:description
msgid ""
"Sends a MIDI reset all controllers message to *all* connected devices on *all*"
" channels. Use the `port:` and `channel:` opts to restrict which MIDI ports an"
"d channels are used.\n"
"\n"
"All controller values are reset to their defaults.\n"
"\n"
"[MIDI 1.0 Specification - Channel Mode Messages - Reset All Controllers](https"
"://www.midi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_reset:examples:0:comments
msgid ""
"#=> Reset MIDI devices on all channels (and ports)\n"
msgstr ""

#: lang.json:midi_reset:examples:1:comments
msgid ""
"#=> Reset MIDI devices on channel 2\n"
msgstr ""

#: lang.json:midi_reset:opts:channel:description
msgid "Channel to send the midi reset message to"
msgstr ""

#: lang.json:midi_reset:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi reset message from being sent "
"out. (Ensures all opts are evaluated in this call to `midi_reset` regardless o"
"f value)."
msgstr ""

#: lang.json:midi_reset:opts:value:description
msgid ""
"Value must only be zero (the default) unless otherwise allowed in a specific R"
"ecommended Practice"
msgstr ""

#: lang.json:midi_reset:summary
msgid "Reset MIDI devices"
msgstr ""

#: lang.json:midi_sound_off:description
msgid ""
"Sends a MIDI sound off message to *all* connected devices on *all* channels. U"
"se the `port:` and `channel:` opts to restrict which MIDI ports and channels a"
"re used.\n"
"\n"
"All oscillators will turn off, and their volume envelopes are set to zero as s"
"oon as possible.\n"
"\n"
"[MIDI 1.0 Specification - Channel Mode Messages - All Sound Off](https://www.m"
"idi.org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_sound_off:examples:0:comments
msgid ""
"#=> Silence MIDI devices on all ports and channels\n"
msgstr ""

#: lang.json:midi_sound_off:examples:1:comments
msgid ""
"#=> Silence MIDI devices on channel 2\n"
msgstr ""

#: lang.json:midi_sound_off:opts:channel:description
msgid "Channel to send the sound off message to"
msgstr ""

#: lang.json:midi_sound_off:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi sound off on message from bein"
"g sent out. (Ensures all opts are evaluated in this call to `midi_sound_off` r"
"egardless of value)."
msgstr ""

#: lang.json:midi_sound_off:summary
msgid "Silence all MIDI devices"
msgstr ""

#: lang.json:midi_start:description
msgid ""
"Sends the MIDI start system message to *all* connected MIDI devices on *all* p"
"orts.  Use the `port:` opt to restrict which MIDI ports are used.\n"
"\n"
"Start the current sequence playing. (This message should be followed with call"
"s to `midi_clock_tick` or `midi_clock_beat`).\n"
"\n"
"[MIDI 1.0 Specification - System Real-Time Messages - Start](https://www.midi."
"org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_start:examples:0:comments
msgid ""
"#=> Send start message to all connected MIDI devices\n"
msgstr ""

#: lang.json:midi_start:summary
msgid "Send MIDI system message - start"
msgstr ""

#: lang.json:midi_stop:description
msgid ""
"Sends the MIDI stop system message to *all* connected MIDI devices on *all* po"
"rts.  Use the `port:` opt to restrict which MIDI ports are used.\n"
"\n"
"Stops the current sequence.\n"
"\n"
"[MIDI 1.0 Specification - System Real-Time Messages - Start](https://www.midi."
"org/specifications/item/table-1-summary-of-midi-message)\n"
msgstr ""

#: lang.json:midi_stop:examples:0:comments
msgid ""
"#=> Send stop message to all connected MIDI devices\n"
msgstr ""

#: lang.json:midi_stop:opts:port:description
msgid "MIDI Port(s) to send the stop message to"
msgstr ""

#: lang.json:midi_stop:summary
msgid "Send MIDI system message - stop"
msgstr ""

#: lang.json:midi_sysex:description
msgid ""
"Sends the MIDI SysEx message to *all* connected MIDI devices.\n"
"\n"
"MIDI SysEx messages, unlike all other MIDI messages, are variable in length. T"
"hey allow MIDI device manufacturers to define device-specific messages, for ex"
"ample loading/saving patches, or programming device features such as illuminat"
"ed buttons.\n"
"\n"
"Floats will be rounded up or down to the nearest whole number e.g. 176.1 -> 17"
"6, 120.5 -> 121, 0.49 -> 0.\n"
"\n"
"Non-number values will be automatically turned into numbers prior to sending t"
"he event if possible (if this conversion does not work an Error will be thrown"
").\n"
msgstr ""

#: lang.json:midi_sysex:examples:0:comments
msgid ""
"#=> Program an Arturia Beatstep controller to turn the eighth pad pink\n"
msgstr ""

#: lang.json:midi_sysex:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the midi SysEx message from being sent "
"out. (Ensures all opts are evaluated in this call to `midi_sysex` regardless o"
"f value)."
msgstr ""

#: lang.json:midi_sysex:opts:port:description
msgid "Port(s) to send the MIDI SysEx message events to"
msgstr ""

#: lang.json:midi_sysex:summary
msgid "Send MIDI System Exclusive (SysEx) message"
msgstr ""

#: lang.json:midi_to_hz:description
msgid "Convert a midi note to hz"
msgstr ""

#: lang.json:midi_to_hz:examples:0:comments
msgid ""
"#=> 261.6256\n"
msgstr ""

#: lang.json:midi_to_hz:summary
msgid "MIDI to Hz conversion"
msgstr ""

#: lang.json:ndefine:description
msgid ""
"Does nothing. Use to stop a define from actually defining. Simpler than wrappi"
"ng whole define in a comment block or commenting each individual line out."
msgstr ""

#: lang.json:note:description
msgid ""
"Takes a midi note, a symbol (e.g. `:C`) or a string (e.g. `\"C\"`) and resolves "
"it to a midi note. You can also pass an optional `octave:` parameter to get th"
"e midi note for a given octave. Please note - `octave:` param overrides any oc"
"tave specified in a symbol i.e. `:c3`. If the note is `nil`, `:r` or `:rest`, "
"then `nil` is returned (`nil` represents a rest)"
msgstr ""

#: lang.json:note:examples:0:comments
msgid ""
"# These all return 60 which is the midi number for middle C (octave 4)\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:note:examples:1:comments
msgid ""
"# returns 60 - octave param has no effect if we pass in a number\n"
" \n"
"# These all return 36 which is the midi number for C2 (two octaves below middl"
"e C)\n"
" \n"
"# note the octave param overrides any octaves specified in a symbol\n"
" \n"
msgstr ""

#: lang.json:note:opts:octave:description
#: lang.json:note_info:opts:octave:description
msgid ""
"The octave of the note. Overrides any octave declaration in the note symbol su"
"ch as :c2. Default is 4"
msgstr ""

#: lang.json:note:summary
msgid "Describe note"
msgstr ""

#: lang.json:note_info:description
msgid ""
"Returns an instance of `SonicPi::Note`. Please note - `octave:` param override"
"s any octave specified in a symbol i.e. `:c3`"
msgstr ""

#: lang.json:note_info:examples:0:comments
msgid ""
" \n"
"# returns #<SonicPi::Note :C2>\n"
msgstr ""

#: lang.json:note_info:summary
msgid "Get note info"
msgstr ""

#: lang.json:note_range:description
msgid ""
"Produces a ring of all the notes between a low note and a high note. By defaul"
"t this is chromatic (all the notes) but can be filtered with a pitches: argume"
"nt. This opens the door to arpeggiator style sequences and other useful patter"
"ns. If you try to specify only pitches which aren't in the range it will raise"
" an error - you have been warned!"
msgstr ""

#: lang.json:note_range:examples:0:comments
msgid ""
"# => (ring 60,61,62,63,64,65,66,67,68,69,70,71,72)\n"
msgstr ""

#: lang.json:note_range:examples:1:comments
msgid ""
"# => (ring 60,64,67,72)\n"
msgstr ""

#: lang.json:note_range:examples:2:comments
msgid ""
"# => (ring 60,64,67,72,76,79,84)\n"
msgstr ""

#: lang.json:note_range:examples:3:comments
msgid ""
"# => (ring 60,62,64,65,67,69,71,72)\n"
msgstr ""

#: lang.json:note_range:examples:4:comments
msgid ""
"# => (ring 60,67,72)\n"
msgstr ""

#: lang.json:note_range:examples:5:comments
msgid ""
" \n"
"# try changing the chord\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:note_range:opts:pitches:description
msgid ""
"An array of notes (symbols or ints) to filter on. Octave information is ignore"
"d."
msgstr ""

#: lang.json:note_range:summary
msgid "Get a range of notes"
msgstr ""

#: lang.json:octs:description
msgid "Create a ring of successive octaves starting at `start` for `num_octaves`. "
msgstr ""

#: lang.json:octs:examples:0:comments
msgid ""
"#=> (ring 60, 72)\n"
msgstr ""

#: lang.json:octs:examples:1:comments
msgid ""
"#=> (ring 52, 64, 76)\n"
msgstr ""

#: lang.json:octs:summary
msgid "Create a ring of octaves"
msgstr ""

#: lang.json:on:description
msgid ""
"Optionally evaluate the block depending on the truthiness of the supplied cond"
"ition. The truthiness rules are as follows: all values are seen as true except"
" for: false, nil and 0. Lambdas will be automatically called and the truthines"
"s of their results used."
msgstr ""

#: lang.json:on:examples:0:comments
msgid ""
" \n"
"#=> will play 70 as true is truthy\n"
" \n"
msgstr ""

#: lang.json:on:examples:1:comments
msgid ""
" \n"
"#=> will play 70 as 1 is truthy\n"
" \n"
msgstr ""

#: lang.json:on:examples:2:comments
msgid ""
" \n"
"#=> will *not* play 70 as 0 is not truthy\n"
" \n"
msgstr ""

#: lang.json:on:examples:3:comments
msgid ""
" \n"
"#=> will *not* play 70 as false is not truthy\n"
" \n"
msgstr ""

#: lang.json:on:examples:4:comments
msgid ""
" \n"
"#=> will *not* play 70 as nil is not truthy\n"
" \n"
msgstr ""

#: lang.json:on:examples:5:comments
msgid ""
" \n"
"#=> will play 70 as the lambda returns a truthy value\n"
" \n"
msgstr ""

#: lang.json:on:examples:6:comments
msgid ""
" \n"
"#=> will *not* play 70 as the lambda does not return a truthy value\n"
" \n"
msgstr ""

#: lang.json:on:examples:7:comments
msgid ""
" \n"
"#=> will maybe play 70 depending on the choice in the lambda\n"
" \n"
msgstr ""

#: lang.json:on:summary
msgid "Optionally evaluate block"
msgstr ""

#: lang.json:one_in:description
msgid ""
"Returns `true` or `false` with a specified probability - it will return true e"
"very one in num times where num is the param you specify"
msgstr ""

#: lang.json:one_in:examples:0:comments
msgid ""
"# will return true with a probability of 1/2, false with probability 1/2\n"
msgstr ""

#: lang.json:one_in:examples:1:comments
msgid ""
"# will return true with a probability of 1/3, false with a probability of 2/3\n"
msgstr ""

#: lang.json:one_in:examples:2:comments
msgid ""
"# will return true with a probability of 1/100, false with a probability of 99"
"/100\n"
msgstr ""

#: lang.json:one_in:summary
msgid "Random true value with specified probability"
msgstr ""

#: lang.json:osc:description
msgid ""
"Sends an OSC message to the current host and port specified by `use_osc` or `w"
"ith_osc`.\n"
"\n"
"OSC (Open Sound Control) is a simple way of passing messages between two separ"
"ate programs on the same computer or even on different computers via a local n"
"etwork or even the internet. `osc` enables you to send well-timed OSC messages"
" from within Sonic Pi. `osc` will ensure that the OSC message is sent at the c"
"orrect time using the same timing system shared with the synthesis functionali"
"ty via `sample`, `synth` and friends. `osc` even works seamlessly within `time"
"_warp` - see examples.\n"
"\n"
"A typical OSC message has two parts: a descriptive `path` which looks simalar "
"to a URL (website address), and an optional list of `arguments` that are eithe"
"r numbers or strings.\n"
"\n"
"For example, a hypothetical synth program might accept this OSC message:\n"
"\n"
"`/set/filter lowpass 80 0.5`\n"
"\n"
"where `/set/filter` is the path, and `lowpass`, `80`, and `0.5` are three\n"
"arguments. This can be sent from within Sonic Pi by writing:\n"
"\n"
"`osc \"/set/filter\", \"lowpass\", 80, 0.5`\n"
"\n"
"However, in order to send the OSC message you must first specify where to send"
" it to. This is achieved by specifying both the host (the machine's internet a"
"ddress) and the port that the remote OSC server is listening on. This is confi"
"gured using `use_osc` or `with_osc`. So, if our synth program was running on a"
" machine on the local network with IP address `10.0.1.5` on port `5100` we cou"
"ld send our OSC message to it with the following:\n"
"\n"
"\n"
"`use_osc \"10.0.1.5\", 5100`\n"
"\n"
"`osc \"/set/filter\", \"lowpass\", 80, 0.5`\n"
"\n"
"\n"
"Note, by default, Sonic Pi listens for OSC messages on port `4560`, so you may"
" send messages to an external machine running Sonic Pi if you know the IP addr"
"ess of that external machine. Any OSC messages received on port `4559` are aut"
"omatically converted to standard cue events and displayed in the GUI's cue log"
". This also means that you can use `sync` to wait for the next incoming OSC me"
"ssage with a given path (see example).\n"
"\n"
"Finally, it is also very useful to send OSC messages to aother programs on the"
" same computer. This can be achieved by specifying \"localhost\" as the hostname"
" and the port as normal (depending on which port the other program is listenin"
"g on).\n"
"\n"
"See `osc_send` for a version which allows you to specify the hostname and port"
" directly (ignoring any values set via `use_osc` or `with_osc`).\n"
"\n"
"For further information see the OSC spec: [http://opensoundcontrol.org/spec-1_"
"0](http://opensoundcontrol.org/spec-1_0)\n"
msgstr ""

#: lang.json:osc:examples:0:comments lang.json:use_osc:examples:0:comments
msgid ""
"# Send a simple OSC message to another program on the same machine\n"
"# Specify port 7000 on this machine\n"
"# Send an OSC message with path \"/foo/bar\"\n"
"# and no arguments\n"
msgstr ""

#: lang.json:osc:examples:1:comments
msgid ""
"# Send an OSC messages with arguments to another program on the same machine\n"
"# Specify port 7000 on this machine\n"
"# Send an OSC message with path \"/foo/bar\"\n"
"# and three arguments:\n"
"# 1) The whole number (integer) 1\n"
"# 2) The fractional number (float) 3.89\n"
"# 3) The string \"baz\"\n"
msgstr ""

#: lang.json:osc:examples:2:comments
msgid ""
"# Send an OSC messages with arguments to another program on a different machin"
"e\n"
"# Specify port 7000 on the machine with address 10.0.1.5\n"
"# Send an OSC message with path \"/foo/bar\"\n"
"# and three arguments:\n"
"# 1) The whole number (integer) 1\n"
"# 2) The fractional number (float) 3.89\n"
"# 3) The string \"baz\"\n"
msgstr ""

#: lang.json:osc:examples:3:comments
msgid ""
"# OSC messages honour the timing system\n"
"# Send an OSC message with path /foo/bar at *exactly* the\n"
"# same time as note 60 is played\n"
"# Wait for 1 beat\n"
"# Send an OSC message with path /baz/quux at *exactly* the\n"
"# same time as note 72 is played\n"
msgstr ""

#: lang.json:osc:examples:4:comments
msgid ""
"# Send a incrementing OSC counter\n"
"# Start a live loop called :foo\n"
"# Send an OSC message with the path /counter\n"
"# with successive whole numbers (0, 1, 2, 3.. etc.)\n"
"# each time round the live loop\n"
"# Repeat the live loop every 1 beat\n"
" \n"
msgstr ""

#: lang.json:osc:examples:5:comments
msgid ""
"# OSC messages can be sent from within time_warp\n"
" \n"
"# Send an OSC message with path /foo/bar at 0.5 beats\n"
" \n"
"# Wait for 1 beat\n"
" \n"
"# Send an OSC message with path /baz/quux at 0.9 beats\n"
" \n"
msgstr ""

#: lang.json:osc:summary
msgid "Send an OSC message (Open Sound Control)"
msgstr ""

#: lang.json:osc_send:description
msgid ""
"Similar to `osc` except ignores any `use_osc` settings and sends the OSC messa"
"ge directly to the specified `hostname` and `port`.\n"
"\n"
"See `osc` for more information."
msgstr ""

#: lang.json:osc_send:examples:0:comments
msgid ""
"# Send an OSC message to port 7000 on the same machine\n"
msgstr ""

#: lang.json:osc_send:examples:1:comments
msgid ""
"# set hostname and port\n"
"# Send an OSC message to port 7010\n"
"# Send an OSC message to port 7000\n"
"# (ignores use_osc settings)\n"
msgstr ""

#: lang.json:osc_send:summary
msgid "Send an OSC message to a specific host and port"
msgstr ""

#: lang.json:pick:description
msgid ""
"Pick n elements from list or ring. Unlike shuffle, after each element has been"
" picked, it is 'returned' to the list so it may be picked again. This means th"
"ere may be duplicates in the result. If n is greater than the size of the ring"
"/list then duplicates are guaranteed to be in the result.\n"
"\n"
"If `n` isn't supplied it defaults to a size of 1.\n"
"\n"
"If no arguments are given, will return a lambda function which when called tak"
"es an argument which will be a list to be picked from. This is useful for choo"
"sing random `onset:` vals for samples.\n"
"\n"
"Always returns a list-like thing (either an array or ring)"
msgstr ""

#: lang.json:pick:examples:0:comments
msgid ""
"#=> [4, 4, 3]\n"
msgstr ""

#: lang.json:pick:examples:1:comments
msgid ""
"#=> (ring 4, 4, 3)\n"
msgstr ""

#: lang.json:pick:examples:2:comments
msgid ""
"#=> (ring 2, 2, 1, 1, 1)\n"
msgstr ""

#: lang.json:pick:examples:3:comments
msgid ""
"#=> (ring 3)\n"
msgstr ""

#: lang.json:pick:examples:4:comments
msgid ""
"# Using pick for random sample onsets\n"
" \n"
"# pick a random onset value each time\n"
" \n"
" \n"
msgstr ""

#: lang.json:pick:opts:skip:description
msgid "Number of rands to skip over with each successive pick"
msgstr ""

#: lang.json:pick:summary
msgid "Randomly pick from list (with duplicates)"
msgstr ""

#: lang.json:pitch_to_ratio:description
msgid ""
"Convert a midi note to a ratio which when applied to a frequency will scale th"
"e frequency by the number of semitones. Useful for changing the pitch of a sam"
"ple by using it as a way of generating the rate."
msgstr ""

#: lang.json:pitch_to_ratio:examples:0:comments
msgid ""
"#=> 2.0\n"
msgstr ""

#: lang.json:pitch_to_ratio:examples:1:comments
msgid ""
"#=> 1.05946\n"
msgstr ""

#: lang.json:pitch_to_ratio:examples:2:comments
msgid ""
"#=> 0.5\n"
msgstr ""

#: lang.json:pitch_to_ratio:examples:3:comments
msgid ""
"# Plays :ambi_choir 3 semitones above default.\n"
msgstr ""

#: lang.json:pitch_to_ratio:examples:4:comments
msgid ""
"# Play a chromatic scale of semitones\n"
"# For each note in the range 0->16\n"
"# play :ambi_choir at the relative pitch\n"
"# and wait between notes\n"
" \n"
msgstr ""

#: lang.json:pitch_to_ratio:summary
msgid "relative MIDI pitch to frequency ratio"
msgstr ""

#: lang.json:play:description
msgid ""
"Play note with current synth. Accepts a set of standard options which include "
"control of an amplitude envelope with `attack:`, `decay:`, `sustain:` and `rel"
"ease:` phases. These phases are triggered in order, so the duration of the sou"
"nd is attack + decay + sustain + release times. The duration of the sound does"
" not affect any other notes. Code continues executing whilst the sound is play"
"ing through its envelope phases.\n"
"\n"
"If `duration:` is supplied and `sustain:` isn't, it causes `sustain:` to be se"
"t so that all four phases add up to the duration.\n"
"\n"
"Accepts optional args for modification of the synth being played. See each syn"
"th's documentation for synth-specific opts. See `use_synth` and `with_synth` f"
"or changing the current synth.\n"
"\n"
"If note is `nil`, `:r` or `:rest`, play is ignored and treated as a rest. Also"
", if the `on:` opt is specified and returns `false`, or `nil` then play is sim"
"ilarly ignored and treated as a rest.\n"
"\n"
"Note that the default opts listed are only a guide to the most common opts acr"
"oss all the synths. Not all synths support all the default opts and each synth"
" typically supports many more opts specific to that synth. For example, the `:"
"tb303` synth supports 45 unique opts. For a full list of a synth's opts see it"
"s documentation in the Help system.\n"
"    "
msgstr ""

#: lang.json:play:examples:0:comments
msgid ""
"# Plays note 50 on the current synth\n"
msgstr ""

#: lang.json:play:examples:1:comments
msgid ""
"# Plays note 50 with a fade-in time of 1s\n"
msgstr ""

#: lang.json:play:examples:2:comments
msgid ""
"# Play note 62 in the left ear with a fade-out time of 3s.\n"
msgstr ""

#: lang.json:play:examples:3:comments
msgid ""
"# controlling a synth synchronously\n"
" \n"
" \n"
" \n"
" \n"
" \n"
"# This is triggered after 1.5s from start\n"
msgstr ""

#: lang.json:play:examples:4:comments
msgid ""
"# Controlling a synth asynchronously\n"
" \n"
"# This block is run in an implicit in_thread\n"
"# and therefore is asynchronous\n"
" \n"
" \n"
" \n"
"# This is triggered after 0.5s from start\n"
msgstr ""

#: lang.json:play:opts:amp:description
#: lang.json:play_chord:opts:amp:description
#: lang.json:play_pattern_timed:opts:amp:description
#: lang.json:synth:opts:amp:description
msgid "The amplitude of the note"
msgstr ""

#: lang.json:play:opts:amp_slide:description
#: lang.json:play_chord:opts:amp_slide:description
#: lang.json:play_pattern_timed:opts:amp_slide:description
#: lang.json:synth:opts:amp_slide:description
msgid "The duration in beats for amplitude changes to take place"
msgstr ""

#: lang.json:play:opts:attack:description
#: lang.json:play_chord:opts:attack:description
#: lang.json:play_pattern_timed:opts:attack:description
#: lang.json:synth:opts:attack:description
msgid ""
"Amount of time (in beats) for sound to reach full amplitude (attack_level). A "
"short attack (i.e. 0.01) makes the initial part of the sound very percussive l"
"ike a sharp tap. A longer attack (i.e 1) fades the sound in gently."
msgstr ""

#: lang.json:play:opts:attack_level:description
#: lang.json:play_chord:opts:attack_level:description
#: lang.json:play_pattern_timed:opts:attack_level:description
#: lang.json:synth:opts:attack_level:description
#: synths.json:beep:opts:attack_level:description
#: synths.json:blade:opts:attack_level:description
#: synths.json:bnoise:opts:attack_level:description
#: synths.json:chipbass:opts:attack_level:description
#: synths.json:chiplead:opts:attack_level:description
#: synths.json:chipnoise:opts:attack_level:description
#: synths.json:cnoise:opts:attack_level:description
#: synths.json:dark_ambience:opts:attack_level:description
#: synths.json:dpulse:opts:attack_level:description
#: synths.json:dsaw:opts:attack_level:description
#: synths.json:dtri:opts:attack_level:description
#: synths.json:dull_bell:opts:attack_level:description
#: synths.json:fm:opts:attack_level:description
#: synths.json:gnoise:opts:attack_level:description
#: synths.json:growl:opts:attack_level:description
#: synths.json:hollow:opts:attack_level:description
#: synths.json:hoover:opts:attack_level:description
#: synths.json:kalimba:opts:attack_level:description
#: synths.json:mod_dsaw:opts:attack_level:description
#: synths.json:mod_fm:opts:attack_level:description
#: synths.json:mod_pulse:opts:attack_level:description
#: synths.json:mod_saw:opts:attack_level:description
#: synths.json:mod_sine:opts:attack_level:description
#: synths.json:mod_tri:opts:attack_level:description
#: synths.json:noise:opts:attack_level:description
#: synths.json:piano:opts:attack_level:description
#: synths.json:pluck:opts:attack_level:description
#: synths.json:pnoise:opts:attack_level:description
#: synths.json:pretty_bell:opts:attack_level:description
#: synths.json:prophet:opts:attack_level:description
#: synths.json:pulse:opts:attack_level:description
#: synths.json:rodeo:opts:attack_level:description
#: synths.json:saw:opts:attack_level:description
#: synths.json:sound_in:opts:attack_level:description
#: synths.json:sound_in_stereo:opts:attack_level:description
#: synths.json:square:opts:attack_level:description
#: synths.json:subpulse:opts:attack_level:description
#: synths.json:supersaw:opts:attack_level:description
#: synths.json:tb303:opts:attack_level:description
#: synths.json:tech_saws:opts:attack_level:description
#: synths.json:tri:opts:attack_level:description
#: synths.json:zawa:opts:attack_level:description
msgid "Amplitude level reached after attack phase and immediately before decay phase"
msgstr ""

#: lang.json:play:opts:decay:description
#: lang.json:play_chord:opts:decay:description
#: lang.json:play_pattern_timed:opts:decay:description
#: lang.json:synth:opts:decay:description
#: synths.json:beep:opts:decay:description
#: synths.json:blade:opts:decay:description
#: synths.json:bnoise:opts:decay:description
#: synths.json:chipbass:opts:decay:description
#: synths.json:chiplead:opts:decay:description
#: synths.json:chipnoise:opts:decay:description
#: synths.json:cnoise:opts:decay:description
#: synths.json:dark_ambience:opts:decay:description
#: synths.json:dpulse:opts:decay:description
#: synths.json:dsaw:opts:decay:description
#: synths.json:dtri:opts:decay:description
#: synths.json:dull_bell:opts:decay:description
#: synths.json:fm:opts:decay:description
#: synths.json:gnoise:opts:decay:description
#: synths.json:growl:opts:decay:description
#: synths.json:hollow:opts:decay:description
#: synths.json:hoover:opts:decay:description
#: synths.json:mod_dsaw:opts:decay:description
#: synths.json:mod_fm:opts:decay:description
#: synths.json:mod_pulse:opts:decay:description
#: synths.json:mod_saw:opts:decay:description
#: synths.json:mod_sine:opts:decay:description
#: synths.json:mod_tri:opts:decay:description
#: synths.json:noise:opts:decay:description
#: synths.json:pnoise:opts:decay:description
#: synths.json:pretty_bell:opts:decay:description
#: synths.json:prophet:opts:decay:description
#: synths.json:pulse:opts:decay:description
#: synths.json:rodeo:opts:decay:description
#: synths.json:saw:opts:decay:description
#: synths.json:sound_in:opts:decay:description
#: synths.json:sound_in_stereo:opts:decay:description
#: synths.json:square:opts:decay:description
#: synths.json:subpulse:opts:decay:description
#: synths.json:supersaw:opts:decay:description
#: synths.json:tb303:opts:decay:description
#: synths.json:tech_saws:opts:decay:description
#: synths.json:tri:opts:decay:description
#: synths.json:zawa:opts:decay:description
msgid ""
"Amount of time (in beats) for the sound to move from full amplitude (attack_le"
"vel) to the sustain amplitude (sustain_level)."
msgstr ""

#: lang.json:play:opts:decay_level:description
#: lang.json:play_chord:opts:decay_level:description
#: lang.json:play_pattern_timed:opts:decay_level:description
#: lang.json:synth:opts:decay_level:description
#: synths.json:beep:opts:decay_level:description
#: synths.json:blade:opts:decay_level:description
#: synths.json:bnoise:opts:decay_level:description
#: synths.json:chipbass:opts:decay_level:description
#: synths.json:chiplead:opts:decay_level:description
#: synths.json:chipnoise:opts:decay_level:description
#: synths.json:cnoise:opts:decay_level:description
#: synths.json:dark_ambience:opts:decay_level:description
#: synths.json:dpulse:opts:decay_level:description
#: synths.json:dsaw:opts:decay_level:description
#: synths.json:dtri:opts:decay_level:description
#: synths.json:dull_bell:opts:decay_level:description
#: synths.json:fm:opts:decay_level:description
#: synths.json:gnoise:opts:decay_level:description
#: synths.json:growl:opts:decay_level:description
#: synths.json:hollow:opts:decay_level:description
#: synths.json:hoover:opts:decay_level:description
#: synths.json:kalimba:opts:decay_level:description
#: synths.json:mod_dsaw:opts:decay_level:description
#: synths.json:mod_fm:opts:decay_level:description
#: synths.json:mod_pulse:opts:decay_level:description
#: synths.json:mod_saw:opts:decay_level:description
#: synths.json:mod_sine:opts:decay_level:description
#: synths.json:mod_tri:opts:decay_level:description
#: synths.json:noise:opts:decay_level:description
#: synths.json:piano:opts:decay_level:description
#: synths.json:pluck:opts:decay_level:description
#: synths.json:pnoise:opts:decay_level:description
#: synths.json:pretty_bell:opts:decay_level:description
#: synths.json:prophet:opts:decay_level:description
#: synths.json:pulse:opts:decay_level:description
#: synths.json:rodeo:opts:decay_level:description
#: synths.json:saw:opts:decay_level:description
#: synths.json:sound_in:opts:decay_level:description
#: synths.json:sound_in_stereo:opts:decay_level:description
#: synths.json:square:opts:decay_level:description
#: synths.json:subpulse:opts:decay_level:description
#: synths.json:supersaw:opts:decay_level:description
#: synths.json:tb303:opts:decay_level:description
#: synths.json:tech_saws:opts:decay_level:description
#: synths.json:tri:opts:decay_level:description
#: synths.json:zawa:opts:decay_level:description
msgid ""
"Amplitude level reached after decay phase and immediately before sustain phase"
". Defaults to sustain_level unless explicitly set"
msgstr ""

#: lang.json:play:opts:env_curve:description
#: lang.json:play_chord:opts:env_curve:description
#: lang.json:play_pattern_timed:opts:env_curve:description
#: lang.json:synth:opts:env_curve:description
#: synths.json:beep:opts:env_curve:description
#: synths.json:blade:opts:env_curve:description
#: synths.json:bnoise:opts:env_curve:description
#: synths.json:chipbass:opts:env_curve:description
#: synths.json:chiplead:opts:env_curve:description
#: synths.json:chipnoise:opts:env_curve:description
#: synths.json:cnoise:opts:env_curve:description
#: synths.json:dark_ambience:opts:env_curve:description
#: synths.json:dpulse:opts:env_curve:description
#: synths.json:dsaw:opts:env_curve:description
#: synths.json:dtri:opts:env_curve:description
#: synths.json:dull_bell:opts:env_curve:description
#: synths.json:fm:opts:env_curve:description
#: synths.json:gnoise:opts:env_curve:description
#: synths.json:growl:opts:env_curve:description
#: synths.json:hollow:opts:env_curve:description
#: synths.json:hoover:opts:env_curve:description
#: synths.json:mod_dsaw:opts:env_curve:description
#: synths.json:mod_fm:opts:env_curve:description
#: synths.json:mod_pulse:opts:env_curve:description
#: synths.json:mod_saw:opts:env_curve:description
#: synths.json:mod_sine:opts:env_curve:description
#: synths.json:mod_tri:opts:env_curve:description
#: synths.json:noise:opts:env_curve:description
#: synths.json:pnoise:opts:env_curve:description
#: synths.json:pretty_bell:opts:env_curve:description
#: synths.json:prophet:opts:env_curve:description
#: synths.json:pulse:opts:env_curve:description
#: synths.json:saw:opts:env_curve:description
#: synths.json:sound_in:opts:env_curve:description
#: synths.json:sound_in_stereo:opts:env_curve:description
#: synths.json:square:opts:env_curve:description
#: synths.json:subpulse:opts:env_curve:description
#: synths.json:supersaw:opts:env_curve:description
#: synths.json:tb303:opts:env_curve:description
#: synths.json:tech_saws:opts:env_curve:description
#: synths.json:tri:opts:env_curve:description
msgid ""
"Select the shape of the curve between levels in the envelope. 1=linear, 2=expo"
"nential, 3=sine, 4=welch, 6=squared, 7=cubed"
msgstr ""

#: lang.json:play:opts:on:description lang.json:play_chord:opts:on:description
#: lang.json:play_pattern_timed:opts:on:description
#: lang.json:synth:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the synth from being played. Ensures al"
"l opts are evaluated."
msgstr ""

#: lang.json:play:opts:pan:description
#: lang.json:play_chord:opts:pan:description
#: lang.json:play_pattern_timed:opts:pan:description
#: lang.json:synth:opts:pan:description
msgid ""
"The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on t"
"he right. You may use a value in between -1 and 1 such as 0.25"
msgstr ""

#: lang.json:play:opts:pan_slide:description
#: lang.json:play_chord:opts:pan_slide:description
#: lang.json:play_pattern_timed:opts:pan_slide:description
#: lang.json:synth:opts:pan_slide:description
msgid "The duration in beats for the pan value to change"
msgstr ""

#: lang.json:play:opts:pitch:description
#: lang.json:play_chord:opts:pitch:description
#: lang.json:play_pattern_timed:opts:pitch:description
#: lang.json:synth:opts:pitch:description
msgid ""
"Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is "
"down an octave etc.  Decimal numbers can be used for fine tuning."
msgstr ""

#: lang.json:play:opts:release:description
#: lang.json:play_chord:opts:release:description
#: lang.json:play_pattern_timed:opts:release:description
#: lang.json:synth:opts:release:description
msgid ""
"Amount of time (in beats) for sound to move from sustain level amplitude to si"
"lent. A short release (i.e. 0.01) makes the final part of the sound very percu"
"ssive (potentially resulting in a click). A longer release (i.e 1) fades the s"
"ound out gently."
msgstr ""

#: lang.json:play:opts:slide:description
#: lang.json:play_chord:opts:slide:description
#: lang.json:play_pattern_timed:opts:slide:description
#: lang.json:synth:opts:slide:description
msgid ""
"Default slide time in beats for all slide opts. Individually specified slide o"
"pts will override this value"
msgstr ""

#: lang.json:play:opts:sustain:description
#: lang.json:play_chord:opts:sustain:description
#: lang.json:play_pattern_timed:opts:sustain:description
#: lang.json:synth:opts:sustain:description
#: synths.json:beep:opts:sustain:description
#: synths.json:blade:opts:sustain:description
#: synths.json:bnoise:opts:sustain:description
#: synths.json:chipbass:opts:sustain:description
#: synths.json:chiplead:opts:sustain:description
#: synths.json:chipnoise:opts:sustain:description
#: synths.json:cnoise:opts:sustain:description
#: synths.json:dark_ambience:opts:sustain:description
#: synths.json:dpulse:opts:sustain:description
#: synths.json:dsaw:opts:sustain:description
#: synths.json:dtri:opts:sustain:description
#: synths.json:dull_bell:opts:sustain:description
#: synths.json:fm:opts:sustain:description
#: synths.json:gnoise:opts:sustain:description
#: synths.json:growl:opts:sustain:description
#: synths.json:hollow:opts:sustain:description
#: synths.json:hoover:opts:sustain:description
#: synths.json:mod_dsaw:opts:sustain:description
#: synths.json:mod_fm:opts:sustain:description
#: synths.json:mod_pulse:opts:sustain:description
#: synths.json:mod_saw:opts:sustain:description
#: synths.json:mod_sine:opts:sustain:description
#: synths.json:mod_tri:opts:sustain:description
#: synths.json:noise:opts:sustain:description
#: synths.json:pnoise:opts:sustain:description
#: synths.json:pretty_bell:opts:sustain:description
#: synths.json:prophet:opts:sustain:description
#: synths.json:pulse:opts:sustain:description
#: synths.json:rodeo:opts:sustain:description
#: synths.json:saw:opts:sustain:description
#: synths.json:sound_in:opts:sustain:description
#: synths.json:sound_in_stereo:opts:sustain:description
#: synths.json:square:opts:sustain:description
#: synths.json:subpulse:opts:sustain:description
#: synths.json:supersaw:opts:sustain:description
#: synths.json:tb303:opts:sustain:description
#: synths.json:tech_saws:opts:sustain:description
#: synths.json:tri:opts:sustain:description
#: synths.json:zawa:opts:sustain:description
msgid ""
"Amount of time (in beats) for sound to remain at sustain level amplitude. Long"
"er sustain values result in longer sounds. Full length of sound is attack + de"
"cay + sustain + release."
msgstr ""

#: lang.json:play:opts:sustain_level:description
#: lang.json:play_chord:opts:sustain_level:description
#: lang.json:play_pattern_timed:opts:sustain_level:description
#: lang.json:synth:opts:sustain_level:description
#: synths.json:beep:opts:sustain_level:description
#: synths.json:blade:opts:sustain_level:description
#: synths.json:bnoise:opts:sustain_level:description
#: synths.json:chipbass:opts:sustain_level:description
#: synths.json:chiplead:opts:sustain_level:description
#: synths.json:chipnoise:opts:sustain_level:description
#: synths.json:cnoise:opts:sustain_level:description
#: synths.json:dark_ambience:opts:sustain_level:description
#: synths.json:dpulse:opts:sustain_level:description
#: synths.json:dsaw:opts:sustain_level:description
#: synths.json:dtri:opts:sustain_level:description
#: synths.json:dull_bell:opts:sustain_level:description
#: synths.json:fm:opts:sustain_level:description
#: synths.json:gnoise:opts:sustain_level:description
#: synths.json:growl:opts:sustain_level:description
#: synths.json:hollow:opts:sustain_level:description
#: synths.json:hoover:opts:sustain_level:description
#: synths.json:kalimba:opts:sustain_level:description
#: synths.json:mod_dsaw:opts:sustain_level:description
#: synths.json:mod_fm:opts:sustain_level:description
#: synths.json:mod_pulse:opts:sustain_level:description
#: synths.json:mod_saw:opts:sustain_level:description
#: synths.json:mod_sine:opts:sustain_level:description
#: synths.json:mod_tri:opts:sustain_level:description
#: synths.json:noise:opts:sustain_level:description
#: synths.json:piano:opts:sustain_level:description
#: synths.json:pluck:opts:sustain_level:description
#: synths.json:pnoise:opts:sustain_level:description
#: synths.json:pretty_bell:opts:sustain_level:description
#: synths.json:prophet:opts:sustain_level:description
#: synths.json:pulse:opts:sustain_level:description
#: synths.json:rodeo:opts:sustain_level:description
#: synths.json:saw:opts:sustain_level:description
#: synths.json:sound_in:opts:sustain_level:description
#: synths.json:sound_in_stereo:opts:sustain_level:description
#: synths.json:square:opts:sustain_level:description
#: synths.json:subpulse:opts:sustain_level:description
#: synths.json:supersaw:opts:sustain_level:description
#: synths.json:tb303:opts:sustain_level:description
#: synths.json:tech_saws:opts:sustain_level:description
#: synths.json:tri:opts:sustain_level:description
#: synths.json:zawa:opts:sustain_level:description
msgid ""
"Amplitude level reached after decay phase and immediately before release phase"
"."
msgstr ""

#: lang.json:play:summary
msgid "Play current synth"
msgstr ""

#: lang.json:play_chord:description
msgid ""
"Play a list of notes at the same time.\n"
"\n"
"Accepts optional args for modification of the synth being played. See each syn"
"th's documentation for synth-specific opts. See `use_synth` and `with_synth` f"
"or changing the current synth."
msgstr ""

#: lang.json:play_chord:examples:0:comments
#: lang.json:play_chord:examples:1:comments
msgid ""
" \n"
"# same as:\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:play_chord:summary
msgid "Play notes simultaneously"
msgstr ""

#: lang.json:play_pattern:description
msgid ""
"Play list of notes with the current synth one after another with a sleep of 1\n"
"\n"
"Accepts optional args for modification of the synth being played. See each syn"
"th's documentation for synth-specific opts. See use_synth and with_synth for c"
"hanging the current synth."
msgstr ""

#: lang.json:play_pattern:examples:0:comments
msgid ""
"# Same as:\n"
"#   play 40\n"
"#   sleep 1\n"
"#   play 41\n"
"#   sleep 1\n"
"#   play 42\n"
msgstr ""

#: lang.json:play_pattern:examples:1:comments
msgid ""
"# You can use keyword notes\n"
msgstr ""

#: lang.json:play_pattern:examples:2:comments
msgid ""
"# Supports the same arguments as play:\n"
msgstr ""

#: lang.json:play_pattern:summary
msgid "Play pattern of notes"
msgstr ""

#: lang.json:play_pattern_timed:description
msgid ""
"Play each note in a list of notes one after another with specified times betwe"
"en them. The notes should be a list of MIDI numbers, symbols such as :E4 or ch"
"ords such as chord(:A3, :major) - identical to the first parameter of the play"
" function. The times should be a list of times between the notes in beats.\n"
"\n"
"If the list of times is smaller than the number of gaps between notes, the lis"
"t is repeated again. If the list of times is longer than the number of gaps be"
"tween notes, then some of the times are ignored. See examples for more detail."
"\n"
"\n"
"Accepts optional args for modification of the synth being played. See each syn"
"th's documentation for synth-specific opts. See `use_synth` and `with_synth` f"
"or changing the current synth."
msgstr ""

#: lang.json:play_pattern_timed:examples:0:comments
#: lang.json:play_pattern_timed:examples:2:comments
msgid ""
" \n"
"# same as:\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:play_pattern_timed:examples:1:comments
msgid ""
" \n"
"# same as:\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:play_pattern_timed:examples:3:comments
msgid ""
" \n"
"#same as:\n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:play_pattern_timed:summary
msgid "Play pattern of notes with specific times"
msgstr ""

#: lang.json:print:description
msgid ""
"Displays the information you specify as a string inside the output pane. This "
"can be a number, symbol, or a string itself. Useful for debugging. Synonym for"
" `puts`."
msgstr ""

#: lang.json:print:examples:0:comments lang.json:puts:examples:0:comments
msgid ""
"#=> will print the string \"hello there\" to the output pane\n"
msgstr ""

#: lang.json:print:examples:1:comments lang.json:puts:examples:1:comments
msgid ""
"#=> will print the number 5 to the output pane\n"
msgstr ""

#: lang.json:print:examples:2:comments lang.json:puts:examples:2:comments
msgid ""
"#=> will print the contents of foo to the output pane\n"
msgstr ""

#: lang.json:print:summary lang.json:puts:summary
msgid "Display a message in the output pane"
msgstr ""

#: lang.json:puts:description
msgid ""
"Displays the information you specify as a string inside the output pane. This "
"can be a number, symbol, or a string itself. Useful for debugging. Synonym for"
" `print`."
msgstr ""

#: lang.json:quantise:description
msgid "Round value to the nearest multiple of step resolution."
msgstr ""

#: lang.json:quantise:examples:0:comments
msgid ""
"# 10 is already a multiple of 1, so returns 10\n"
msgstr ""

#: lang.json:quantise:examples:1:comments
msgid ""
"# Returns 9.9 which is 1.1 * 9\n"
msgstr ""

#: lang.json:quantise:examples:2:comments
msgid ""
"# 13.3\n"
msgstr ""

#: lang.json:quantise:examples:3:comments
msgid ""
"# 13.4\n"
msgstr ""

#: lang.json:quantise:examples:4:comments
msgid ""
"# 13.2\n"
msgstr ""

#: lang.json:quantise:examples:5:comments
msgid ""
"# 13.5\n"
msgstr ""

#: lang.json:quantise:summary
msgid "Quantise a value to resolution"
msgstr ""

#: lang.json:ramp:description
msgid ""
"Create a new immutable ramp vector from args. Indexes always return first or l"
"ast value if out of bounds."
msgstr ""

#: lang.json:ramp:examples:2:comments lang.json:ramp:examples:3:comments
#: lang.json:ramp:examples:4:comments lang.json:ring:examples:3:comments
#: lang.json:vector:examples:2:comments
msgid ""
"#=> 3\n"
msgstr ""

#: lang.json:ramp:summary
msgid "Create a ramp vector"
msgstr ""

#: lang.json:rand:description
msgid ""
"Given a max number, produces a float between `0` and the supplied max value. I"
"f max is a range, produces a float within the range. With no args returns a ra"
"ndom value between `0` and `1`."
msgstr ""

#: lang.json:rand:examples:0:comments lang.json:rand_look:examples:0:comments
msgid ""
"#=> will print a number like 0.375030517578125 to the output pane\n"
msgstr ""

#: lang.json:rand:summary
msgid "Generate a random float below a value"
msgstr ""

#: lang.json:rand_back:description
msgid ""
"Roll the random generator back essentially 'undoing' the last call to `rand`. "
"You may specify an amount to roll back allowing you to skip back n calls to `r"
"and`."
msgstr ""

#: lang.json:rand_back:examples:0:comments
msgid ""
"# Basic rand stream rollback\n"
"# prints 0.75006103515625\n"
"# roll random stream back one\n"
"# the result of the next call to rand will be\n"
"# exactly the same as the previous call\n"
"# prints 0.75006103515625 again!\n"
"# prints 0.733917236328125\n"
msgstr ""

#: lang.json:rand_back:examples:1:comments
msgid ""
"# Jumping back multiple places in the rand stream\n"
"# prints 0.75006103515625\n"
"# prints 0.733917236328125\n"
"# prints 0.464202880859375\n"
"# prints 0.24249267578125\n"
"# roll random stream back three places\n"
"# the result of the next call to rand will be\n"
"# exactly the same as the result 3 calls to\n"
"# rand ago.\n"
"# prints  0.733917236328125 again!\n"
"# prints  0.464202880859375\n"
msgstr ""

#: lang.json:rand_back:summary
msgid "Roll back random generator"
msgstr ""

#: lang.json:rand_i:description
msgid ""
"Given a max number, produces a whole number between `0` and the supplied max v"
"alue exclusively. If max is a range produces an int within the range. With no "
"args returns either `0` or `1`"
msgstr ""

#: lang.json:rand_i:examples:0:comments
#: lang.json:rand_i_look:examples:0:comments
msgid ""
"#=> will print either 0, 1, 2, 3, or 4 to the output pane\n"
msgstr ""

#: lang.json:rand_i:summary
msgid "Generate a random whole number below a value (exclusive)"
msgstr ""

#: lang.json:rand_i_look:description
msgid ""
"Given a max number, produces a whole number between `0` and the supplied max v"
"alue exclusively. If max is a range produces an int within the range. With no "
"args returns either `0` or `1`.\n"
"\n"
"Does not consume a random value from the stream. Therefore, multiple sequentia"
"l calls to `rand_i_look` will all return the same value."
msgstr ""

#: lang.json:rand_i_look:examples:1:comments
msgid ""
"#=> will print either 0, 1, 2, 3, or 4 to the output pane\n"
"#=> will print the same number again\n"
"#=> will print the same number again\n"
"#=> will print either 0, 1, 2, 3, or 4 to the output pane\n"
"#=> will print the same number as the previous statement\n"
msgstr ""

#: lang.json:rand_i_look:summary
msgid "Generate a random whole number without consuming a rand"
msgstr ""

#: lang.json:rand_look:description
msgid ""
"Given a max number, produces a number between `0` and the supplied max value e"
"xclusively. If max is a range produces an int within the range. With no args r"
"eturns a value between `0` and `1`.\n"
"\n"
"Does not consume a random value from the stream. Therefore, multiple sequentia"
"l calls to `rand_look` will all return the same value."
msgstr ""

#: lang.json:rand_look:examples:1:comments
msgid ""
"#=> will print a number like 0.375030517578125 to the output pane\n"
"#=> will print the same number again\n"
"#=> will print the same number again\n"
"#=> will print a different random number\n"
"#=> will print the same number as the previous line again.\n"
msgstr ""

#: lang.json:rand_look:summary
msgid "Generate a random number without consuming a rand"
msgstr ""

#: lang.json:rand_reset:description
msgid ""
"Resets the random stream to the last specified seed. See `use_random_seed` for"
" changing the seed."
msgstr ""

#: lang.json:rand_reset:examples:0:comments
msgid ""
"# prints 0.75006103515625\n"
"# prints 0.733917236328125\n"
"# prints 0.464202880859375\n"
"# prints 0.24249267578125\n"
"# reset the random stream\n"
"# prints 0.75006103515625\n"
msgstr ""

#: lang.json:rand_reset:summary
msgid "Reset rand generator to last seed"
msgstr ""

#: lang.json:rand_skip:description
msgid ""
"Jump the random generator forward essentially skipping the next call to `rand`"
". You may specify an amount to jump allowing you to skip n calls to `rand`."
msgstr ""

#: lang.json:rand_skip:examples:0:comments
msgid ""
"# Basic rand stream skip\n"
"# prints 0.75006103515625\n"
"# jump random stream forward one\n"
"# typically the next rand is 0.733917236328125\n"
"# prints 0.464202880859375\n"
msgstr ""

#: lang.json:rand_skip:examples:1:comments
msgid ""
"# Jumping forward multiple places in the rand stream\n"
"# prints 0.75006103515625\n"
"# prints 0.733917236328125\n"
"# prints 0.464202880859375\n"
"# prints 0.24249267578125\n"
"# reset the random stream\n"
"# prints 0.75006103515625\n"
"# jump random stream forward three places\n"
"# the result of the next call to rand will be\n"
"# exactly the same as if rand had been called\n"
"# three times\n"
" \n"
msgstr ""

#: lang.json:rand_skip:summary
msgid "Jump forward random generator"
msgstr ""

#: lang.json:range:description
msgid ""
"Create a new ring buffer from the range arguments (start, finish and step size"
"). Step size defaults to `1`. Indexes wrap around positively and negatively"
msgstr ""

#: lang.json:range:examples:0:comments
msgid ""
"#=> (ring 1, 2, 3, 4)\n"
msgstr ""

#: lang.json:range:examples:1:comments
msgid ""
"#=> (ring 1, 2, 3, 4, 5)\n"
msgstr ""

#: lang.json:range:examples:2:comments
msgid ""
"#=> (ring 1, 3)\n"
msgstr ""

#: lang.json:range:examples:3:comments
msgid ""
"#=> (ring 1, -1, -3)\n"
msgstr ""

#: lang.json:range:examples:4:comments
msgid ""
"#=> -3\n"
msgstr ""

#: lang.json:range:opts:inclusive:description
msgid "If set to true, range is inclusive of finish value"
msgstr ""

#: lang.json:range:opts:step:description
msgid "Size of increment between steps; step size."
msgstr ""

#: lang.json:range:summary
msgid "Create a ring buffer with the specified start, finish and step size"
msgstr ""

#: lang.json:ratio_to_pitch:description
msgid ""
"Convert a frequency ratio to a midi note which when added to a note will trans"
"pose the note to match the frequency ratio."
msgstr ""

#: lang.json:ratio_to_pitch:examples:0:comments
msgid ""
"#=> 12.0\n"
msgstr ""

#: lang.json:ratio_to_pitch:examples:1:comments
msgid ""
"#=> -12.0\n"
msgstr ""

#: lang.json:ratio_to_pitch:summary
msgid "relative frequency ratio to MIDI pitch"
msgstr ""

#: lang.json:rdist:description
msgid ""
"Returns a random number within the range with width around centre. If optional"
" arg `step:` is used, the result is quantised by step."
msgstr ""

#: lang.json:rdist:examples:0:comments
msgid ""
"#=> will print a number between -1 and 1\n"
msgstr ""

#: lang.json:rdist:examples:1:comments
msgid ""
"#=> centre defaults to 0 so this is the same as rdist(1, 0)\n"
msgstr ""

#: lang.json:rdist:examples:2:comments
msgid ""
" \n"
"#=> Will play :c3 with random L/R panning\n"
" \n"
" \n"
msgstr ""

#: lang.json:rdist:opts:step:description lang.json:rrand:opts:step:description
msgid "Step size of value to quantise to."
msgstr ""

#: lang.json:rdist:summary
msgid "Random number in centred distribution"
msgstr ""

#: lang.json:reset:description
msgid ""
"All settings such as the current synth, BPM, random stream and tick values wil"
"l be reset to the values inherited from the parent thread. Consider using `cle"
"ar` to reset all these values to their defaults."
msgstr ""

#: lang.json:reset:examples:0:comments
msgid ""
"# Basic Reset\n"
" \n"
" \n"
"#=> \"before\"\n"
"#=> :blade\n"
"#=> 3\n"
"#=> 0.75006103515625\n"
"#=> 0\n"
" \n"
"#=> \"after\"\n"
"#=> :beep\n"
"#=> 0\n"
"#=> 0.75006103515625\n"
"#=> 0\n"
msgstr ""

#: lang.json:reset:examples:1:comments
msgid ""
" \n"
" \n"
" \n"
"#=> \"before\"\n"
"#=> :blade\n"
"#=> 3\n"
"#=> 0.75006103515625\n"
"#=> 0\n"
" \n"
" \n"
"#=> 0.9287109375\n"
" \n"
"#=> \"thread\"\n"
"# The call to reset ensured that the current\n"
"# synth was returned to the the state at the\n"
"# time this thread was started. Thus any calls\n"
"# to use_synth between this line and the start\n"
"# of the thread are ignored\n"
"#=> :blade\n"
"#=> 3\n"
"# The call to reset ensured\n"
"# that the random stream was reset\n"
"# to the same state as it was when\n"
"# the current thread was started\n"
"#=> 0.9287109375\n"
"#=> 0\n"
" \n"
msgstr ""

#: lang.json:reset:summary
msgid "Reset all thread locals"
msgstr ""

#: lang.json:reset_mixer!:description
msgid ""
"The main mixer is the final mixer that all sound passes through. This fn reset"
"s it to its default set - undoing any changes made via set_mixer_control!"
msgstr ""

#: lang.json:reset_mixer!:examples:0:comments
msgid ""
"# LPF cutoff value of main mixer is now 70\n"
"# :loop_amen sample is played with low cutoff\n"
" \n"
"# mixer is now reset to default values\n"
"# :loop_amen sample is played with normal cutoff\n"
msgstr ""

#: lang.json:reset_mixer!:summary
msgid "Reset main mixer"
msgstr ""

#: lang.json:rest?:description
msgid ""
"Given a note or an args map, returns true if it represents a rest and false if"
" otherwise"
msgstr ""

#: lang.json:rest?:examples:0:comments lang.json:rest?:examples:1:comments
#: lang.json:rest?:examples:2:comments lang.json:rest?:examples:5:comments
#: lang.json:rest?:examples:6:comments
msgid ""
"# true\n"
msgstr ""

#: lang.json:rest?:examples:3:comments lang.json:rest?:examples:4:comments
#: lang.json:rest?:examples:7:comments
msgid ""
"# false\n"
msgstr ""

#: lang.json:rest?:summary
msgid "Determine if note or args is a rest"
msgstr ""

#: lang.json:ring:description
msgid ""
"Create a new immutable ring buffer from args. Indexes wrap around positively a"
"nd negatively"
msgstr ""

#: lang.json:ring:summary
msgid "Create a ring buffer"
msgstr ""

#: lang.json:rrand:description
msgid ""
"Given two numbers, this produces a float between the supplied min and max valu"
"es exclusively. Both min and max need to be supplied. For random integers, see"
" `rrand_i`. If optional arg `step:` is used, the result is quantised by step."
msgstr ""

#: lang.json:rrand:examples:0:comments
msgid ""
"#=> will print a number like 8.917730007820797 to the output pane\n"
msgstr ""

#: lang.json:rrand:examples:1:comments
msgid ""
" \n"
"#=> Will play a random non-integer midi note between C4 (60) and C5 (72) such "
"as 67.3453 or 71.2393\n"
" \n"
" \n"
msgstr ""

#: lang.json:rrand:summary
msgid "Generate a random float between two numbers"
msgstr ""

#: lang.json:rrand_i:description
msgid ""
"Given two numbers, this produces a whole number between the min and max you su"
"pplied inclusively. Both min and max need to be supplied. For random floats, s"
"ee `rrand`"
msgstr ""

#: lang.json:rrand_i:examples:0:comments
msgid ""
"#=> will print a random number between 0 and 10 (e.g. 4, 0 or 10) to the outpu"
"t pane\n"
msgstr ""

#: lang.json:rrand_i:examples:1:comments
msgid ""
" \n"
"#=> Will play a random midi note between C4 (60) and C5 (72)\n"
" \n"
" \n"
msgstr ""

#: lang.json:rrand_i:summary
msgid "Generate a random whole number between two points inclusively"
msgstr ""

#: lang.json:rt:description
msgid ""
"Real time representation. Returns the amount of beats for the value in real-ti"
"me seconds. Useful for bypassing any bpm scaling"
msgstr ""

#: lang.json:rt:examples:0:comments
msgid ""
"# modifies all time to be half\n"
" \n"
"# actually sleeps for half of a second\n"
" \n"
"# bypasses bpm scaling and sleeps for a second\n"
" \n"
msgstr ""

#: lang.json:rt:summary
msgid "Real time conversion"
msgstr ""

#: lang.json:run_code:description
msgid ""
"Executes the code passed as a string in a new Run. This works as if the code w"
"as in a buffer and Run button was pressed."
msgstr ""

#: lang.json:run_code:examples:0:comments
msgid ""
"#=> will play the :ambi_lunar_land sample\n"
msgstr ""

#: lang.json:run_code:examples:1:comments
msgid ""
"# Works with any amount of code:\n"
" \n"
" \n"
" \n"
"# will play 60 8 times\n"
msgstr ""

#: lang.json:run_code:summary
msgid "Evaluate the code passed as a String as a new Run"
msgstr ""

#: lang.json:run_file:description
msgid ""
"Reads the full contents of the file with `path` and executes it in a new Run. "
"This works as if the code in the file was in a buffer and Run button was press"
"ed."
msgstr ""

#: lang.json:run_file:summary
msgid "Evaluate the contents of the file as a new Run"
msgstr ""

#: lang.json:sample:description
msgid ""
"Play back a recorded sound file (sample). Sonic Pi comes with lots of great sa"
"mples included (see the section under help) but you can also load and play `.w"
"av`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` files from anywhere o"
"n your computer too. To play a built-in sample use the corresponding keyword s"
"uch as `sample :bd_haus`. To play any file on your computer use a full path su"
"ch as `sample \"/path/to/sample.wav\"`.\n"
"\n"
"There are many opts for manipulating the playback. For example, the `rate:` op"
"t affects both the speed and the pitch of the playback. To control the rate of"
" the sample in a pitch-meaningful way take a look at the `rpitch:` opt.\n"
"\n"
"The sampler synth has three separate envelopes - one for amplitude, one for a "
"low pass filter and another for a high pass filter. These work very similar to"
" the standard synth envelopes except for two major differences. Firstly, the e"
"nvelope times do not stretch or shrink to match the BPM. Secondly, the sustain"
" time by default stretches to make the envelope fit the length of the sample. "
"This is explained in detail in the tutorial.\n"
"\n"
"Samples are loaded on-the-fly when first requested (and subsequently remembere"
"d). If the sample loading process takes longer than the schedule ahead time, t"
"he sample trigger will be skipped rather than be played late and out of time. "
"To avoid this you may preload any samples you wish to work with using `load_sa"
"mple` or `load_samples`.\n"
"\n"
"It is possible to set the `start:` and `finish:` positions within the sample t"
"o play only a sub-section of it. These values can be automatically chosen base"
"d on an onset detection algorithm which will essentially isolate each individu"
"al drum or synth hit in the sample and let you access each one by an integer i"
"ndex (floats will be rounded to the nearest integer value). See the `onset:` d"
"ocstring and examples for more information.\n"
"\n"
"Finally, the sampler supports a powerful filtering system to make it easier to"
" work with large folders of samples. The filter commands must be used before t"
"he first standard opt. There are six kinds of filter parameters you may use:\n"
"\n"
"1. Folder strings - `\"/foo/bar\"` - which will add all samples within the folde"
"r to the set of candidates.\n"
"2. Recursive folder strings - `\"/foo/bar/**\"` - Folder strings ending with `**"
"` will add all samples contained within all subfolders (searched recursively)."
"\n"
"3. Sample strings - `\"/path/to/sample.wav\"` - which will add the specific samp"
"le to the set of candidates.\n"
"4. Other strings - `\"foobar\"` - which will filter the candidates based on whet"
"her the filename contains the string.\n"
"5. Regular expressions - `/b[aA]z.*/` - which will filter the candidates based"
" on whether the regular expression matches the filename.\n"
"6. Keywords - `:quux` - will filter the candidates based on whether the keywor"
"d is a direct match of the filename (without extension).\n"
"7. Numbers - `0` - will select the candidate with that index (wrapping round l"
"ike a ring if necessary).\n"
"8. Lists of the above - `[\"/foo/bar\", \"baz\", /0-9.*/]` - will recurse down and"
" work through the internal filter parameters as if they were in the top level."
"\n"
"9. Lambdas - `lambda {|s| [s.choose] }` - the ultimate power tool for filters."
" Allows you to create a custom fn which receives a list of candidates as an ar"
"g and which should return a new list of candidates (this may be smaller, large"
"r, re-ordered it's up to you).\n"
"\n"
"By combining commands which add to the candidates and then filtering those can"
"didates it is possible to work with folders full of samples in very powerful w"
"ays. Note that the specific ordering of filter parameters is irrelevant with t"
"he exception of the numbers - in which case the last number is the index. All "
"the candidates will be gathered first before the filters are applied.\n"
msgstr ""

#: lang.json:sample:examples:0:comments
msgid ""
"# Play a built-in sample\n"
"# Plays the Amen break\n"
msgstr ""

#: lang.json:sample:examples:10:comments
msgid ""
"# Play part of a sample\n"
"# Play the second eighth of the sample\n"
msgstr ""

#: lang.json:sample:examples:11:comments
msgid ""
"# Finishing before the start plays backwards\n"
"# Play the second eighth of the sample backwards\n"
msgstr ""

#: lang.json:sample:examples:12:comments
msgid ""
"# Play a section of a sample at quarter speed backwards\n"
"# Play the second eighth of the\n"
"# amen break backwards at a\n"
"# quarter speed\n"
msgstr ""

#: lang.json:sample:examples:13:comments
msgid ""
"# Control a sample synchronously\n"
" \n"
" \n"
" \n"
" \n"
"# This is triggered 1s from start\n"
msgstr ""

#: lang.json:sample:examples:14:comments
msgid ""
"# Controlling a sample asynchronously\n"
" \n"
"# This block is run in an implicit in_thread\n"
"# and therefore is asynchronous\n"
" \n"
" \n"
"# This is triggered 0.5s from start\n"
msgstr ""

#: lang.json:sample:examples:15:comments
msgid ""
"# Play with slices\n"
"# => play the first 16th of the sample\n"
" \n"
" \n"
"# => play the second 16th of the sample 4 times\n"
" \n"
" \n"
"# => play the final quarter backwards\n"
msgstr ""

#: lang.json:sample:examples:16:comments
msgid ""
"# Build a simple beat slicer\n"
"# Set the BPM to match the amen break sample\n"
" \n"
"# Specify number of slices\n"
"# (try changing to 2, 4, 6, 16 or 32)\n"
"# Choose a random slice within range\n"
"# Play the specific part of the sample\n"
"# Sleep for the duration of the slice\n"
" \n"
msgstr ""

#: lang.json:sample:examples:17:comments
msgid ""
"# Play with the built-in low pass filter, high pass filter and compressor\n"
"# Make the amen break sound punchy.\n"
msgstr ""

#: lang.json:sample:examples:18:comments
msgid ""
"# Use the cutoff filter envelopes\n"
"# Sweep the low pass filter up over 8 beats\n"
" \n"
"# Sweep the high pass filter down over 8 beats\n"
msgstr ""

#: lang.json:sample:examples:19:comments
msgid ""
"# Sample stretching\n"
"# => 0.88347\n"
"# => 1\n"
" \n"
"# Stretch the sample to make it 1 beat long\n"
"# This now loops perfectly.\n"
"# However, note that stretching/shrinking\n"
"# also modifies the pitch.\n"
" \n"
msgstr ""

#: lang.json:sample:examples:1:comments
msgid ""
"# Play two samples at the same time\n"
"# with incredible timing accuracy\n"
" \n"
"# Note, for timing guarantees select the pref:\n"
"#   Studio -> Synths and FX -> Enforce timing guarantees\n"
msgstr ""

#: lang.json:sample:examples:20:comments
msgid ""
"# Sample shrinking\n"
"# => 8\n"
"# => 6\n"
" \n"
"# As :loop_garzul is longer than 6 beats\n"
"# it is shrunk to fit. This increases the\n"
"# pitch.\n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:21:comments
msgid ""
"# Sample stretching matches the BPM\n"
"# Set the BPM to 30\n"
"# => 4.0 (at 30 BPM the sample lasts for 4 beats)\n"
"# => 6.0\n"
" \n"
"# The sample is stretched to match 6 beats at 30 BPM\n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:22:comments
msgid ""
"# External samples\n"
"# Play any Wav, Aif, Ogg, Oga, or FLAC sample on your computer\n"
"# by simply passing a string representing the full\n"
"# path\n"
msgstr ""

#: lang.json:sample:examples:23:comments
msgid ""
"# Sample pack filtering\n"
"# You can easily work with a directory of samples\n"
"# Play the first sample in the directory\n"
"# (it is sorted alphabetically)\n"
"# Play the second sample in the directory\n"
"# Play the 100th sample in the directory, or if there\n"
"# are fewer, treat the directory like a ring and keep\n"
"# wrapping the index round until a sample is found.\n"
"# For example, if there are 90 samples, the 10th sample\n"
"# is played (index 9).\n"
"# Play the first sample in the directory that contains\n"
"# the substring \"120\".\n"
"# For example, this may be \"beat1_120_rave.wav\"\n"
"# Play the second sample in the directory that contains\n"
"# the substring \"120\".\n"
"# For example, this may be \"beat2_120_rave.wav\"\n"
"# Play the first sample in the directory that matches\n"
"# the regular expression /beat[0-9]/.\n"
"# For example, this may be \"beat0_100_trance.wav\"\n"
"# You may use the full power of Ruby's regular expression\n"
"# system here: http://ruby-doc.org/core-2.1.1/Regexp.html\n"
"# Play the first sample in the directory that both matches\n"
"# the regular expression /beat[0-9]0/ and contains the\n"
"# the substring \"100\".\n"
"# For example, this may be \"beat10_100_rave.wav\"\n"
msgstr ""

#: lang.json:sample:examples:24:comments
msgid ""
"# Filtering built-in samples\n"
"# If you don't pass a directory source, you can filter over\n"
"# the built-in samples.\n"
"# Play the first built-in sample that contains the substring\n"
"# \"tabla\"\n"
"# Play the third built-in sample that contains the substring\n"
"# \"tabla\"\n"
msgstr ""

#: lang.json:sample:examples:25:comments
msgid ""
"# Play with whole directories of samples\n"
"# You may pass any of the source/filter options to load_samples\n"
"# to load all matching samples. This will load all the built-in\n"
"# samples containing the substring \"tabla_\"\n"
" \n"
"# Treat the matching samples as a ring and tick through them\n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:26:comments
msgid ""
"# Specify multiple sources\n"
" \n"
" \n"
"# Match the first sample that contains the string \"foo\" out of\n"
"# all the samples in dir1 and dir2 combined.\n"
"# Note that the sources must be listed before any filters.\n"
msgstr ""

#: lang.json:sample:examples:27:comments
msgid ""
"# List contents recursively\n"
"# By default the list of all top-level samples within the directory\n"
"# is considered.\n"
"# However, if you finish your directory string with ** then if that\n"
"# directory contains other directories then the samples within the\n"
"# subdirectories and their subsubdirectories in turn are considered.\n"
"# Play the first top-level sample in the directory\n"
"# Play the first sample found after combining all samples found in\n"
"# the directory and all directories within it recursively.\n"
"# Note that if there are many sub directories this may take some time\n"
"# to execute. However, the result is cached so subsequent calls will\n"
"# be fast.\n"
msgstr ""

#: lang.json:sample:examples:28:comments
msgid ""
"# Bespoke filters\n"
"# If the built-in String, Regexp and index filters are not sufficient\n"
"# you may write your own. They need to be a function which takes a list\n"
"# of paths to samples and return a list of samples. This one returns a\n"
"# list of a single randomly selected sample.\n"
" \n"
"# Play 8 randomly selected samples from the built-in sample set that also\n"
"# contain the substring \"drum_\"\n"
" \n"
msgstr ""

#: lang.json:sample:examples:29:comments
msgid ""
"# Basic Onset Detection\n"
"# If you know the right start: and finish: values, you can extract a\n"
"# single drum hit from a longer sample. However, finding these values\n"
"# can be very time consuming.\n"
" \n"
"# Instead of specifying the start: and finish: values manually you can\n"
"# use the onset: option to find them for you using an integer index.\n"
"# onset: 0 will set the start: and finish: values so that the first\n"
"# percussive sound (something that shifts from quiet to loud quickly)\n"
"# is picked out.\n"
" \n"
"# We can easily find the second percussive sound in the sample with\n"
"# onset: 1\n"
msgstr ""

#: lang.json:sample:examples:2:comments
msgid ""
"# Create a simple repeating bass drum\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:30:comments
msgid ""
"# Ticking through onsets\n"
"# The onsets are actually a ring so the index will wrap around. This\n"
"# means that if there are only 8 onsets in a sample, specifying an\n"
"# onset of 100 will still return one of the 8 onsets. This means we\n"
"# can use tick to work through each onset in sequence. This allows us\n"
"# to redefine the rhythm and tempo of a sample\n"
" \n"
"# We can choose our own BPM here - it doesn't need to match the sample\n"
"# tick through each onset in sequence\n"
"# randomly choose a delay between onset triggers\n"
" \n"
msgstr ""

#: lang.json:sample:examples:31:comments
msgid ""
"# Random Onset Triggering\n"
"# We can easily pick a random onset using the pick fn\n"
" \n"
" \n"
"# Each time round the live loop we now trigger a random onset\n"
"# creating an infinite stream of randomly selected drums\n"
" \n"
msgstr ""

#: lang.json:sample:examples:32:comments
msgid ""
"# Repeatable Random Onsets\n"
"# Instead of an infinite stream of choices, we can combine iteration\n"
"# and use_random_seed to create repeatable riffs:\n"
" \n"
"# every 8 times, reset the random seed, this resets the riff\n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:33:comments
msgid ""
"#  Random Onset Duration\n"
"# Each onset has a variable length (determined by the sample contents).\n"
"# Therefore, if you wish to ensure each onset has a specific length it\n"
"# is necessary to use the sample's amplitude envelope.\n"
"# As the sample's envelope automatically changes the sustain: value to\n"
"# match the duration - you also need to override this with a value of 0.\n"
" \n"
"# Each drum onset will now be no longer than 0.1. Note that the envelope\n"
"# for a sample only determines the maximum duration of a sample trigger.\n"
"# If the actual audible duration of the onset is smaller than 0.1 then\n"
"# it will *not* be extended.\n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:34:comments
msgid ""
"# Onset lambdas\n"
"# The onset index can be a lambda as well as an integer. If a lambda is\n"
"# given, it will be passed a ring of all of the onsets as an argument.\n"
"# This will be a ring of maps:\n"
"# define a lambda which accepts a single argument, prints it and\n"
"# returns the first value. This particular example is essentially\n"
"# the same as using onset: 0 with the side effect of also printing out\n"
"# the full ring of onsets:\n"
"# (ring {:start=>0.0, :finish=>0.0076}, {:start=>0.0076, :finish 0.015}...)\n"
"# We are therefore free to define this lambda to do anything we want.\n"
"# This gives us very powerful control over the choice of onset. It is\n"
"# unlikely you will use this frequently, but it is a powerful tool\n"
"# that's there when you need it.\n"
msgstr ""

#: lang.json:sample:examples:35:comments
msgid ""
"# Plays the 2nd onset (the first onset would have index 0)\n"
"# Will override opts with: {start: 0.0151, finish: 0.0304}\n"
"# (these values are specific to the :loop_tabla sample and\n"
"# will vary for different samples)\n"
msgstr ""

#: lang.json:sample:examples:36:comments
msgid ""
"# Plays the 2nd onset. This behaves the same as not specifying\n"
"# a slice as we select the first of one slices.\n"
"# Will override opts with: {start: 0.0151, finish: 0.0304}\n"
"# (these values are specific to the :loop_tabla sample and\n"
"# will vary for different samples)\n"
msgstr ""

#: lang.json:sample:examples:37:comments
msgid ""
"# This plays the first half of the 2nd onset.\n"
"# This is because  we split that onset into two slices and\n"
"# play just the first slice (with index 0).\n"
"# Will override opts with: {start: 0.0151, finish: 0.0227}\n"
"# (these values are specific to the :loop_tabla sample and\n"
"# will vary for different samples)\n"
msgstr ""

#: lang.json:sample:examples:38:comments
msgid ""
"# This plays the first quarter of the 2nd onset.\n"
"# This is because we split that onset into four slices and\n"
"# play just the first slice (with index 0).\n"
"# Will override opts with: {start: 0.0151, finish: 0.0189}\n"
"# (these values are specific to the :loop_tabla sample and\n"
"# will vary for different samples)\n"
"# Will play the first 1/8th of the 2nd onset.\n"
"# This is because we split that specific onset into 4 slices\n"
"# and then only play the first half of the first slice.\n"
"# Will override opts with: {start: 0.0151, finish: 0.017}\n"
"# (these values are specific to the :loop_tabla sample and\n"
"# will vary for different samples)\n"
"# Will play the first 1/8th of the 2nd onset backwards..\n"
"# This is because we split that specific onset into 4 slices\n"
"# and then only play from the first half of the first slice\n"
"# back to the beginning.\n"
"# Will override opts with: {start: 0.017, finish: 0.0151}\n"
"# (these values are specific to the :loop_tabla sample and\n"
"# will vary for different samples)\n"
msgstr ""

#: lang.json:sample:examples:3:comments
msgid ""
"# Create a more complex rhythm with multiple live loops:\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:sample:examples:4:comments
msgid ""
"# Change the playback speed of the sample using rate:\n"
"# Play the Amen break at half speed\n"
"# for old school hip-hop\n"
msgstr ""

#: lang.json:sample:examples:5:comments
msgid ""
"# Speed things up\n"
"# Play the Amen break at 1.5x speed\n"
"# for a jungle/gabba sound\n"
msgstr ""

#: lang.json:sample:examples:6:comments
msgid ""
"# Go backwards\n"
"# Negative rates play the sample backwards\n"
msgstr ""

#: lang.json:sample:examples:7:comments
msgid ""
"# Fast rewind\n"
"# Play backwards at 3x speed for a fast rewind effect\n"
msgstr ""

#: lang.json:sample:examples:8:comments
msgid ""
"# Start mid sample\n"
"# Start playback half way through\n"
msgstr ""

#: lang.json:sample:examples:9:comments
msgid ""
"# Finish mid sample\n"
"# Finish playback half way through\n"
msgstr ""

#: lang.json:sample:opts:amp:description
msgid "Amplitude of playback."
msgstr ""

#: lang.json:sample:opts:attack:description
msgid "Time to reach full volume. Default is 0."
msgstr ""

#: lang.json:sample:opts:beat_stretch:description
msgid ""
"Stretch (or shrink) the sample to last for exactly the specified number of bea"
"ts. Please note - this does *not* keep the pitch constant and is essentially t"
"he same as modifying the rate directly."
msgstr ""

#: lang.json:sample:opts:clamp_time:description
msgid ""
"Time taken for the amplitude adjustments to kick in fully (in seconds). This i"
"s usually pretty small (not much more than 10 milliseconds). Also known as the"
" time of the attack phase. Only valid if the compressor is enabled by turning "
"on the `compress:` opt."
msgstr ""

#: lang.json:sample:opts:compress:description
msgid ""
"Enable the compressor. This sits at the end of the internal FX chain immediate"
"ly before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:`"
" opt which will amplify the signal before it hits any internal FX. The compres"
"sor compresses the dynamic range of the incoming signal. Equivalent to automat"
"ically turning the amp down when the signal gets too loud and then back up aga"
"in when it's quiet. Useful for ensuring the containing signal doesn't overwhel"
"m other aspects of the sound. Also a general purpose hard-knee dynamic range p"
"rocessor which can be tuned via the opts to both expand and compress the signa"
"l."
msgstr ""

#: lang.json:sample:opts:finish:description
msgid ""
"Position in sample as a fraction between 0 and 1 to end playback. Default is 1"
"."
msgstr ""

#: lang.json:sample:opts:hpf:description
msgid ""
"Cutoff value of the built-in high pass filter (hpf) in MIDI notes. Unless spec"
"ified, the hpf is *not* added to the signal chain."
msgstr ""

#: lang.json:sample:opts:hpf_attack:description
msgid ""
"Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reac"
"h full cutoff value. Default value is set to match amp envelope's attack value"
"."
msgstr ""

#: lang.json:sample:opts:hpf_attack_level:description
msgid ""
"The peak hpf cutoff (value of cutoff at peak of attack) as a MIDI note. Defaul"
"t value is to match the `hpf_decay_level:` opt."
msgstr ""

#: lang.json:sample:opts:hpf_decay:description
msgid ""
"Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move "
"from full cutoff value (cutoff attack level) to the cutoff sustain level. Defa"
"ult value is set to match amp envelope's decay value."
msgstr ""

#: lang.json:sample:opts:hpf_decay_level:description
msgid ""
"The level of hpf cutoff after the decay phase as a MIDI note. Default value is"
" to match the `hpf_sustain_level:` opt."
msgstr ""

#: lang.json:sample:opts:hpf_env_curve:description
msgid ""
"Select the shape of the curve between levels in the hpf cutoff envelope. 1=lin"
"ear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed."
msgstr ""

#: lang.json:sample:opts:hpf_init_level:description
msgid ""
"The initial high pass filter envelope value as a MIDI note. This envelope is b"
"ypassed if no hpf env opts are specified. Default value is set to 130."
msgstr ""

#: lang.json:sample:opts:hpf_max:description
msgid "Maximum value of the high pass filter envelope. Default is 200."
msgstr ""

#: lang.json:sample:opts:hpf_release:description
msgid ""
"Amount of time (in beats) for sound to move from hpf cutoff sustain value to h"
"pf cutoff min value. Default value is set to match amp envelope's release valu"
"e."
msgstr ""

#: lang.json:sample:opts:hpf_release_level:description
msgid ""
"The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note. D"
"efault value is to match the `hpf:` opt."
msgstr ""

#: lang.json:sample:opts:hpf_sustain:description
msgid ""
"Amount of time for hpf cutoff value to remain at sustain level in beats. When "
"-1 (the default) will auto-stretch."
msgstr ""

#: lang.json:sample:opts:hpf_sustain_level:description
msgid ""
"The sustain cutoff (value of hpf cutoff at sustain time) as a MIDI note. Defau"
"lt value is to match the `hpf_release_level:` opt."
msgstr ""

#: lang.json:sample:opts:lpf:description
msgid ""
"Cutoff value of the built-in low pass filter (lpf) in MIDI notes. Unless speci"
"fied, the lpf is *not* added to the signal chain."
msgstr ""

#: lang.json:sample:opts:lpf_attack:description
msgid ""
"Attack time for lpf cutoff filter. Amount of time (in beats) for sound to reac"
"h full cutoff value. Default value is set to match amp envelope's attack value"
"."
msgstr ""

#: lang.json:sample:opts:lpf_attack_level:description
msgid ""
"The peak lpf cutoff (value of cutoff at peak of attack) as a MIDI note. Defaul"
"t value is to match the `lpf_decay_level:` opt."
msgstr ""

#: lang.json:sample:opts:lpf_decay:description
msgid ""
"Decay time for lpf cutoff filter. Amount of time (in beats) for sound to move "
"from full cutoff value (cutoff attack level) to the cutoff sustain level. Defa"
"ult value is set to match amp envelope's decay value."
msgstr ""

#: lang.json:sample:opts:lpf_decay_level:description
msgid ""
"The level of lpf cutoff after the decay phase as a MIDI note. Default value is"
" to match the `lpf_sustain_level:` opt."
msgstr ""

#: lang.json:sample:opts:lpf_env_curve:description
msgid ""
"Select the shape of the curve between levels in the lpf cutoff envelope. 1=lin"
"ear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed."
msgstr ""

#: lang.json:sample:opts:lpf_init_level:description
msgid ""
"The initial low pass filter envelope value as a MIDI note. This envelope is by"
"passed if no lpf env opts are specified. Default value is to match the `lpf_mi"
"n:` opt."
msgstr ""

#: lang.json:sample:opts:lpf_min:description
msgid "Starting value of the lpf cutoff envelope. Default is 30."
msgstr ""

#: lang.json:sample:opts:lpf_release:description
msgid ""
"Amount of time (in beats) for sound to move from lpf cutoff sustain value to l"
"pf cutoff min value. Default value is set to match amp envelope's release valu"
"e."
msgstr ""

#: lang.json:sample:opts:lpf_release_level:description
msgid ""
"The final value of the low pass filter envelope as a MIDI note. This envelope "
"is bypassed if no lpf env opts are specified. Default value is to match the `l"
"pf:` opt."
msgstr ""

#: lang.json:sample:opts:lpf_sustain:description
msgid ""
"Amount of time for lpf cutoff value to remain at sustain level in beats. When "
"-1 (the default) will auto-stretch."
msgstr ""

#: lang.json:sample:opts:lpf_sustain_level:description
msgid ""
"The sustain cutoff (value of lpf cutoff at sustain time) as a MIDI note. Defau"
"lt value is to match the `lpf_release_level:` opt."
msgstr ""

#: lang.json:sample:opts:norm:description
msgid ""
"Normalise the audio (make quieter parts of the sample louder and louder parts "
"quieter) - this is similar to the normaliser FX. This may emphasise any clicks"
" caused by clipping."
msgstr ""

#: lang.json:sample:opts:num_slices:description
msgid ""
"Number of slices to divide the sample into when using the `slice:` opt. Defaul"
"ts to 16. Floats are rounded to the nearest whole number."
msgstr ""

#: lang.json:sample:opts:on:description
msgid ""
"If specified and false/nil/0 will stop the sample from being played. Ensures a"
"ll opts are evaluated."
msgstr ""

#: lang.json:sample:opts:onset:description
msgid ""
"Analyse the sample with an onset detection algorithm and automatically set or "
"override the `start:` and `finish:` opts to play the nth onset only. Allows yo"
"u to treat a rhythm sample as a palette of individual drum/synth hits. If `sta"
"rt:` or `finish:` opts are used in addition to `onset:` then they will work wi"
"thin the onset rather than the whole sample. Floats are rounded to the nearest"
" whole number."
msgstr ""

#: lang.json:sample:opts:pan:description
msgid ""
"Stereo position of audio. -1 is left ear only, 1 is right ear only, and values"
" in between position the sound accordingly. Default is 0."
msgstr ""

#: lang.json:sample:opts:path:description
msgid ""
"Path of the sample to play. Typically this opt is rarely used instead of the m"
"ore powerful source/filter system. However it can be useful when working with "
"pre-made opt maps."
msgstr ""

#: lang.json:sample:opts:pitch_dis:description
msgid ""
"Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch di"
"spersion - how much random variation in pitch to add. Using a low value like 0"
".001 can help to \"soften up\" the metallic sounds, especially on drum loops. To"
" be really technical, pitch_dispersion is the maximum random deviation of the "
"pitch from the pitch ratio (which is set by the `pitch:` opt)."
msgstr ""

#: lang.json:sample:opts:pitch_stretch:description
msgid ""
"Stretch (or shrink) the sample to last for exactly the specified number of bea"
"ts. This attempts to keep the pitch constant using the `pitch:` opt. Note, it'"
"s very likely you'll need to experiment with the `window_size:`, `pitch_dis:` "
"and `time_dis:` opts depending on the sample and the amount you'd like to stre"
"tch/shrink from original size."
msgstr ""

#: lang.json:sample:opts:pre_amp:description
msgid ""
"Amplitude multiplier which takes place immediately before any internal FX such"
" as the low pass filter, compressor or pitch modification. Use this opt if you"
" want to overload the compressor."
msgstr ""

#: lang.json:sample:opts:rate:description
msgid ""
"Rate with which to play back the sample. Higher rates mean an increase in pitc"
"h and a decrease in duration. Default is 1."
msgstr ""

#: lang.json:sample:opts:relax_time:description
msgid ""
"Time taken for the amplitude adjustments to be released. Usually a little long"
"er than clamp_time. If both times are too short, you can get some (possibly un"
"wanted) artefacts. Also known as the time of the release phase. Only valid if "
"the compressor is enabled by turning on the `compress:` opt."
msgstr ""

#: lang.json:sample:opts:release:description
msgid ""
"Time (from the end of the sample) to go from full amplitude to 0. Default is 0"
"."
msgstr ""

#: lang.json:sample:opts:rpitch:description
msgid ""
"Rate modified pitch. Multiplies the rate by the appropriate ratio to shift up "
"or down the specified amount in MIDI notes. Please note - this does *not* keep"
" the duration and rhythmical rate constant and is essentially the same as modi"
"fying the rate directly."
msgstr ""

#: lang.json:sample:opts:slice:description
msgid ""
"Divides the sample duration evenly into `num_slices:` sections (defaults to 16"
") and set the `start:` and `finish:` opts to play the nth slice only. If `star"
"t:` or `finish:` opts are used in addition to `slice:` then they will work wit"
"hin the slice rather than the whole sample. Use the envelope opts to remove an"
"y clicks introduced if the slice boundary is in the middle of a sound. Also co"
"nsider `onset:` as an alternative to `slice:`. If `onset:` is also used then t"
"he slices will be within the onset rather than the whole sample. Floats are ro"
"unded to the nearest whole number."
msgstr ""

#: lang.json:sample:opts:slide:description
msgid ""
"Default slide time in beats for all slide opts. Individually specified slide o"
"pts will override this value."
msgstr ""

#: lang.json:sample:opts:slope_above:description
msgid ""
"Slope of the amplitude curve above the threshold. A value of 1 means that the "
"output of signals with amplitude above the threshold will be unaffected. Great"
"er values will magnify and smaller values will attenuate the signal. Only vali"
"d if the compressor is enabled by turning on the `compress:` opt."
msgstr ""

#: lang.json:sample:opts:slope_below:description
msgid ""
"Slope of the amplitude curve below the threshold. A value of 1 means that the "
"output of signals with amplitude below the threshold will be unaffected. Great"
"er values will magnify and smaller values will attenuate the signal. Only vali"
"d if the compressor is enabled by turning on the `compress:` opt."
msgstr ""

#: lang.json:sample:opts:start:description
msgid ""
"Position in sample as a fraction between 0 and 1 to start playback. Default is"
" 0."
msgstr ""

#: lang.json:sample:opts:sustain:description
msgid ""
"Time to stay at full volume. Default is to stretch to length of sample (minus "
"attack and release times)."
msgstr ""

#: lang.json:sample:opts:threshold:description
msgid ""
"Threshold value determining the break point between slope_below and slope_abov"
"e. Only valid if the compressor is enabled by turning on the `compress:` opt."
msgstr ""

#: lang.json:sample:opts:time_dis:description
msgid ""
"Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Time dis"
"persion - how much random delay before playing each grain (measured in seconds"
"). Again, low values here like 0.001 can help to soften up metallic sounds int"
"roduced by the effect. Large values are also fun as they can make soundscapes "
"and textures from the input, although you will most likely lose the rhythm of "
"the original. NB - This won't have an effect if it's larger than window_size."
msgstr ""

#: lang.json:sample:opts:window_size:description
msgid ""
"Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch sh"
"ift works by chopping the input into tiny slices, then playing these slices at"
" a higher or lower rate. If we make the slices small enough and overlap them, "
"it sounds like the original sound with the pitch changed. The window_size is t"
"he length of the slices and is measured in seconds. It needs to be around 0.2 "
"(200ms) or greater for pitched sounds like guitar or bass, and needs to be aro"
"und 0.02 (20ms) or lower for percussive sounds like drum loops. You can experi"
"ment with this to get the best sound for your input."
msgstr ""

#: lang.json:sample:summary
msgid "Trigger sample"
msgstr ""

#: lang.json:sample_buffer:description
msgid ""
"Alias for the `load_sample` method. Loads sample if necessary and returns buff"
"er information."
msgstr ""

#: lang.json:sample_buffer:summary
msgid "Get sample data"
msgstr ""

#: lang.json:sample_duration:description
msgid ""
"Given the name of a loaded sample, or a path to a `.wav`, `.wave`, `.aif`, `.a"
"iff`, `.ogg`, `.oga` or `.flac` file returns the length of time in beats that "
"the sample would play for. `sample_duration` understands and accounts for all "
"the opts you can pass to `sample` which have an effect on the playback duratio"
"n such as `rate:`. The time returned is scaled to the current BPM.\n"
"\n"
"*Note:* avoid using `sample_duration` to set the sleep time in `live_loop`s, p"
"refer stretching the sample with the `beat_stretch:` opt or changing the BPM i"
"nstead. See the examples below for details."
msgstr ""

#: lang.json:sample_duration:examples:0:comments
msgid ""
"# Simple use\n"
"# returns 8.0 because this sample is 8 seconds long\n"
msgstr ""

#: lang.json:sample_duration:examples:1:comments
msgid ""
"# The result is scaled to the current BPM\n"
" \n"
"# => 16.0\n"
" \n"
"# => 12.0\n"
" \n"
"# => 2.8\n"
msgstr ""

#: lang.json:sample_duration:examples:2:comments
msgid ""
"# Avoid using sample_duration to set the sleep time in live_loops\n"
"# It is possible to use sample_duration to drive the frequency of a live loop."
"\n"
"# However, if you're using a rhythmical sample such as a drum beat and it isn'"
"t\n"
"# in the same BPM as the current BPM, then the FX such as this slicer will be\n"
"# badly out of sync. This is because the slicer slices at the current BPM and\n"
"# this live_loop is looping at a different BPM (that of the sample)\n"
" \n"
"# Instead prefer to set the BPM of the live_loop to match the sample. It has\n"
"# two benefits. Now our sleep is a nice and simple 1 (as it's one beat).\n"
"# Also, our slicer now works with the beat and sounds much better.\n"
" \n"
" \n"
" \n"
" \n"
"# Alternatively we can beat_stretch the sample to match the current BPM. This "
"has the\n"
"# side effect of changing the rate of the sample (and hence the pitch). Howeve"
"r, the\n"
"# FX works nicely in time and the sleep time is also a simple 1.\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:sample_duration:examples:3:comments
msgid ""
"# The standard sample opts are also honoured\n"
"# Playing a sample at standard speed will return standard length\n"
"# => 8.0\n"
"# Playing a sample at half speed will double duration\n"
"# => 16.0\n"
"# Playing a sample at double speed will halve duration\n"
"# => 4.0\n"
"# Playing a sample backwards at double speed will halve duration\n"
"# => 4.0\n"
"# Without an explicit sustain: opt attack: just affects amplitude not duration"
"\n"
"# => 8.0\n"
"# => 8.0\n"
"# => 8.0\n"
"# Without an explicit sustain: opt release: just affects amplitude not duratio"
"n\n"
"# => 8.0\n"
"# => 8.0\n"
"# => 8.0\n"
"# Without an explicit sustain: opt decay: just affects amplitude not duration\n"
"# => 8.0\n"
"# => 8.0\n"
"# => 8.0\n"
"# With an explicit sustain: opt, if the attack + decay + sustain + release env"
"elope\n"
"# duration is less than the sample duration time, the envelope will shorten th"
"e\n"
"# sample time.\n"
"# => 0.5\n"
"# => 0.1\n"
"# => 1.0\n"
"# => 3.5\n"
"# If the envelope duration is longer than the sample it will not affect the\n"
"# sample duration\n"
"# => 8\n"
"# All other opts are taken into account before the comparison with the envelop"
"e opts.\n"
"# => 0.8\n"
"# => 0.8 (The duration of the sample is less than the envelope length so wins)"
"\n"
"# The rpitch: opt will modify the rate to shift the pitch of the sample up and"
" down\n"
"# and therefore affects duration.\n"
"# => 4.0\n"
"# => 16\n"
"# The rpitch: and rate: opts combine together.\n"
"# => 2.0\n"
"# The beat_stretch: opt stretches the sample so that its duration matches the "
"value.\n"
"# It also combines with rate:\n"
"# => 3.0\n"
"# => 6.0\n"
"# The pitch_stretch: opt acts identically to beat_stretch when just considerin"
"g sample\n"
"# duration.\n"
"# => 3.0\n"
"# => 6.0\n"
"# The start: and finish: opts can also shorten the sample duration and also co"
"mbine\n"
"# with other opts such as rate:\n"
"# => 4.0\n"
"# => 2.0\n"
"# => 2.0\n"
"# => 1.0\n"
msgstr ""

#: lang.json:sample_duration:examples:4:comments
msgid ""
"# Triggering samples one after another\n"
"# start the :loop_amen sample\n"
"# wait for the duration of :loop_amen before\n"
"# starting it again\n"
msgstr ""

#: lang.json:sample_duration:opts:attack:description
msgid "Duration of the attack phase of the envelope."
msgstr ""

#: lang.json:sample_duration:opts:beat_stretch:description
msgid ""
"Change the rate of the sample so that its new duration matches the specified n"
"umber of beats."
msgstr ""

#: lang.json:sample_duration:opts:decay:description
msgid "Duration of the decay phase of the envelope."
msgstr ""

#: lang.json:sample_duration:opts:finish:description
msgid "Finish position of sample playback as a value from 0 to 1"
msgstr ""

#: lang.json:sample_duration:opts:pitch_stretch:description
msgid ""
"Change the rate of the sample so that its new duration matches the specified n"
"umber of beats but attempt to preserve pitch."
msgstr ""

#: lang.json:sample_duration:opts:rate:description
msgid "Rate modifier. For example, doubling the rate will halve the duration."
msgstr ""

#: lang.json:sample_duration:opts:release:description
msgid "Duration of the release phase of the envelope."
msgstr ""

#: lang.json:sample_duration:opts:rpitch:description
msgid ""
"Change the rate to shift the pitch up or down the specified number of MIDI not"
"es."
msgstr ""

#: lang.json:sample_duration:opts:start:description
msgid "Start position of sample playback as a value from 0 to 1"
msgstr ""

#: lang.json:sample_duration:opts:sustain:description
msgid "Duration of the sustain phase of the envelope."
msgstr ""

#: lang.json:sample_duration:summary
msgid "Get duration of sample in beats"
msgstr ""

#: lang.json:sample_free:description
msgid ""
"Frees the memory and resources consumed by loading the sample on the server. S"
"ubsequent calls to `sample` and friends will re-load the sample on the server."
"\n"
"\n"
"You may also specify the same set of source and filter pre-args available to `"
"sample` itself. `sample_free` will then free all matching samples. See `sample"
"`'s docs for more information."
msgstr ""

#: lang.json:sample_free:examples:0:comments
msgid ""
"# The Amen break is now loaded into memory and played\n"
" \n"
"# The Amen break is not loaded but played from memory\n"
" \n"
"# The Amen break is freed from memory\n"
"# the Amen break is re-loaded and played\n"
msgstr ""

#: lang.json:sample_free:examples:1:comments
msgid ""
"# This returns the buffer id of the sample i.e. 1\n"
"# The buffer id remains constant whilst the sample\n"
"# is loaded in memory\n"
" \n"
"# The Amen break is re-loaded and gets a *new* id.\n"
msgstr ""

#: lang.json:sample_free:examples:2:comments
msgid ""
" \n"
" \n"
" \n"
" \n"
"# re-loads and plays amen\n"
"# re-loads and plays lunar land\n"
msgstr ""

#: lang.json:sample_free:examples:3:comments
msgid ""
"# Using source and filter pre-args\n"
" \n"
"# frees any loaded samples in \"/path/to/sample/dir\"\n"
"# frees sample with index 1 in \"/path/to/sample/dir\"\n"
"# frees sample with name \"foo\" in \"/path/to/sample/dir\"\n"
"# frees sample which matches regex /[Bb]ar/ in \"/path/to/sample/dir\"\n"
msgstr ""

#: lang.json:sample_free:summary
msgid "Free a sample on the synth server"
msgstr ""

#: lang.json:sample_free_all:description
msgid ""
"Unloads all samples therefore freeing the memory and resources consumed. Subse"
"quent calls to `sample` and friends will re-load the sample on the server."
msgstr ""

#: lang.json:sample_free_all:examples:0:comments
msgid ""
"# load and play :loop_amen\n"
"# load and play :ambi_lunar_land\n"
" \n"
" \n"
"# re-loads and plays amen\n"
msgstr ""

#: lang.json:sample_free_all:summary
msgid "Free all loaded samples on the synth server"
msgstr ""

#: lang.json:sample_groups:description
msgid "Return a list of all the sample groups available"
msgstr ""

#: lang.json:sample_groups:summary
msgid "Get all sample groups"
msgstr ""

#: lang.json:sample_info:description
msgid ""
"Alias for the `load_sample` method. Loads sample if necessary and returns samp"
"le information."
msgstr ""

#: lang.json:sample_info:summary
msgid "Get sample information"
msgstr ""

#: lang.json:sample_loaded?:description
msgid ""
"Given a path to a `.wav`, `.wave`, `.aif`, `.aiff`, `.ogg`, `.oga` or `.flac` "
"file, returns `true` if the sample has already been loaded."
msgstr ""

#: lang.json:sample_loaded?:examples:0:comments
msgid ""
"# :elec_blip is now loaded and ready to play as a sample\n"
"# prints true because it has been pre-loaded\n"
"# prints false because it has not been loaded\n"
msgstr ""

#: lang.json:sample_loaded?:summary
msgid "Test if sample was pre-loaded"
msgstr ""

#: lang.json:sample_names:description
msgid "Return a ring of sample names for the specified group"
msgstr ""

#: lang.json:sample_names:summary
msgid "Get sample names"
msgstr ""

#: lang.json:sample_paths:description
msgid ""
"Accepts the same pre-args and opts as `sample` and returns a ring of matched s"
"ample paths."
msgstr ""

#: lang.json:sample_paths:examples:0:comments
msgid ""
"#=> ring of all top-level samples in /path/to/samples\n"
msgstr ""

#: lang.json:sample_paths:examples:1:comments
msgid ""
"#=> ring of all nested samples in /path/to/samples\n"
msgstr ""

#: lang.json:sample_paths:examples:2:comments
msgid ""
"#=> ring of all samples in /path/to/samples\n"
" \n"
msgstr ""

#: lang.json:sample_paths:summary
msgid "Sample Pack Filter Resolution"
msgstr ""

#: lang.json:scale:description
msgid ""
"Creates a ring of MIDI note numbers when given a tonic note and a scale name. "
"Also takes an optional `num_octaves:` parameter (octave `1` is the default). I"
"f only passed the scale name, the tonic defaults to 0. See examples."
msgstr ""

#: lang.json:scale:examples:0:comments
msgid ""
"# returns the following ring of MIDI note numbers: (ring 60, 62, 64, 65, 67, 6"
"9, 71, 72)\n"
msgstr ""

#: lang.json:scale:examples:1:comments
msgid ""
"# anywhere you can use a list or ring of notes, you can also use scale\n"
" \n"
msgstr ""

#: lang.json:scale:examples:2:comments
msgid ""
"# you can use the :num_octaves parameter to get more notes\n"
" \n"
msgstr ""

#: lang.json:scale:examples:3:comments
msgid ""
"# Scales can start with any note:\n"
"#=> (ring 50, 52, 53, 55, 57, 58, 60, 62)\n"
"#=> (ring 50.1, 52.1, 53.1, 55.1, 57.1, 58.1, 60.1, 62.1)\n"
"#=> (ring 0, 2, 3, 5, 7, 8, 10, 12)\n"
msgstr ""

#: lang.json:scale:examples:4:comments
msgid ""
"# scales are also rings\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:scale:examples:5:comments
msgid ""
"# scales starting with 0 are useful in combination with sample's rpitch:\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:scale:examples:6:comments
msgid ""
"# Sonic Pi supports a large range of scales:\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:scale:opts:num_octaves:description
msgid ""
"The number of octaves you'd like the scale to consist of. More octaves means a"
" larger scale. Default is 1."
msgstr ""

#: lang.json:scale:summary
msgid "Create scale"
msgstr ""

#: lang.json:scale_names:description
msgid "Returns a ring containing all scale names known to Sonic Pi"
msgstr ""

#: lang.json:scale_names:examples:0:comments
msgid ""
"#=>  prints a list of all the scales\n"
msgstr ""

#: lang.json:scale_names:summary
msgid "All scale names"
msgstr ""

#: lang.json:scsynth_info:description
msgid ""
"Create a map of information about the running audio synthesiser SuperCollider."
" "
msgstr ""

#: lang.json:scsynth_info:examples:0:comments
msgid ""
"#=>  (map sample_rate: 44100.0,\n"
"#         sample_dur: 2.2675736545352265e-05,\n"
"#         radians_per_sample: 0.00014247585204429924,\n"
"#         control_rate: 689.0625,\n"
"#         control_dur: 0.001451247138902545,\n"
"#         subsample_offset: 0.0,\n"
"#         num_output_busses: 16.0,\n"
"#         num_input_busses: 16.0,\n"
"#         num_audio_busses: 1024.0,\n"
"#         num_control_busses: 4096.0,\n"
"#         num_buffers: 4096.0)\n"
msgstr ""

#: lang.json:scsynth_info:summary
msgid "Return information about the internal SuperCollider sound server"
msgstr ""

#: lang.json:set:description
msgid ""
"Store information in the Time State for the current time for either the curren"
"t or any other thread. If called multiple times without an intervening call to"
" `sleep`, `sync`, `set` or `cue`, the last value set will prevail. The value w"
"ill remain in the Time State until overwritten by another call to `set`, or un"
"til Sonic Pi quits.\n"
"\n"
"May be used within a `time_warp` to set past/future events. Does not affect ti"
"me."
msgstr ""

#: lang.json:set:examples:0:comments
msgid ""
"#=> Stores the value 1 with key :foo\n"
msgstr ""

#: lang.json:set:examples:1:comments
msgid ""
"# Set :foo to 3\n"
"#=> returns 3\n"
msgstr ""

#: lang.json:set:examples:2:comments
msgid ""
" \n"
"# Set :foo to 3\n"
" \n"
" \n"
"#=> always returns 3 (no race conditions here!)\n"
" \n"
msgstr ""

#: lang.json:set:summary
msgid "Store information in the Time State"
msgstr ""

#: lang.json:set_audio_latency!:description
msgid ""
"On some systems with certain configurations (such as wireless speakers, and ev"
"en a typical Windows environment with the default audio drivers) the audio lat"
"ency can be large. If all the user is doing is generating audio via calls such"
" as `play`, `synth` and `sample`, then this latency essentially adds to the sc"
"hedule ahead time and for the most part can be ignored. However, if the user i"
"s combining audio with external MIDI/OSC triggered events, this latency can re"
"sult in a noticeable offset. This function allows you to address this offset b"
"y moving the audio events forwards and backwards in time.\n"
"\n"
"So, for example, if your audio system has an audio latency of 150ms, you can c"
"ompensate for this by setting Sonic Pi's latency to be a negative value: `set_"
"audio_latency! -150`."
msgstr ""

#: lang.json:set_audio_latency!:examples:0:comments
msgid ""
"# Audio events will now be scheduled 100ms\n"
"# after the schedule ahead time\n"
msgstr ""

#: lang.json:set_audio_latency!:examples:1:comments
msgid ""
"# Audio events will now be scheduled 200ms\n"
"# before the schedule ahead time\n"
msgstr ""

#: lang.json:set_audio_latency!:summary
msgid "Globally modify audio latency"
msgstr ""

#: lang.json:set_cent_tuning!:description
msgid ""
"Globally tune Sonic Pi to play with another external instrument.\n"
"\n"
"Uniformly tunes your music by shifting all notes played by the specified numbe"
"r of cents. To shift up by a cent use a cent tuning of 1. To shift down use ne"
"gative numbers. One semitone consists of 100 cents.\n"
"\n"
"See `use_cent_tuning` for setting the cent tuning value locally for a specific"
" thread or `live_loop`. This is a global value and will shift the tuning for *"
"all* notes. It will also persist for the entire session.\n"
"\n"
"Important note: the cent tuning set by `set_cent_tuning!` is independent of an"
"y thread-local cent tuning values set by `use_cent_tuning` or `with_cent_tunin"
"g`. "
msgstr ""

#: lang.json:set_cent_tuning!:examples:0:comments
#: lang.json:use_cent_tuning:examples:0:comments
msgid ""
"# Plays note 50\n"
" \n"
"# Plays note 50.01\n"
msgstr ""

#: lang.json:set_cent_tuning!:summary
msgid "Global Cent tuning"
msgstr ""

#: lang.json:set_control_delta!:description
msgid ""
"Specify how many seconds between successive modifications (i.e. trigger then c"
"ontrols) of a specific node on a specific thread. Set larger if you are missin"
"g control messages sent extremely close together in time."
msgstr ""

#: lang.json:set_control_delta!:examples:0:comments
msgid ""
"# Set control delta to 0.1\n"
"# Play a note and set the slide time\n"
"# immediately start sliding note.\n"
"# This control message might not be\n"
"# correctly handled as it is sent at the\n"
"# same virtual time as the trigger.\n"
"# If you don't hear a slide, try increasing the\n"
"# control delta until you do.\n"
msgstr ""

#: lang.json:set_control_delta!:summary
msgid "Set control delta globally"
msgstr ""

#: lang.json:set_mixer_control!:description
msgid ""
"The main mixer is the final mixer that all sound passes through. This fn gives"
" you control over the main mixer allowing you to manipulate all the sound play"
"ing through Sonic Pi at once. For example, you can sweep a lpf or hpf over the"
" entire sound. You can reset the controls back to their defaults with `reset_m"
"ixer!`."
msgstr ""

#: lang.json:set_mixer_control!:examples:0:comments
msgid ""
"# slide the global lpf to 30 over 16 beats.\n"
msgstr ""

#: lang.json:set_mixer_control!:opts:amp:description
msgid ""
"Controls the amplitude of the signal after the FX stage. Has slide opts. Defau"
"lt 1."
msgstr ""

#: lang.json:set_mixer_control!:opts:hpf:description
msgid "Global hpf FX. Has slide opts. Default 0."
msgstr ""

#: lang.json:set_mixer_control!:opts:hpf_bypass:description
msgid "Bypass the global hpf. 0=no bypass, 1=bypass. Default 0."
msgstr ""

#: lang.json:set_mixer_control!:opts:leak_dc_bypass:description
msgid "Bypass the final DC leak correction FX. 0=no bypass, 1=bypass. Default 0."
msgstr ""

#: lang.json:set_mixer_control!:opts:limiter_bypass:description
msgid "Bypass the final limiter. 0=no bypass, 1=bypass. Default 0."
msgstr ""

#: lang.json:set_mixer_control!:opts:lpf:description
msgid "Global lpf FX. Has slide opts. Default 135.5."
msgstr ""

#: lang.json:set_mixer_control!:opts:lpf_bypass:description
msgid "Bypass the global lpf. 0=no bypass, 1=bypass. Default 0."
msgstr ""

#: lang.json:set_mixer_control!:opts:pre_amp:description
msgid ""
"Controls the amplitude of the signal prior to the FX stage of the mixer (prior"
" to lpf/hpf stages). Has slide opts. Default 1."
msgstr ""

#: lang.json:set_mixer_control!:summary
msgid "Control main mixer"
msgstr ""

#: lang.json:set_recording_bit_depth!:description
msgid ""
"When you hit the record button, Sonic Pi saves all the audio you can hear into"
" a wav file. By default, this file uses a resolution of 16 bits which is the s"
"ame as CD audio and good enough for most use cases. However, when working with"
" professional equipment, it is common to want to work with even higher quality"
" files such as 24 bits and even 32 bits. This function allows you to switch th"
"e default from 16 to one of 8, 16, 24 or 32."
msgstr ""

#: lang.json:set_recording_bit_depth!:examples:0:comments
msgid ""
"# Set recording bit depth to 24\n"
msgstr ""

#: lang.json:set_recording_bit_depth!:summary
msgid "Set the bit depth for recording wav files"
msgstr ""

#: lang.json:set_sched_ahead_time!:description
msgid ""
"Specify how many seconds ahead of time the synths should be triggered. This re"
"presents the amount of time between pressing 'Run' and hearing audio. A larger"
" time gives the system more room to work with and can reduce performance issue"
"s in playing fast sections on slower platforms. However, a larger time also in"
"creases latency between modifying code and hearing the result whilst live codi"
"ng."
msgstr ""

#: lang.json:set_sched_ahead_time!:examples:0:comments
#: lang.json:use_real_time:examples:0:comments
#: lang.json:use_sched_ahead_time:examples:0:comments
#: lang.json:with_real_time:examples:0:comments
msgid ""
"# Code will now run approximately 1 second ahead of audio.\n"
msgstr ""

#: lang.json:set_sched_ahead_time!:summary
msgid "Set sched ahead time globally"
msgstr ""

#: lang.json:set_volume!:description
msgid ""
"Set the main system volume to `vol`. Accepts a value between `0` and `5` inclu"
"sive. Vols greater or smaller than the allowed values are trimmed to keep them"
" within range. Default is `1`."
msgstr ""

#: lang.json:set_volume!:examples:0:comments
msgid ""
"# Set the main system volume to 2\n"
msgstr ""

#: lang.json:set_volume!:examples:1:comments
msgid ""
"# Out of range, so sets main system volume to 0\n"
msgstr ""

#: lang.json:set_volume!:examples:2:comments
msgid ""
"# Out of range, so sets main system volume to 5\n"
msgstr ""

#: lang.json:set_volume!:summary
msgid "Set Volume globally"
msgstr ""

#: lang.json:shuffle:description
msgid ""
"Returns a new list with the same elements as the original but with their order"
" shuffled. Also works for strings"
msgstr ""

#: lang.json:shuffle:examples:0:comments
msgid ""
"#=> Would return something like: [3, 4, 2, 1]\n"
msgstr ""

#: lang.json:shuffle:examples:1:comments
msgid ""
"#=> Would return something like: \"roobfa\"\n"
msgstr ""

#: lang.json:shuffle:summary
msgid "Randomise order of a list"
msgstr ""

#: lang.json:sleep:description
msgid ""
"Wait for a number of beats before triggering the next command. Beats are conve"
"rted to seconds by scaling to the current bpm setting."
msgstr ""

#: lang.json:sleep:examples:0:comments
msgid ""
"# Without calls to sleep, all sounds would happen at once:\n"
"# This is actually a chord with all notes played simultaneously\n"
" \n"
" \n"
"# Create a gap, to allow a moment's pause for reflection...\n"
"# Let's try the chord again, but this time with sleeps:\n"
"# With the sleeps, we turn a chord into an arpeggio\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:sleep:examples:1:comments
msgid ""
"# The amount of time sleep pauses for is scaled to match the current bpm. The "
"default bpm is 60. Let's double it:\n"
" \n"
" \n"
"# This actually sleeps for 0.5 seconds as we're now at double speed\n"
" \n"
" \n"
" \n"
"# Let's go down to half speed:\n"
" \n"
" \n"
"# This now sleeps for 2 seconds as we're now at half speed.\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:sleep:summary
msgid "Wait for beat duration"
msgstr ""

#: lang.json:spark:description
msgid ""
"Given a list of numeric values, this method turns them into a string of bar he"
"ights and prints them out. Useful for quickly graphing the shape of an array."
msgstr ""

#: lang.json:spark:examples:0:comments
#: lang.json:spark_graph:examples:0:comments
msgid ""
"#=> ▁▃▅█\n"
msgstr ""

#: lang.json:spark:examples:1:comments
#: lang.json:spark_graph:examples:1:comments
msgid ""
"#=> ▃█▅▁\n"
msgstr ""

#: lang.json:spark:summary
msgid ""
"Print a string representing a list of numeric values as a spark graph/bar char"
"t"
msgstr ""

#: lang.json:spark_graph:description
msgid ""
"Given a list of numeric values, this method turns them into a string of bar he"
"ights. Useful for quickly graphing the shape of an array. Remember to use puts"
" so you can see the output. See `spark` for a simple way of printing a spark g"
"raph."
msgstr ""

#: lang.json:spark_graph:summary
msgid ""
"Returns a string representing a list of numeric values as a spark graph/bar ch"
"art"
msgstr ""

#: lang.json:spread:description
msgid ""
"Creates a new ring of boolean values which space a given number of accents as "
"evenly as possible throughout a bar. This is an implementation of the process "
"described in 'The Euclidean Algorithm Generates Traditional Musical Rhythms' ("
"Toussaint 2005)."
msgstr ""

#: lang.json:spread:examples:0:comments
msgid ""
"#=> (ring true, false, false, true, false, false, true, false) a spacing of 33"
"2\n"
msgstr ""

#: lang.json:spread:examples:1:comments
msgid ""
"#=> (ring true, false, false, true, false, true, false, false) a spacing of 32"
"3\n"
msgstr ""

#: lang.json:spread:examples:2:comments
msgid ""
"# Easily create interesting polyrhythmic beats\n"
" \n"
"# Spread 3 bongs over 8\n"
"# Spread 7 snaps over 11\n"
"# Spread 1 bd over 4\n"
" \n"
" \n"
msgstr ""

#: lang.json:spread:examples:3:comments
msgid ""
"# Spread descriptions from\n"
"# 'The Euclidean Algorithm Generates Traditional Musical Rhythms' (Toussaint 2"
"005).\n"
"# A thirteenth century Persian rhythm called Khafif-e-ramal.\n"
"# The archetypal pattern of the Cumbria from Columbia, as well\n"
"# as a Calypso rhythm from Trinidad\n"
"# When started on the second onset, is another thirteenth\n"
"# century Persian rhythm by the name of Khafif-e-ramal, as well\n"
"# as a Romanian folk-dance rhythm.\n"
"# A ruchenitza rhythm used in a Bulgarian folk-dance.\n"
"# The Cuban tresillo pattern\n"
"# Another Ruchenitza Bulgarian folk-dance rhythm\n"
"# The Aksak rhythm of Turkey.\n"
"# The metric pattern used by Frank Zappa in his piece Outside Now\n"
"# Yields the York-Samai pattern, a popular Arab rhythm, when\n"
"# started on the second onset.\n"
"# The Nawakhat pattern, another popular Arab rhythm.\n"
"# The Cuban cinquillo pattern.\n"
"# A popular Arab rhythm called Agsag-Samai.\n"
"# The metric pattern used by Moussorgsky in Pictures at an\n"
"# Exhibition\n"
"# The Venda clapping pattern of a South African children's\n"
"# song.\n"
"# The Bossa-Nova rhythm necklace of Brazil.\n"
"# A typical rhythm played on the Bendir (frame drum)\n"
"# A common West African bell pattern.\n"
"# A Samba rhythm necklace from Brazil.\n"
"# A rhythm necklace used in the Central African Republic.\n"
"# A rhythm necklace of the Aka Pygmies of Central Africa.\n"
"# Another rhythm necklace of the Aka Pygmies of the upper\n"
"# Sangha.\n"
msgstr ""

#: lang.json:spread:opts:rotate:description
msgid ""
"rotate to the next strong beat allowing for easy permutations of the original "
"rhythmic grouping (see example)"
msgstr ""

#: lang.json:spread:summary
msgid "Euclidean distribution for beats"
msgstr ""

#: lang.json:status:description
msgid ""
"This returns a Hash of information about the synthesis environment. Mostly use"
"d for debugging purposes."
msgstr ""

#: lang.json:status:examples:0:comments
msgid ""
"# Returns something similar to:\n"
"# {\n"
"#   :ugens=>10,\n"
"#   :synths=>1,\n"
"#   :groups=>7,\n"
"#   :sdefs=>61,\n"
"#   :avg_cpu=>0.20156468451023102,\n"
"#   :peak_cpu=>0.36655542254447937,\n"
"#   :nom_samp_rate=>44100.0,\n"
"#   :act_samp_rate=>44099.9998411752,\n"
"#   :audio_busses=>2,\n"
"#   :control_busses=>0\n"
"# }\n"
msgstr ""

#: lang.json:status:summary
msgid "Get server status"
msgstr ""

#: lang.json:stop:description
msgid ""
"Stops the current thread or if not in a thread, stops the current run. Does no"
"t stop any running synths triggered previously in the run/thread or kill any e"
"xisting sub-threads."
msgstr ""

#: lang.json:stop:examples:0:comments
msgid ""
"#=> this sample is played until completion\n"
" \n"
"#=> signal to stop executing this run\n"
"#=> this never executes\n"
msgstr ""

#: lang.json:stop:examples:1:comments
msgid ""
" \n"
"#=> this note plays\n"
" \n"
"#=> this sleep never happens\n"
"#=> this play never happens\n"
" \n"
"#=> this plays as the stop only affected the above thread\n"
msgstr ""

#: lang.json:stop:examples:2:comments
msgid ""
"# Stopping live loops\n"
" \n"
" \n"
" \n"
"# live loop :foo will now stop and no longer loop\n"
" \n"
"# live loop :bar will continue looping\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:stop:summary
msgid "Stop current thread or run"
msgstr ""

#: lang.json:stretch:description
msgid ""
"Stretches a list of values each value repeated count times. Always returns a r"
"ing regardless of the type of the list that is stretched. To preserve type, co"
"nsider using `.stretch` i.e. `(ramp 1, 2, 3).stretch(2) #=> (ramp 1, 1, 2, 2, "
"3, 3)`"
msgstr ""

#: lang.json:stretch:examples:0:comments
msgid ""
"#=> (ring 1, 1, 1, 2, 2, 2)\n"
msgstr ""

#: lang.json:stretch:examples:1:comments
msgid ""
"#=> (ring :e2, :c3, :c2, :c2, :d3, :d3)\n"
msgstr ""

#: lang.json:stretch:summary
msgid "Stretch a sequence of values"
msgstr ""

#: lang.json:sync:description
msgid ""
"Pause/block the current thread until a `cue` heartbeat with a matching `cue_id"
"` is received. When a matching `cue` message is received, unblock the current "
"thread, and continue execution with the virtual time set to match the thread t"
"hat sent the `cue` heartbeat. The current thread is therefore synced to the `c"
"ue` thread. If multiple cue ids are passed as arguments, it will `sync` on the"
" first matching `cue_id`. The BPM of the cueing thread can optionally be inher"
"ited by using the bpm_sync: opt."
msgstr ""

#: lang.json:sync:examples:0:comments
msgid ""
" \n"
"# this parks the current thread waiting for a foo sync message to be received."
"\n"
" \n"
" \n"
" \n"
"# We send a sync message from the main thread.\n"
"# This then unblocks the thread above and we then hear the sample\n"
msgstr ""

#: lang.json:sync:examples:1:comments
msgid ""
"# Start a metronome thread\n"
"# Loop forever:\n"
"# sending tick heartbeat messages\n"
"# and sleeping for 0.5 beats between ticks\n"
" \n"
" \n"
"# We can now play sounds using the metronome.\n"
"# In the main thread, just loop\n"
"# waiting for :tick sync messages\n"
"# after which play the drum kick sample\n"
" \n"
msgstr ""

#: lang.json:sync:examples:2:comments
msgid ""
"# Wait for either a :foo or :bar cue\n"
msgstr ""

#: lang.json:sync:examples:3:comments
msgid ""
"# Start a metronome thread\n"
"# Loop forever:\n"
"# sending one of three tick heartbeat messages randomly\n"
"# and sleeping for 0.5 beats between ticks\n"
" \n"
" \n"
"# We can now play sounds using the metronome:\n"
" \n"
"# In the main thread, just loop\n"
"# waiting for :foo sync messages\n"
"# after which play the elec beep sample\n"
" \n"
" \n"
" \n"
"# In the main thread, just loop\n"
"# waiting for :bar sync messages\n"
"# after which play the elec flip sample\n"
" \n"
" \n"
" \n"
"# In the main thread, just loop\n"
"# waiting for :baz sync messages\n"
"# after which play the elec blup sample\n"
" \n"
" \n"
msgstr ""

#: lang.json:sync:opts:bpm_sync:description
msgid "Inherit the BPM of the cueing thread. Default is false"
msgstr ""

#: lang.json:sync:summary
msgid "Sync with other threads"
msgstr ""

#: lang.json:sync_bpm:description
msgid "An alias for `sync` with the `bpm_sync:` opt set to true."
msgstr ""

#: lang.json:sync_bpm:summary
msgid "Sync and inherit BPM from other threads "
msgstr ""

#: lang.json:synth:description
msgid ""
"Trigger specified synth with given opts. Bypasses `current_synth` value, yet s"
"till honours `current_synth_defaults`. When using `synth`, the note is no long"
"er an explicit argument but an opt with the key `note:`.\n"
"\n"
"If note: opt is `nil`, `:r` or `:rest`, play is ignored and treated as a rest."
" Also, if the `on:` opt is specified and returns `false`, or `nil` then play i"
"s similarly ignored and treated as a rest.\n"
"\n"
"If the synth name is `nil` behaviour is identical to that of `play` in that th"
"e `current_synth` will determine the actual synth triggered.\n"
"\n"
"If a block is given, it is assumed to take one arg which will be the controlla"
"ble synth node and the body of the block is run in an implicit `in_thread`. Th"
"is allows for asynchronous control of the synth without interfering with time."
" For synchronous control capture the result of `synth` as a variable and use t"
"hat.\n"
"\n"
"Note that the default opts listed are only a guide to the most common opts acr"
"oss all the synths. Not all synths support all the default opts and each synth"
" typically supports many more opts specific to that synth. For example, the `:"
"tb303` synth supports 45 unique opts. For a full list of a synth's opts see it"
"s documentation in the Help system. This can be accessed directly by clicking "
"on the name of the synth and using the shortcut `C-i`"
msgstr ""

#: lang.json:synth:examples:0:comments
msgid ""
"# Set current synth to :beep\n"
"# Play note 60 with opt defaults\n"
"# Bypass current synth and play :dsaw\n"
"# with note 60 and opt defaults\n"
msgstr ""

#: lang.json:synth:examples:1:comments
msgid ""
"# Play note 60 of the :fm synth with an amplitude of 0.5\n"
msgstr ""

#: lang.json:synth:examples:2:comments
msgid ""
" \n"
"# Play note 50 of the :dsaw synth with a release of 5\n"
msgstr ""

#: lang.json:synth:examples:3:comments
msgid ""
"# You can play chords with the notes: opt:\n"
" \n"
msgstr ""

#: lang.json:synth:examples:4:comments
msgid ""
"# on: vs if\n"
" \n"
" \n"
" \n"
" \n"
"# Here, we're calling notes.tick\n"
"# every time we attempt to play the synth\n"
"# so the notes rise faster than rhyth2\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
"# Here, we're calling notes.tick\n"
"# only when the spread says to play\n"
"# so the notes rise slower than rhyth\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:synth:examples:5:comments
msgid ""
"# controlling a synth synchronously\n"
" \n"
" \n"
" \n"
" \n"
"# This is triggered after 1.5s from start\n"
msgstr ""

#: lang.json:synth:examples:6:comments
msgid ""
"# Controlling a synth asynchronously\n"
" \n"
"# This block is run in an implicit in_thread\n"
"# and therefore is asynchronous\n"
" \n"
" \n"
"# This is triggered after 0.5s from start\n"
msgstr ""

#: lang.json:synth:summary
msgid "Trigger specific synth"
msgstr ""

#: lang.json:synth_names:description
msgid "Return a list of all the synths available"
msgstr ""

#: lang.json:synth_names:summary
msgid "Get all synth names"
msgstr ""

#: lang.json:tick:description
msgid ""
"Increment the default tick by 1 and return value. Successive calls to `tick` w"
"ill continue to increment the default tick. If a `key` is specified, increment"
" that specific tick. If an increment `value` is specified, increment key by th"
"at value rather than 1. Ticks are `in_thread` and `live_loop` local, so increm"
"enting a tick only affects the current thread's version of that tick. See `tic"
"k_reset` and `tick_set` for directly manipulating the tick vals."
msgstr ""

#: lang.json:tick:examples:0:comments
msgid ""
"#=> 0\n"
"#=> 1\n"
"#=> 2\n"
"#=> 3\n"
msgstr ""

#: lang.json:tick:examples:1:comments
msgid ""
"#=> 0 # named ticks have their own counts\n"
"#=> 1\n"
"#=> 2\n"
"#=> 0 # tick :bar is independent of tick :foo\n"
msgstr ""

#: lang.json:tick:examples:2:comments
msgid ""
"# You can tick by more than increments of 1\n"
"# using the step: opt\n"
"#=> 0\n"
"#=> 1\n"
"#=> 2\n"
"#=> 4\n"
"#=> 6\n"
"#=> 16\n"
"#=> 17\n"
msgstr ""

#: lang.json:tick:examples:3:comments
msgid ""
"# Each_live loop has its own separate ticks\n"
" \n"
"# the fast_tick live_loop's tick will\n"
"# be updated every 2 seconds\n"
" \n"
" \n"
"# the slow_tick live_loop's tick is\n"
"# totally independent from the fast_tick\n"
"# live loop and will be updated every 4\n"
"# seconds\n"
" \n"
msgstr ""

#: lang.json:tick:examples:4:comments
msgid ""
" \n"
"# the regular_tick live_loop's tick will\n"
"# be updated every second\n"
" \n"
" \n"
"# randomly reset tick\n"
" \n"
" \n"
" \n"
"# this live_loop's tick is totally\n"
"# independent and the reset only affects\n"
"# this tick.\n"
" \n"
msgstr ""

#: lang.json:tick:examples:5:comments
msgid ""
"# Ticks work directly on lists, and will tick through each element\n"
"# However, once they get to the end, they'll return nil\n"
" \n"
"# play all notes just once, then rests\n"
" \n"
" \n"
msgstr ""

#: lang.json:tick:examples:6:comments
msgid ""
"# Normal ticks interact directly with list ticks\n"
" \n"
"# Increment the default tick\n"
"# this now play every *other* note just once,\n"
"# then rests\n"
" \n"
" \n"
msgstr ""

#: lang.json:tick:examples:7:comments
msgid ""
"# Ticks work wonderfully with rings\n"
"# as the ring ensures the tick wraps\n"
"# round internally always returning a\n"
"# value\n"
" \n"
"# play all notes just once, then repeats\n"
" \n"
" \n"
msgstr ""

#: lang.json:tick:examples:8:comments
msgid ""
"# Ticks work wonderfully with scales\n"
"# which are also rings\n"
" \n"
"# play all notes just once, then repeats\n"
" \n"
" \n"
msgstr ""

#: lang.json:tick:opts:offset:description
msgid ""
"Offset to add to index returned. Useful when calling tick on lists, rings and "
"vectors to offset the returned value. Default is 0."
msgstr ""

#: lang.json:tick:opts:step:description
msgid "The amount to tick up by. Default is 1."
msgstr ""

#: lang.json:tick:summary
msgid "Increment a tick and return value"
msgstr ""

#: lang.json:tick_reset:description
msgid ""
"Reset default tick to 0. If a `key` is referenced, set that tick to 0 instead."
" Same as calling tick_set(0)"
msgstr ""

#: lang.json:tick_reset:examples:0:comments
msgid ""
"# increment default tick a few times\n"
" \n"
" \n"
" \n"
"#=> 2 (default tick is now 2)\n"
"# default tick is now 0\n"
"#=> 0 (default tick is now 0\n"
msgstr ""

#: lang.json:tick_reset:examples:1:comments
msgid ""
"# increment tick :foo a few times\n"
" \n"
" \n"
" \n"
"#=> 2 (tick :foo is now 2)\n"
"# default tick is now 0\n"
"#=> 2 (tick :foo is still 2)\n"
"#  reset tick :foo\n"
"#=> 0 (tick :foo is now 0)\n"
msgstr ""

#: lang.json:tick_reset:summary
msgid "Reset tick to 0"
msgstr ""

#: lang.json:tick_reset_all:description
msgid "Reset all ticks - default and keyed"
msgstr ""

#: lang.json:tick_reset_all:examples:0:comments
msgid ""
"# increment default tick and tick :foo\n"
" \n"
" \n"
" \n"
" \n"
"#=> 1\n"
"#=> 2\n"
" \n"
"#=> 0\n"
"#=> 0\n"
msgstr ""

#: lang.json:tick_reset_all:summary
msgid "Reset all ticks"
msgstr ""

#: lang.json:tick_set:description
msgid ""
"Set the default tick to the specified `value`. If a `key` is referenced, set t"
"hat tick to `value` instead. Next call to `look` will return `value`."
msgstr ""

#: lang.json:tick_set:examples:0:comments
msgid ""
"# set default tick to 40\n"
"#=> 40\n"
msgstr ""

#: lang.json:tick_set:examples:1:comments
msgid ""
"# set tick :foo to 40\n"
"#=> 40 (tick :foo is now 40)\n"
"#=> 0 (default tick is unaffected)\n"
msgstr ""

#: lang.json:tick_set:summary
msgid "Set tick to a specific value"
msgstr ""

#: lang.json:time_warp:description
msgid ""
"The code within the given block is executed with the specified delta time shif"
"t specified in beats. For example, if the delta value is 0.1 then all code wit"
"hin the block is executed with a 0.1 beat delay. Negative values are allowed w"
"hich means you can move a block of code *backwards in time*. For example a del"
"ta value of -0.1 will execute the code in the block 0.1 beats ahead of time. T"
"he time before the block started is restored after the execution of the block."
"\n"
"\n"
"Given a list of times, run the block once after waiting each given time. If pa"
"ssed an optional params list, will pass each param individually to each block "
"call. If size of params list is smaller than the times list, the param values "
"will act as rings (rotate through). If the block is given 1 arg, the times are"
" fed through. If the block is given 2 args, both the times and the params are "
"fed through. A third block arg will receive the index of the time.\n"
"\n"
"Note that the code within the block is executed synchronously with the code be"
"fore and after, so all thread locals will be modified inline - as is the case "
"for `with_fx`. However, as time is always restored to the value before `time_w"
"arp` started, you can use it to schedule events for the future in a similar fa"
"shion to a thread (via `at` or `in_thread`) without having to use an entirely "
"fresh and distinct set of thread locals - see examples.\n"
"\n"
"Also, note that you cannot travel backwards in time beyond the `current_sched_"
"ahead_time`.\n"
"\n"
"If the `time_warp` block is within a `density` block, the delta time is not af"
"fected (although all the other times such as sleep and phase durations will be"
" affected) - see example.\n"
"\n"
"`time_warp` is ahead-of-time scheduling within the current thread. See `at` fo"
"r just-in-time scheduling using multiple isolated threads."
msgstr ""

#: lang.json:time_warp:examples:0:comments
msgid ""
"# shift forwards in time\n"
"#=> plays at time 0\n"
" \n"
"#=> plays at time 1\n"
" \n"
"# time shifts forward by 0.1 beats\n"
"#=> plays at 1.1\n"
" \n"
"#=> plays at 1.6\n"
"# time shifts back by 0.6 beats\n"
"# we now honour the original sleep 1 and the\n"
"# sleep 0.5 within the time_warp block is\n"
"# ignored including the 0.1 shift offset\n"
"#=> plays at 1\n"
msgstr ""

#: lang.json:time_warp:examples:10:comments
msgid ""
"# If you specify the block with 2 args, it will pass through both the time and"
" the param\n"
"#=> prints out [0, :a], [1, :b], then [2, :a]\n"
" \n"
msgstr ""

#: lang.json:time_warp:examples:11:comments
msgid ""
"# If you specify the block with 2 args, and no param list to at, it will pass "
"through both the time and the index\n"
"#=> prints out [0, 0], [0.5, 1], then [2, 2]\n"
" \n"
msgstr ""

#: lang.json:time_warp:examples:12:comments
msgid ""
"# If you specify the block with 3 args, it will pass through the time, the par"
"am and the index\n"
"#=> prints out [0, :a, 0], [0.5, :b, 1], then [2, :a, 2]\n"
" \n"
msgstr ""

#: lang.json:time_warp:examples:13:comments
msgid ""
"# time_warp consumes & interferes with the outer random stream\n"
"# 0.75006103515625\n"
" \n"
"# the random stream inside the at block is the\n"
"# same as the one in the outer block\n"
"# 0.75006103515625\n"
"# 0.733917236328125\n"
"# undo last call to rand\n"
" \n"
" \n"
"# value is now 0.733917236328125 again\n"
msgstr ""

#: lang.json:time_warp:examples:14:comments
msgid ""
"# Each block run inherits the same thread locals from the previous one.\n"
"# This means things like the thread local counters can flow through\n"
"# time warp iterations:\n"
" \n"
"# first time round (after 1 beat) prints:\n"
"# 0\n"
"# 1\n"
" \n"
"# second time round (after 2 beats) prints:\n"
"# 2\n"
"# 3\n"
msgstr ""

#: lang.json:time_warp:examples:1:comments
msgid ""
"# shift backwards in time\n"
"#=> plays at time 0\n"
" \n"
"#=> plays at time 1\n"
" \n"
"# time shifts backwards by 0.1 beats\n"
"#=> plays at 0.9\n"
" \n"
"#=> plays at 1.4\n"
"# time shifts forward by 0.1 beats\n"
" \n"
"# we now honour the original sleep 1 and the\n"
"# sleep 0.5 within the time_warp block is\n"
"# ignored, including the -0.1 offset\n"
"#=> plays at 1\n"
msgstr ""

#: lang.json:time_warp:examples:2:comments
msgid ""
"# Ticks count linearly through time_warp\n"
"#=> prints 0 (at time 0)\n"
" \n"
" \n"
"#=> prints 1 (at time 3)\n"
" \n"
" \n"
"#=> prints 2 (at time 1.5)\n"
msgstr ""

#: lang.json:time_warp:examples:3:comments
msgid ""
"# Comparing time_warp with at\n"
"#=> prints 0 (at time 0)\n"
" \n"
"#=> prints 1 (at time 0.5)\n"
" \n"
"#=> prints 2 (at time 2.5)\n"
" \n"
"#=> prints 3 (at time 3)\n"
" \n"
"# the at will reset all thread locals\n"
"#=> prints 0 (At time 3.5)\n"
" \n"
"#=> prints 1 (At time 4)\n"
" \n"
" \n"
"#=> prints 4 (at time 1)\n"
msgstr ""

#: lang.json:time_warp:examples:4:comments
msgid ""
"# Time Warp within Density\n"
"# Typically this will double the BPM and affect all times\n"
"# in addition to looping the internal block twice\n"
"# However, this time is *not* affected and will remain 0.5\n"
"# This phase duration *is* affected and will be 0.25\n"
" \n"
"# This time *will* be affected by the density and be 0.5\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:time_warp:examples:5:comments
msgid ""
"# Time Warp with lists of times\n"
" \n"
"# Will print \"hello\" at 0, 1, 2, and 3 seconds\n"
" \n"
"# Notice that the run completes before all the\n"
"# messages have been delivered. This is because it\n"
"# schedules all the messages at once so the program\n"
"# can complete immediately. This is unlike at which\n"
"# would appear to behave similarly, but would wait\n"
"# for all messages to be delivered (on time) before\n"
"# allowing the program to complete.\n"
msgstr ""

#: lang.json:time_warp:summary
msgid "Shift time forwards or backwards for the given block"
msgstr ""

#: lang.json:uncomment:description
msgid ""
"Evaluates all of the code within the block. Use to reverse the effect of the c"
"omment without having to explicitly remove it."
msgstr ""

#: lang.json:uncomment:examples:0:comments
msgid ""
"# starting a block level comment:\n"
"# played\n"
"# sleep happens\n"
"# played\n"
" \n"
msgstr ""

#: lang.json:uncomment:summary
msgid "Block level comment ignoring"
msgstr ""

#: lang.json:use_arg_bpm_scaling:description
msgid ""
"Turn synth argument bpm scaling on or off for the current thread. This is on b"
"y default. Note, using `rt` for args will result in incorrect times when used "
"after turning arg bpm scaling off."
msgstr ""

#: lang.json:use_arg_bpm_scaling:examples:0:comments
msgid ""
" \n"
"# release is actually 1 due to bpm scaling\n"
"# actually sleeps for 1 second\n"
" \n"
"# release is now 2\n"
"# still sleeps for 1 second\n"
msgstr ""

#: lang.json:use_arg_bpm_scaling:examples:1:comments
msgid ""
"# Interaction with rt\n"
" \n"
"# release is 2 seconds\n"
"# sleeps for 2 seconds\n"
" \n"
"# ** Warning: release is NOT 2 seconds! **\n"
"# still sleeps for 2 seconds\n"
msgstr ""

#: lang.json:use_arg_bpm_scaling:summary
msgid "Enable and disable BPM scaling"
msgstr ""

#: lang.json:use_arg_checks:description
msgid ""
"When triggering synths, each argument is checked to see if it is sensible. Whe"
"n argument checking is enabled and an argument isn't sensible, you'll see an e"
"rror in the debug pane. This setting allows you to explicitly enable and disab"
"le the checking mechanism. See with_arg_checks for enabling/disabling argument"
" checking only for a specific `do`/`end` block."
msgstr ""

#: lang.json:use_arg_checks:examples:0:comments
msgid ""
"# Args are checked\n"
" \n"
"# Args are not checked\n"
msgstr ""

#: lang.json:use_arg_checks:summary
msgid "Enable and disable arg checks"
msgstr ""

#: lang.json:use_bpm:description
msgid ""
"Sets the tempo in bpm (beats per minute) for everything afterwards. Affects al"
"l subsequent calls to `sleep` and all temporal synth arguments which will be s"
"caled to match the new bpm. If you wish to bypass scaling in calls to sleep, s"
"ee the fn `rt`. Also, if you wish to bypass time scaling in synth args see `us"
"e_arg_bpm_scaling`. See also `with_bpm` for a block scoped version of `use_bpm"
"`.\n"
"\n"
"  For dance music here's a rough guide for which BPM to aim for depending on y"
"our genre:\n"
"\n"
"  * Dub: 60-90 bpm\n"
"  * Hip-hop: 60-100 bpm\n"
"  * Downtempo: 90-120 bpm\n"
"  * House: 115-130 bpm\n"
"  * Techno/trance: 120-140 bpm\n"
"  * Dubstep: 135-145 bpm\n"
"  * Drum and bass: 160-180 bpm"
msgstr ""

#: lang.json:use_bpm:examples:0:comments
msgid ""
"# default tempo is 60 bpm\n"
" \n"
"# attack is 0.5s and release is 0.25s\n"
"# sleep for 1 second\n"
" \n"
"# sleep for 2 seconds\n"
"# Let's make it go faster...\n"
"# double the bpm\n"
" \n"
"# attack is scaled to 0.25s and release is now 0.125s\n"
"# actually sleeps for 0.5 seconds\n"
" \n"
"# sleep for 1 second\n"
"# Let's make it go even faster...\n"
"#  bpm is 4x original speed!\n"
" \n"
"# attack is scaled to 0.125s and release is now 0.0625s\n"
"# actually sleeps for 0.25 seconds\n"
" \n"
msgstr ""

#: lang.json:use_bpm:summary
msgid "Set the tempo"
msgstr ""

#: lang.json:use_bpm_mul:description
msgid ""
"Sets the tempo in bpm (beats per minute) as a multiplication of the current te"
"mpo. Affects all containing calls to `sleep` and all temporal synth arguments "
"which will be scaled to match the new bpm. See also `use_bpm`"
msgstr ""

#: lang.json:use_bpm_mul:examples:0:comments
msgid ""
"# Set the BPM to 60\n"
" \n"
"# Sleeps for 1 seconds\n"
" \n"
"# Sleeps for 2 seconds\n"
"# BPM is now (60 * 0.5) == 30\n"
" \n"
"# Sleeps for 2 seconds\n"
" \n"
msgstr ""

#: lang.json:use_bpm_mul:summary
msgid "Set new tempo as a multiple of current tempo"
msgstr ""

#: lang.json:use_cent_tuning:description
msgid ""
"Uniformly tunes your music by shifting all notes played by the specified numbe"
"r of cents. To shift up by a cent use a cent tuning of 1. To shift down use ne"
"gative numbers. One semitone consists of 100 cents.\n"
"\n"
"See `with_cent_tuning` for setting the cent tuning value only for a specific `"
"do`/`end` block. To transpose entire semitones see `use_transpose`."
msgstr ""

#: lang.json:use_cent_tuning:summary
msgid "Cent tuning"
msgstr ""

#: lang.json:use_cue_logging:description
msgid ""
"Enable or disable log messages created on cues. This does not disable the cues"
" themselves, it just stops them from being printed to the log"
msgstr ""

#: lang.json:use_cue_logging:examples:0:comments
msgid ""
"# Turn on cue messages\n"
msgstr ""

#: lang.json:use_cue_logging:examples:1:comments
msgid ""
"# Disable cue messages\n"
msgstr ""

#: lang.json:use_cue_logging:summary
msgid "Enable and disable cue logging"
msgstr ""

#: lang.json:use_debug:description
msgid ""
"Enable or disable messages created on synth triggers. If this is set to false,"
" the synths will be silent until debug is turned back on. Silencing debug mess"
"ages can reduce output noise and also increase performance on slower platforms"
". See `with_debug` for setting the debug value only for a specific `do`/`end` "
"block."
msgstr ""

#: lang.json:use_debug:examples:0:comments
msgid ""
"# Turn on debug messages\n"
msgstr ""

#: lang.json:use_debug:examples:1:comments
msgid ""
"# Disable debug messages\n"
msgstr ""

#: lang.json:use_debug:summary
msgid "Enable and disable debug"
msgstr ""

#: lang.json:use_merged_midi_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `midi_*` fns."
" Merges the specified values with any previous defaults, rather than replacing"
" them"
msgstr ""

#: lang.json:use_merged_midi_defaults:examples:0:comments
msgid ""
"# Sends MIDI :e1 note_on with default opts\n"
" \n"
"# Sends MIDI :e3 note_on to channel 3 on port \"foo\"\n"
" \n"
"# Sends MIDI :e2 note_on to channel 1 on port \"foo\".\n"
"# This is because the call to use_merged_midi_defaults overrode the\n"
"# channel but not the port which got merged in.\n"
msgstr ""

#: lang.json:use_merged_midi_defaults:summary
msgid "Merge MIDI defaults"
msgstr ""

#: lang.json:use_merged_sample_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `sample`. Mer"
"ges the specified values with any previous defaults, rather than replacing the"
"m."
msgstr ""

#: lang.json:use_merged_sample_defaults:examples:0:comments
msgid ""
"# plays amen break with default arguments\n"
" \n"
"# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of a"
"rgs\n"
" \n"
"# plays amen break with a cutoff of 90 and and an amp of 0.5 with defaults for"
" rest of args\n"
msgstr ""

#: lang.json:use_merged_sample_defaults:summary
msgid "Merge new sample defaults"
msgstr ""

#: lang.json:use_merged_synth_defaults:description
msgid ""
"Specify synth arg values to be used by any following call to play. Merges the "
"specified values with any previous defaults, rather than replacing them."
msgstr ""

#: lang.json:use_merged_synth_defaults:examples:0:comments
msgid ""
"#=> Plays note 50\n"
" \n"
"#=> Plays note 50 with amp 0.5\n"
" \n"
"#=> Plays note 50 with amp 0.5 and cutoff 80\n"
" \n"
"#=> Plays note 50 with amp 0.7 and cutoff 80\n"
msgstr ""

#: lang.json:use_merged_synth_defaults:examples:1:comments
msgid ""
" \n"
" \n"
"#=> Plays note 50 with amp 0.7, cutoff 80 and pan -1\n"
msgstr ""

#: lang.json:use_merged_synth_defaults:summary
msgid "Merge synth defaults"
msgstr ""

#: lang.json:use_midi_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `midi_*` fns."
" Will remove and override any previous defaults."
msgstr ""

#: lang.json:use_midi_defaults:examples:0:comments
msgid ""
"# Sends MIDI :e1 note_on with default opts\n"
" \n"
"# Sends MIDI :e3 note_on to channel 3 on port \"foo\"\n"
" \n"
"# Sends MIDI :e2 note_on to channel 1. Note that the port is back to the defau"
"lt and no longer \"foo\".\n"
msgstr ""

#: lang.json:use_midi_defaults:summary
msgid "Use new MIDI defaults"
msgstr ""

#: lang.json:use_midi_logging:description
msgid ""
"Enable or disable log messages created on MIDI functions. This does not disabl"
"e the MIDI functions themselves, it just stops them from being printed to the "
"log"
msgstr ""

#: lang.json:use_midi_logging:examples:0:comments
msgid ""
"# Turn on MIDI logging\n"
msgstr ""

#: lang.json:use_midi_logging:examples:1:comments
msgid ""
"# Disable MIDI logging\n"
msgstr ""

#: lang.json:use_midi_logging:summary
msgid "Enable and disable MIDI logging"
msgstr ""

#: lang.json:use_octave:description
msgid ""
"Transposes your music by shifting all notes played by the specified number of "
"octaves. To shift up by an octave use a transpose of 1. To shift down use nega"
"tive numbers. See `with_octave` for setting the octave shift only for a specif"
"ic `do`/`end` block. For transposing the notes within the octave range see `us"
"e_transpose`."
msgstr ""

#: lang.json:use_octave:examples:0:comments
msgid ""
"# Plays note 50\n"
" \n"
"# Plays note 62\n"
msgstr ""

#: lang.json:use_octave:examples:1:comments
msgid ""
"# You may change the transposition multiple times:\n"
"# Plays note 62\n"
" \n"
"# Plays note 50\n"
" \n"
"# Plays note 86\n"
msgstr ""

#: lang.json:use_octave:summary
msgid "Note octave transposition"
msgstr ""

#: lang.json:use_osc:description
msgid ""
"Sets the destination host and port that `osc` will send messages to. If no por"
"t number is specified - will default to port 4560 (Sonic Pi's default OSC list"
"ening port).\n"
"\n"
"OSC (Open Sound Control) is a simple way of passing messages between two separ"
"ate programs on the same computer or even on different computers via a local n"
"etwork or even the internet. `use_osc` allows you to specify which computer (`"
"hostname`) and program (`port`) to send messages to.\n"
"\n"
"It is possible to send messages to the same computer by using the host name `\""
"localhost\"`\n"
"\n"
"This is a thread-local setting - therefore each thread (or live loop) can have"
" their own separate `use_osc` values.\n"
"\n"
"Note that calls to `osc_send` will ignore these values.\n"
"\n"
msgstr ""

#: lang.json:use_osc:examples:1:comments
msgid ""
"# Send an OSC messages with arguments to another program on the same machine\n"
"# Specify port 7000 on this machine\n"
"# Send an OSC message with path \"/foo/bar\"\n"
"# and three arguments:\n"
"# 1) The whole number (integer) 1\n"
"# 2) The fractional number (float) 3,89\n"
"# 3) The string \"baz\"\n"
msgstr ""

#: lang.json:use_osc:examples:2:comments
msgid ""
"# Send an OSC messages with arguments to another program on a different machin"
"e\n"
"# Specify port 7000 on the machine with address 10.0.1.5\n"
"# Send an OSC message with path \"/foo/bar\"\n"
"# and three arguments:\n"
"# 1) The whole number (integer) 1\n"
"# 2) The fractional number (float) 3,89\n"
"# 3) The string \"baz\"\n"
msgstr ""

#: lang.json:use_osc:examples:3:comments
msgid ""
"# use_osc only affects calls to osc until the next call to use_osc\n"
"# Specify port 7000 on this machine\n"
"# Send an OSC message to port 7000\n"
"# Send another OSC message to port 7000\n"
"# Specify port 7000 on this machine\n"
"# Send an OSC message to port 7005\n"
"# Send another OSC message to port 7005\n"
msgstr ""

#: lang.json:use_osc:examples:4:comments
msgid ""
"# threads may have their own use_osc value\n"
"# Specify port 7000 on this machine\n"
" \n"
"# Thread inherits outside use_osc values\n"
"# and therefore sends OSC messages to port 7000\n"
" \n"
" \n"
"# Override OSC hostname and port for just this\n"
"# thread (live loop :bar). Live loop :foo is\n"
"# unaffected.\n"
"# Send OSC messages to port 7005\n"
" \n"
" \n"
"# Specify port 7010\n"
"# Send another OSC message to port 7010\n"
"# Note that neither live loops :foo or :bar\n"
"# are affected (their use_osc values are\n"
"# independent and isolated.\n"
msgstr ""

#: lang.json:use_osc:summary
msgid "Set the default hostname and port number for outgoing OSC messages."
msgstr ""

#: lang.json:use_osc_logging:description
msgid ""
"Enable or disable log messages created on OSC functions. This does not disable"
" the OSC functions themselves, it just stops them from being printed to the lo"
"g"
msgstr ""

#: lang.json:use_osc_logging:examples:0:comments
msgid ""
"# Turn on OSC logging\n"
msgstr ""

#: lang.json:use_osc_logging:examples:1:comments
msgid ""
"# Disable OSC logging\n"
msgstr ""

#: lang.json:use_osc_logging:summary
msgid "Enable and disable OSC logging"
msgstr ""

#: lang.json:use_random_seed:description
msgid ""
"Resets the random number generator to the specified seed. All subsequently gen"
"erated random numbers and randomisation functions such as `shuffle` and `choos"
"e` will use this new generator and the current generator is discarded. Use thi"
"s to change the sequence of random numbers in your piece in a way that can be "
"reproduced. Especially useful if combined with iteration. See examples."
msgstr ""

#: lang.json:use_random_seed:examples:0:comments
msgid ""
"# Basic usage\n"
"# reset random seed to 1\n"
"# => 0.417022004702574\n"
"# reset random seed back to 1\n"
"#=> 0.417022004702574\n"
msgstr ""

#: lang.json:use_random_seed:examples:1:comments
msgid ""
"# Generating melodies\n"
"# Create a set of notes to choose from.\n"
"# Scales work well for this\n"
" \n"
"# Create a live loop\n"
"# Set the random seed to a known value every\n"
"# time around the loop. This seed is the key\n"
"# to our melody. Try changing the number to\n"
"# something else. Different numbers produce\n"
"# different melodies\n"
"# Now iterate a number of times. The size of\n"
"# the iteration will be the length of the\n"
"# repeating melody.\n"
"# 'Randomly' choose a note from our ring of\n"
"# notes. See how this isn't actually random\n"
"# but uses a reproducible method! These notes\n"
"# are therefore repeated over and over...\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:use_random_seed:summary
msgid "Set random seed generator to known seed"
msgstr ""

#: lang.json:use_random_source:description
msgid ""
"Sets the random number source to be one of `:white`, `:pink`, `:light_pink`, `"
":dark_pink` or `:perlin`.\n"
"\n"
"`:white` is totally random - between 0 and 1, you can expect an even spread of"
" values around 0.1, 0.2, 0.3 etc. This means that jumping around within the ra"
"nge (including large jumps) is expected.\n"
"\n"
"`:pink` is more likely to produce values in the middle of the range and less l"
"ikely to produce values at the extremes. Between 0 and 1 you expect to see a c"
"oncentration of values around 0.5. This can make random melodies a little bit "
"more smooth.\n"
"\n"
"`:perlin` is a special kind of noise which produces gradients, a bit like a mo"
"untain landscape. Large jumps are much less likely and you will tend to see lo"
"ts of smooth motion going either up or down\n"
"\n"
"`:light_pink` is halfway between white noise and pink noise - more random and "
"jumpy\n"
"\n"
"`:dark_pink` is halfway between pink noise and brown noise - less jumpy with s"
"moother slopes\n"
"\n"
"You can see the 'buckets' that the numbers between 0 and 1 fall into with the "
"following code:\n"
"\n"
"        rand_type :white\n"
"        puts 10000.times.collect { rand.round(1) }.tally.sort\n"
"        rand_type :pink\n"
"        puts 10000.times.collect { rand.round(1) }.tally.sort\n"
"        rand_type :perlin\n"
"        puts 10000.times.collect { rand.round(1) }.tally.sort\n"
"\n"
"      "
msgstr ""

#: lang.json:use_random_source:examples:0:comments
#: lang.json:with_random_source:examples:0:comments
msgid ""
"# use white noise as the distribution (default)\n"
"# reset random seed\n"
"# => 0.75006103515625\n"
"# => 0.733917236328125\n"
"# => 0.464202880859375\n"
"# reset it again\n"
"# use pink noise as the distribution\n"
"# => 0.47808837890625\n"
"# => 0.56011962890625\n"
"# reset it\n"
"# use perlin noise as the distribution\n"
"# => 0.546478271484375\n"
"# => 0.573150634765625\n"
"# use white noise just for this block\n"
"# => 0.464202880859375\n"
" \n"
"# => 0.597015380859375\n"
"# notice how the last generator (perlin) is restored\n"
msgstr ""

#: lang.json:use_random_source:summary
msgid "Change how random numbers are chosen"
msgstr ""

#: lang.json:use_real_time:description
msgid ""
"\n"
"Set sched ahead time to 0 for the current thread. Shorthand for `use_sched_ahe"
"ad_time 0`.\n"
"\n"
"See `use_sched_ahead_time` for a version of this function which allows you to "
"set the schedule ahead time to any arbitrary value. Note, `use_real_time` will"
" override any value set with `set_sched_ahead_time!` for the current thread.\n"
"\n"
msgstr ""

#: lang.json:use_real_time:summary
msgid "Set sched ahead time to 0 for the current thread"
msgstr ""

#: lang.json:use_sample_bpm:description
msgid "Modify bpm so that sleeping for 1 will sleep for the duration of the sample."
msgstr ""

#: lang.json:use_sample_bpm:examples:0:comments
msgid ""
"#Set bpm based on :loop_amen duration\n"
" \n"
" \n"
" \n"
"#`sleep`ing for 1 actually sleeps for duration of :loop_amen\n"
" \n"
msgstr ""

#: lang.json:use_sample_bpm:examples:1:comments
msgid ""
"# Set bpm based on :loop_amen duration\n"
"# but also specify that the sample duration\n"
"# is actually 4 beats long.\n"
" \n"
" \n"
" \n"
"#`sleep`ing for 4 actually sleeps for duration of :loop_amen\n"
"# as we specified that the sample consisted of\n"
"# 4 beats\n"
" \n"
msgstr ""

#: lang.json:use_sample_bpm:opts:num_beats:description
#: lang.json:with_sample_bpm:opts:num_beats:description
msgid "The number of beats within the sample. By default this is 1."
msgstr ""

#: lang.json:use_sample_bpm:summary
msgid "Sample-duration-based bpm modification"
msgstr ""

#: lang.json:use_sample_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `sample`. Wil"
"l remove and override any previous defaults."
msgstr ""

#: lang.json:use_sample_defaults:examples:0:comments
msgid ""
"# plays amen break with default arguments\n"
" \n"
"# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of a"
"rgs\n"
" \n"
"# plays amen break with a cutoff of 90 and defaults for rest of args - note th"
"at amp is no longer 0.5\n"
msgstr ""

#: lang.json:use_sample_defaults:summary
msgid "Use new sample defaults"
msgstr ""

#: lang.json:use_sched_ahead_time:description
msgid ""
"Specify how many seconds ahead of time the synths should be triggered. This re"
"presents the amount of time between pressing 'Run' and hearing audio. A larger"
" time gives the system more room to work with and can reduce performance issue"
"s in playing fast sections on slower platforms. However, a larger time also in"
"creases latency between modifying code and hearing the result whilst live codi"
"ng.\n"
"\n"
"See `set_sched_ahead_time!` for a global version of this function. Note, `use_"
"sched_ahead_time` will override any value set with `set_sched_ahead_time!` for"
" the current thread.\n"
"\n"
"See `use_real_time` for a simple way of setting the schedule ahead time to 0."
msgstr ""

#: lang.json:use_sched_ahead_time:examples:1:comments
msgid ""
"# Each thread can have its own sched ahead time\n"
" \n"
" \n"
"# Note 70 will be played with 1 second latency\n"
" \n"
" \n"
" \n"
"# Note 70 will be played with 0.5 second latency\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:use_sched_ahead_time:summary
msgid "Set sched ahead time for the current thread"
msgstr ""

#: lang.json:use_synth:description
msgid ""
"Switch the current synth to `synth_name`. Affects all further calls to `play`."
" See `with_synth` for changing the current synth only for a specific `do`/`end"
"` block."
msgstr ""

#: lang.json:use_synth:examples:0:comments
msgid ""
"# Plays with default synth\n"
" \n"
"# Plays with mod_sine synth\n"
msgstr ""

#: lang.json:use_synth:summary
msgid "Switch current synth"
msgstr ""

#: lang.json:use_synth_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `play`. Will "
"remove and override any previous defaults."
msgstr ""

#: lang.json:use_synth_defaults:examples:0:comments
msgid ""
"# plays note 50 with default arguments\n"
" \n"
"# plays note 50 with an amp of 0.5, cutoff of 70 and defaults for rest of args"
"\n"
" \n"
"# plays note 50 with a cutoff of 90 and defaults for rest of args - note that "
"amp is no longer 0.5\n"
msgstr ""

#: lang.json:use_synth_defaults:summary
msgid "Use new synth defaults"
msgstr ""

#: lang.json:use_timing_guarantees:description
msgid ""
"If set to true, synths will not trigger if it is too late. If false, some synt"
"h triggers may be late."
msgstr ""

#: lang.json:use_timing_guarantees:examples:0:comments
msgid ""
" \n"
"#=> if time is behind by any margin, this will not trigger\n"
msgstr ""

#: lang.json:use_timing_guarantees:examples:1:comments
msgid ""
" \n"
"#=> unless time is too far behind, this will trigger even when late.\n"
msgstr ""

#: lang.json:use_timing_guarantees:summary
msgid "Inhibit synth triggers if too late"
msgstr ""

#: lang.json:use_transpose:description
msgid ""
"Transposes your music by shifting all notes played by the specified amount. To"
" shift up by a semitone use a transpose of 1. To shift down use negative numbe"
"rs. See `with_transpose` for setting the transpose value only for a specific `"
"do`/`end` block. To transpose entire octaves see `use_octave`."
msgstr ""

#: lang.json:use_transpose:examples:0:comments
msgid ""
"# Plays note 50\n"
" \n"
"# Plays note 51\n"
msgstr ""

#: lang.json:use_transpose:examples:1:comments
msgid ""
"# You may change the transposition multiple times:\n"
"# Plays note 62\n"
" \n"
"# Plays note 50\n"
" \n"
"# Plays note 65\n"
msgstr ""

#: lang.json:use_transpose:summary
msgid "Note transposition"
msgstr ""

#: lang.json:use_tuning:description
msgid ""
"In most music we make semitones by dividing the octave into 12 equal parts, wh"
"ich is known as equal temperament. However there are lots of other ways to tun"
"e the 12 notes. This method adjusts each midi note into the specified tuning s"
"ystem. Because the ratios between notes aren't always equal, be careful to pic"
"k a centre note that is in the key of the music you're making for the best sou"
"nd. Currently available tunings are `:just`, `:pythagorean`, `:meantone` and t"
"he default of `:equal`"
msgstr ""

#: lang.json:use_tuning:examples:0:comments
msgid ""
"# Plays note 64\n"
" \n"
"# Plays note 63.8631\n"
"# transparently changes midi notes too\n"
"# Plays note 63.8631\n"
msgstr ""

#: lang.json:use_tuning:examples:1:comments
msgid ""
"# You may change the tuning multiple times:\n"
"# Plays note 64\n"
" \n"
"# Plays note 63.8631\n"
" \n"
"# Plays note 64\n"
msgstr ""

#: lang.json:use_tuning:summary
msgid "Use alternative tuning systems"
msgstr ""

#: lang.json:vector:description
msgid "Create a new immutable vector from args. Out of range indexes return nil."
msgstr ""

#: lang.json:vector:summary
msgid "Create a vector"
msgstr ""

#: lang.json:version:description
msgid ""
"Return information representing the current version of Sonic Pi. This informat"
"ion may be further inspected with `version.major`, `version.minor`, `version.p"
"atch` and `version.dev`"
msgstr ""

#: lang.json:version:examples:0:comments
msgid ""
"# => Prints out the current version such as v2.0.1\n"
msgstr ""

#: lang.json:version:examples:1:comments
msgid ""
"# => Prints out the major version number such as 2\n"
msgstr ""

#: lang.json:version:examples:2:comments
msgid ""
"# => Prints out the minor version number such as 0\n"
msgstr ""

#: lang.json:version:examples:3:comments
msgid ""
"# => Prints out the patch level for this version such as 0\n"
msgstr ""

#: lang.json:version:summary
msgid "Get current version information"
msgstr ""

#: lang.json:vt:description
msgid "Get the virtual time of the current thread."
msgstr ""

#: lang.json:vt:examples:0:comments
msgid ""
"# prints 0\n"
" \n"
"# prints 1\n"
msgstr ""

#: lang.json:vt:summary
msgid "Get virtual time"
msgstr ""

#: lang.json:wait:description
msgid "Synonym for `sleep` - see `sleep`"
msgstr ""

#: lang.json:wait:summary
msgid "Wait for duration"
msgstr ""

#: lang.json:with_arg_bpm_scaling:description
msgid ""
"Turn synth argument bpm scaling on or off for the supplied block. Note, using "
"`rt` for args will result in incorrect times when used within this block."
msgstr ""

#: lang.json:with_arg_bpm_scaling:examples:0:comments
msgid ""
" \n"
"# release is actually 1 due to bpm scaling\n"
" \n"
"# release is now 2\n"
" \n"
msgstr ""

#: lang.json:with_arg_bpm_scaling:examples:1:comments
msgid ""
"# Interaction with rt\n"
" \n"
"# release is 2 seconds\n"
"# sleeps for 2 seconds\n"
" \n"
"# ** Warning: release is NOT 2 seconds! **\n"
"# still sleeps for 2 seconds\n"
" \n"
msgstr ""

#: lang.json:with_arg_bpm_scaling:summary
msgid "Block-level enable and disable BPM scaling"
msgstr ""

#: lang.json:with_arg_checks:description
msgid ""
"Similar to `use_arg_checks` except only applies to code within supplied `do`/`"
"end` block. Previous arg check value is restored after block."
msgstr ""

#: lang.json:with_arg_checks:examples:0:comments
msgid ""
"# Turn on arg checking:\n"
" \n"
"# Args are checked\n"
" \n"
"#Arg checking is now disabled\n"
"# Args are not checked\n"
" \n"
"# Arg is not checked\n"
" \n"
"# Arg checking is re-enabled\n"
"# Args are checked\n"
msgstr ""

#: lang.json:with_arg_checks:summary
msgid "Block-level enable and disable arg checks"
msgstr ""

#: lang.json:with_bpm:description
msgid ""
"Sets the tempo in bpm (beats per minute) for everything in the given block. Af"
"fects all containing calls to `sleep` and all temporal synth arguments which w"
"ill be scaled to match the new bpm. See also `use_bpm`\n"
"\n"
"  For dance music here's a rough guide for which BPM to aim for depending on y"
"our genre:\n"
"\n"
"  * Dub: 60-90 bpm\n"
"  * Hip-hop: 60-100 bpm\n"
"  * Downtempo: 90-120 bpm\n"
"  * House: 115-130 bpm\n"
"  * Techno/trance: 120-140 bpm\n"
"  * Dubstep: 135-145 bpm\n"
"  * Drum and bass: 160-180 bpm\n"
"  "
msgstr ""

#: lang.json:with_bpm:examples:0:comments
msgid ""
"# default tempo is 60 bpm\n"
" \n"
" \n"
"# sleeps for 1 second\n"
" \n"
"# sleeps for 5 seconds\n"
"# with_bpm sets a tempo for everything between do ... end (a block)\n"
"# Hear how it gets faster?\n"
"# set bpm to be twice as fast\n"
" \n"
" \n"
"# now sleeps for 0.5 seconds\n"
" \n"
" \n"
" \n"
"# bpm goes back to normal\n"
" \n"
" \n"
"# sleeps for 1 second\n"
" \n"
msgstr ""

#: lang.json:with_bpm:summary
msgid "Set the tempo for the code block"
msgstr ""

#: lang.json:with_bpm_mul:description
msgid ""
"Sets the tempo in bpm (beats per minute) for everything in the given block as "
"a multiplication of the current tempo. Affects all containing calls to `sleep`"
" and all temporal synth arguments which will be scaled to match the new bpm. S"
"ee also `with_bpm`"
msgstr ""

#: lang.json:with_bpm_mul:examples:0:comments
msgid ""
"# Set the BPM to 60\n"
" \n"
"# Sleeps for 1 second\n"
" \n"
"# Sleeps for 2 seconds\n"
"# BPM is now (60 * 0.5) == 30\n"
" \n"
"# Sleeps for 2 seconds\n"
" \n"
" \n"
"# BPM is now back to 60, therefore sleep is 1 second\n"
msgstr ""

#: lang.json:with_bpm_mul:summary
msgid "Set new tempo as a multiple of current tempo for block"
msgstr ""

#: lang.json:with_cent_tuning:description
msgid ""
"Similar to `use_cent_tuning` except only applies cent shift to code within sup"
"plied `do`/`end` block. Previous cent tuning value is restored after block. On"
"e semitone consists of 100 cents. To transpose entire semitones see `with_tran"
"spose`."
msgstr ""

#: lang.json:with_cent_tuning:examples:0:comments
msgid ""
" \n"
"# Plays note 50.01\n"
" \n"
"# Plays note 50.02\n"
" \n"
"# Original cent tuning value is restored\n"
"# Plays note 50.01\n"
msgstr ""

#: lang.json:with_cent_tuning:summary
msgid "Block-level cent tuning"
msgstr ""

#: lang.json:with_cue_logging:description
msgid ""
"Similar to use_cue_logging except only applies to code within supplied `do`/`e"
"nd` block. Previous cue log value is restored after block."
msgstr ""

#: lang.json:with_cue_logging:examples:0:comments
msgid ""
"# Turn on debugging:\n"
" \n"
"# cue message is printed to log\n"
" \n"
"#Cue logging is now disabled\n"
"# cue *is* sent but not displayed in log\n"
" \n"
" \n"
"# Debug is re-enabled\n"
"# cue is displayed in log\n"
msgstr ""

#: lang.json:with_cue_logging:summary
msgid "Block-level enable and disable cue logging"
msgstr ""

#: lang.json:with_debug:description
msgid ""
"Similar to use_debug except only applies to code within supplied `do`/`end` bl"
"ock. Previous debug value is restored after block."
msgstr ""

#: lang.json:with_debug:examples:0:comments
msgid ""
"# Turn on debugging:\n"
" \n"
"# Debug message is sent\n"
" \n"
"#Debug is now disabled\n"
"# Debug message is not sent\n"
" \n"
"# Debug message is not sent\n"
" \n"
"# Debug is re-enabled\n"
"# Debug message is sent\n"
msgstr ""

#: lang.json:with_debug:summary
msgid "Block-level enable and disable debug"
msgstr ""

#: lang.json:with_fx:description
msgid ""
"This applies the named effect (FX) to everything within a given `do`/`end` blo"
"ck. Effects may take extra parameters to modify their behaviour. See FX help f"
"or parameter details.\n"
"\n"
"For advanced control, it is also possible to modify the parameters of an effec"
"t within the body of the block. If you define the block with a single argument"
", the argument becomes a reference to the current effect and can be used to co"
"ntrol its parameters (see examples)."
msgstr ""

#: lang.json:with_fx:examples:0:comments
msgid ""
"# Basic usage\n"
"# Use the distortion effect with default parameters\n"
"# => plays note 50 with distortion\n"
" \n"
"# => plays the loop_amen sample with distortion too\n"
" \n"
msgstr ""

#: lang.json:with_fx:examples:1:comments
msgid ""
"# Specify effect parameters\n"
"# Use the level effect with the amp parameter set to 0.3\n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:with_fx:examples:2:comments
msgid ""
"# Controlling the effect parameters within the block\n"
" \n"
"# here we set the reverb level quite low to start with (0.1)\n"
"# and we can change it later by using the 'fx' reference we've set up\n"
"# plays note 60 with a little bit of reverb\n"
" \n"
"# change the parameters of the effect to add more reverb\n"
"# again note 60 but with more reverb\n"
" \n"
"# change the parameters of the effect to add more reverb\n"
"# plays note 60 with loads of reverb\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_fx:examples:3:comments
msgid ""
"# Repeat the block 16 times internally\n"
" \n"
" \n"
" \n"
" \n"
"# The above is a shorthand for this:\n"
" \n"
" \n"
" \n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:with_fx:opts:kill_delay:description
msgid ""
"Amount of time to wait after all synths triggered by the block have completed "
"before stopping and freeing the effect synthesiser."
msgstr ""

#: lang.json:with_fx:opts:reps:description
msgid "Number of times to repeat the block in an iteration."
msgstr ""

#: lang.json:with_fx:summary
msgid "Use Studio FX"
msgstr ""

#: lang.json:with_merged_midi_defaults:description
msgid ""
"Specify opt values to be used by any following call to the `midi_*` fns within"
" the specified `do`/`end` block. Merges the specified values with any previous"
" midi defaults, rather than replacing them. After the `do`/`end` block has com"
"pleted, previous defaults (if any) are restored."
msgstr ""

#: lang.json:with_merged_midi_defaults:examples:0:comments
msgid ""
"# Sends MIDI :e1 note_on with default opts\n"
" \n"
"# Sends MIDI :e3 note_on to channel 3 on port \"foo\"\n"
" \n"
"# Sends MIDI :e2 note_on to channel 1 on port \"foo\".\n"
"# This is because the call to use_merged_midi_defaults overrode the\n"
"# channel but not the port which got merged in.\n"
" \n"
"# Sends MIDI :e2 note_on to channel 3 on port \"foo\".\n"
"# This is because the previous defaults were restored after\n"
"# the call to with_merged_midi_defaults.\n"
msgstr ""

#: lang.json:with_merged_midi_defaults:summary
msgid "Block-level merge midi defaults"
msgstr ""

#: lang.json:with_merged_sample_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `sample` with"
"in the `do`/`end` block.  Merges the specified values with any previous sample"
" defaults, rather than replacing them. After the `do`/`end` block has complete"
"d, the previous sampled defaults (if any) are restored."
msgstr ""

#: lang.json:with_merged_sample_defaults:examples:0:comments
msgid ""
"# plays amen break with default arguments\n"
" \n"
"# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of a"
"rgs\n"
" \n"
"# plays amen break with a cutoff of 90 and amp of 0.5\n"
" \n"
"# plays amen break with a cutoff of 70 and amp is 0.5 again as the previous de"
"faults are restored.\n"
msgstr ""

#: lang.json:with_merged_sample_defaults:summary
msgid "Block-level use merged sample defaults"
msgstr ""

#: lang.json:with_merged_synth_defaults:description
msgid ""
"Specify synth arg values to be used by any following call to play within the s"
"pecified `do`/`end` block. Merges the specified values with any previous synth"
" defaults, rather than replacing them. After the `do`/`end` block has complete"
"d, previous defaults (if any) are restored."
msgstr ""

#: lang.json:with_merged_synth_defaults:examples:0:comments
msgid ""
" \n"
"# => plays note 50 with amp 0.5 and pan 1\n"
" \n"
msgstr ""

#: lang.json:with_merged_synth_defaults:examples:1:comments
msgid ""
"#=> plays note 50\n"
" \n"
"#=> plays note 50 with amp 0.5\n"
" \n"
" \n"
"#=> plays note 50 with amp 0.7 and pan -1\n"
" \n"
" \n"
"#=> plays note 50 with amp 0.5\n"
" \n"
msgstr ""

#: lang.json:with_merged_synth_defaults:summary
msgid "Block-level merge synth defaults"
msgstr ""

#: lang.json:with_midi_defaults:description
msgid ""
"Specify new default values to be used by all calls to `midi_*` fns within the "
"`do`/`end` block. After the `do`/`end` block has completed the previous MIDI d"
"efaults (if any) are restored."
msgstr ""

#: lang.json:with_midi_defaults:examples:0:comments
msgid ""
"# Sends MIDI :e1 note on with default opts\n"
" \n"
"# Sends MIDI :e3 note on to channel 3 on port \"foo\"\n"
" \n"
"# this will be overridden by the following\n"
" \n"
"# Sends MIDI :e2 note on to channel 5.\n"
"# Note that the port is back to the default\n"
" \n"
"# Sends MIDI :e4 note on to channel 1\n"
"# Note that the call to use_midi_defaults is now honoured.\n"
msgstr ""

#: lang.json:with_midi_defaults:summary
msgid "Block-level use new MIDI defaults"
msgstr ""

#: lang.json:with_midi_logging:description
msgid ""
"Similar to use_midi_logging except only applies to code within supplied `do`/`"
"end` block. Previous MIDI log value is restored after block."
msgstr ""

#: lang.json:with_midi_logging:examples:0:comments
msgid ""
"# Turn on MIDI logging:\n"
" \n"
"#  message is printed to log\n"
" \n"
"#MIDI logging is now disabled\n"
"# MIDI message *is* sent but not displayed in log\n"
" \n"
" \n"
"# Debug is re-enabled\n"
"# message is displayed in log\n"
msgstr ""

#: lang.json:with_midi_logging:summary
msgid "Block-level enable and disable MIDI logging"
msgstr ""

#: lang.json:with_octave:description
msgid ""
"Transposes your music by shifting all notes played by the specified number of "
"octaves within the specified block. To shift up by an octave use a transpose o"
"f 1. To shift down use negative numbers. For transposing the notes within the "
"octave range see `with_transpose`."
msgstr ""

#: lang.json:with_octave:examples:0:comments
msgid ""
"# Plays note 50\n"
" \n"
" \n"
"# Plays note 62\n"
" \n"
" \n"
"# Plays note 50\n"
msgstr ""

#: lang.json:with_octave:summary
msgid "Block level octave transposition"
msgstr ""

#: lang.json:with_osc:description
msgid ""
"Sets the destination host and port that `osc` will send messages to for the gi"
"ven do/end block."
msgstr ""

#: lang.json:with_osc:examples:0:comments
msgid ""
"# Specify port 7010\n"
"# Send an OSC message to port 7000\n"
"# set hostname and port for the duration\n"
"# of this do/end block\n"
"# Send an OSC message to port 7010\n"
" \n"
"# Send an OSC message to port 7000\n"
"# as old setting is restored outside\n"
"# do/end block\n"
msgstr ""

#: lang.json:with_osc:summary
msgid ""
"Block-level setting for the default hostname and port number of outgoing OSC m"
"essages."
msgstr ""

#: lang.json:with_osc_logging:description
msgid ""
"Similar to use_osc_logging except only applies to code within supplied `do`/`e"
"nd` block. Previous OSC log value is restored after block."
msgstr ""

#: lang.json:with_osc_logging:examples:0:comments
msgid ""
"# Turn on OSC logging:\n"
" \n"
"#  message is printed to log\n"
" \n"
"#OSC logging is now disabled\n"
"# OSC message *is* sent but not displayed in log\n"
" \n"
" \n"
"# Debug is re-enabled\n"
"# message is displayed in log\n"
msgstr ""

#: lang.json:with_osc_logging:summary
msgid "Block-level enable and disable OSC logging"
msgstr ""

#: lang.json:with_random_seed:description
msgid ""
"Resets the random number generator to the specified seed for the specified cod"
"e block. All generated random numbers and randomisation functions such as `shu"
"ffle` and `choose` within the code block will use this new generator. Once the"
" code block has completed, the original generator is restored and the code blo"
"ck generator is discarded. Use this to change the sequence of random numbers i"
"n your piece in a way that can be reproduced. Especially useful if combined wi"
"th iteration. See examples."
msgstr ""

#: lang.json:with_random_seed:examples:0:comments
msgid ""
"# reset random seed to 1\n"
"# => 0.417022004702574\n"
"#=> 0.7203244934421581\n"
"# reset it back to 1\n"
"# => 0.417022004702574\n"
"# reset seed back to 1 just for this block\n"
"# => 0.417022004702574\n"
"#=> 0.7203244934421581\n"
" \n"
"# => 0.7203244934421581\n"
"# notice how the original generator is restored\n"
msgstr ""

#: lang.json:with_random_seed:examples:1:comments
msgid ""
"# Generating melodies\n"
"# Create a set of notes to choose from.\n"
"# Scales work well for this\n"
" \n"
"# Create a live loop\n"
"# Set the random seed to a known value every\n"
"# time around the loop. This seed is the key\n"
"# to our melody. Try changing the number to\n"
"# something else. Different numbers produce\n"
"# different melodies\n"
"# Now iterate a number of times. The size of\n"
"# the iteration will be the length of the\n"
"# repeating melody.\n"
"# 'Randomly' choose a note from our ring of\n"
"# notes. See how this isn't actually random\n"
"# but uses a reproducible method! These notes\n"
"# are therefore repeated over and over...\n"
" \n"
" \n"
" \n"
"# Note that this line is outside of\n"
"# the with_random_seed block and therefore\n"
"# the randomisation never gets reset and this\n"
"# part of the melody never repeats.\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_random_seed:summary
msgid "Specify random seed for code block"
msgstr ""

#: lang.json:with_random_source:description
msgid ""
"Resets the random number generator to the specified noise type for the specifi"
"ed code block. All generated random numbers and randomisation functions such a"
"s `shuffle` and `choose` within the code block will use this new generator. On"
"ce the code block has completed, the original generator is restored and the co"
"de block generator is discarded. Use this to change the sequence of random num"
"bers in your piece in a way that can be reproduced. Especially useful if combi"
"ned with iteration. See examples."
msgstr ""

#: lang.json:with_random_source:summary
msgid "Specify random distribution for code block"
msgstr ""

#: lang.json:with_real_time:description
msgid ""
"\n"
"\n"
"Sets sched ahead time to 0 within the block for the current thread. Shorthand "
"for `with_sched_ahead_time 0`.\n"
"\n"
"See `with_sched_ahead_time` for a version of this function which allows you to"
" set the schedule ahead time to any arbitrary value. Note, `with_real_time` wi"
"ll override any value set with `set_sched_ahead_time!` for the current thread."
"\n"
"\n"
msgstr ""

#: lang.json:with_real_time:summary
msgid "Sets sched ahead time to 0 within the block for the current thread"
msgstr ""

#: lang.json:with_sample_bpm:description
msgid ""
"Block-scoped modification of bpm so that sleeping for 1 will sleep for the dur"
"ation of the sample."
msgstr ""

#: lang.json:with_sample_bpm:examples:0:comments
msgid ""
" \n"
"#Set bpm based on :loop_amen duration\n"
" \n"
" \n"
"#`sleep`ing for 1 sleeps for duration of :loop_amen\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_sample_bpm:examples:1:comments
msgid ""
" \n"
"# Set bpm based on :loop_amen duration\n"
"# but also specify that the sample duration\n"
"# is actually 4 beats long.\n"
" \n"
" \n"
"#`sleep`ing for 4 sleeps for duration of :loop_amen\n"
"# as we specified that the sample consisted of\n"
"# 4 beats\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_sample_bpm:summary
msgid "Block-scoped sample-duration-based bpm modification"
msgstr ""

#: lang.json:with_sample_defaults:description
msgid ""
"Specify new default values to be used by all subsequent calls to `sample` with"
"in the `do`/`end` block. After the `do`/`end` block has completed, the previou"
"s sampled defaults (if any) are restored. For the contents of the block, will "
"remove and override any previous defaults."
msgstr ""

#: lang.json:with_sample_defaults:examples:0:comments
msgid ""
"# plays amen break with default arguments\n"
" \n"
"# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of a"
"rgs\n"
" \n"
"# plays amen break with a cutoff of 90 and defaults for rest of args - note th"
"at amp is no longer 0.5\n"
" \n"
"# plays amen break with a cutoff of 70 and amp is 0.5 again as the previous de"
"faults are restored.\n"
msgstr ""

#: lang.json:with_sample_defaults:summary
msgid "Block-level use new sample defaults"
msgstr ""

#: lang.json:with_sched_ahead_time:description
msgid ""
"Specify how many seconds ahead of time the synths should be triggered for the "
"block. See `use_sched_ahead_time` for further information.\n"
"\n"
"See `set_sched_ahead_time!` for a global version of this function. Note, `with"
"_sched_ahead_time` will override any value set with `set_sched_ahead_time!` fo"
"r the given block within the current thread.\n"
"\n"
"See `with_real_time` for a simple way of setting the schedule ahead time to 0."
msgstr ""

#: lang.json:with_sched_ahead_time:examples:0:comments
msgid ""
" \n"
"# Sound will happen with a latency of 1\n"
" \n"
"# Sound will happen with the default latency (0.5s)\n"
msgstr ""

#: lang.json:with_sched_ahead_time:summary
msgid "Block-level set sched ahead time for the current thread"
msgstr ""

#: lang.json:with_swing:description
msgid ""
"Runs block within a `time_warp` except for once every `pulse` consecutive runs"
" (defaulting to 4). When used for rhythmical purposes this results in one in e"
"very `pulse` calls of the block being 'on beat' and the rest shifted forward o"
"r backwards in time by `shift` beats."
msgstr ""

#: lang.json:with_swing:examples:0:comments
msgid ""
" \n"
" \n"
"# plays the :elec_beep sample late except for every 4th time\n"
" \n"
" \n"
" \n"
msgstr ""

#: lang.json:with_swing:examples:1:comments
msgid ""
" \n"
" \n"
"# plays the :elec_beep sample slightly early\n"
"# except for every 4th time\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_swing:examples:2:comments
msgid ""
" \n"
" \n"
"# plays the :elec_beep sample slightly early\n"
"# except for every 8th time\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_swing:examples:3:comments
msgid ""
"# Use unique tick names if you plan on using with_swing\n"
"# more than once in any given live_loop or thread.\n"
" \n"
" \n"
"# plays the :elec_beep sample slightly late\n"
"# except for every 4th time\n"
" \n"
"# plays the :elec_beep sample at double rate\n"
"#  slightly early except for every 4th time\n"
" \n"
" \n"
msgstr ""

#: lang.json:with_swing:examples:4:comments
msgid ""
" \n"
" \n"
"# send out cue messages with swing timing\n"
" \n"
" \n"
" \n"
" \n"
" \n"
"# sync on the swing cue messages to bring the swing into\n"
"# another live loop (sync will match the timing and clock of\n"
"# the sending live loop)\n"
" \n"
msgstr ""

#: lang.json:with_swing:opts:offset:description
msgid ""
"Count offset - before modding the count with the pulse size - integer offset t"
"o add to the result of calling `tick` with the specified tick key (via the `ti"
"ck:` opt)"
msgstr ""

#: lang.json:with_swing:opts:pulse:description
msgid "How often to apply the swing. Defaults to 4."
msgstr ""

#: lang.json:with_swing:opts:shift:description
msgid ""
"How much time to delay/forward the block. Greater values produce more emphasis"
"ed swing. Defaults to 0.1 beats."
msgstr ""

#: lang.json:with_swing:opts:tick:description
msgid ""
"A key for the tick with which to count pulses. Override this if you have more "
"than one `with_swing` block in your `live_loop` or thread to stop them interfe"
"ring with each other."
msgstr ""

#: lang.json:with_swing:summary
msgid "Add swing to successive calls to do/end block"
msgstr ""

#: lang.json:with_synth:description
msgid ""
"Switch the current synth to `synth_name` but only for the duration of the `do`"
"/`end` block. After the `do`/`end` block has completed, the previous synth is "
"restored."
msgstr ""

#: lang.json:with_synth:examples:0:comments
msgid ""
"# Plays with default synth\n"
" \n"
" \n"
"# Plays with supersaw synth\n"
" \n"
" \n"
"# Plays with saw_beep synth\n"
" \n"
" \n"
"# Previous synth is restored\n"
"# Plays with supersaw synth\n"
msgstr ""

#: lang.json:with_synth:summary
msgid "Block-level synth switching"
msgstr ""

#: lang.json:with_synth_defaults:description
msgid ""
"Specify new default values to be used by all calls to `play` within the `do`/`"
"end` block. After the `do`/`end` block has completed the previous synth defaul"
"ts (if any) are restored."
msgstr ""

#: lang.json:with_synth_defaults:examples:0:comments
msgid ""
"# plays note 50 with default arguments\n"
" \n"
"# plays note 50 with an amp of 0.5, pan of -1 and defaults for rest of args\n"
" \n"
"# plays note 50 with an amp of 0.6, cutoff of 80 and defaults for rest of args"
" (including pan)\n"
" \n"
"# plays note 60 with an amp of 0.5, pan of -1 and defaults for rest of args\n"
msgstr ""

#: lang.json:with_synth_defaults:summary
msgid "Block-level use new synth defaults"
msgstr ""

#: lang.json:with_timing_guarantees:description
msgid ""
"For the given block, if set to true, synths will not trigger if it is too late"
". If false, some synth triggers may be late. After the block has completed, th"
"e previous value is restored. "
msgstr ""

#: lang.json:with_timing_guarantees:examples:0:comments
msgid ""
" \n"
"#=> if time is behind by any margin, this will not trigger\n"
" \n"
msgstr ""

#: lang.json:with_timing_guarantees:examples:1:comments
msgid ""
" \n"
"#=> unless time is too far behind, this will trigger even when late.\n"
" \n"
msgstr ""

#: lang.json:with_timing_guarantees:summary
msgid "Block-scoped inhibition of synth triggers if too late"
msgstr ""

#: lang.json:with_transpose:description
msgid ""
"Similar to use_transpose except only applies to code within supplied `do`/`end"
"` block. Previous transpose value is restored after block. To transpose entire"
" octaves see `with_octave`."
msgstr ""

#: lang.json:with_transpose:examples:0:comments
msgid ""
" \n"
"# Plays note 65\n"
" \n"
"# Plays note 62\n"
" \n"
"# Plays note 84\n"
" \n"
"# Original transpose value is restored\n"
"# Plays note 83\n"
msgstr ""

#: lang.json:with_transpose:summary
msgid "Block-level note transposition"
msgstr ""

#: lang.json:with_tuning:description
msgid ""
"Similar to use_tuning except only applies to code within supplied `do`/`end` b"
"lock. Previous tuning value is restored after block."
msgstr ""

#: lang.json:with_tuning:examples:0:comments
msgid ""
" \n"
"# Plays note 64\n"
" \n"
"# Plays note 63.8631\n"
" \n"
"# Plays note 60\n"
" \n"
"# Original tuning value is restored\n"
"# Plays note 64\n"
msgstr ""

#: lang.json:with_tuning:summary
msgid "Block-level tuning modification"
msgstr ""

#: samples.json:ambi:description
msgid "Ambient Sounds"
msgstr ""

#: samples.json:bass:description
msgid "Bass Sounds"
msgstr ""

#: samples.json:bd:description
msgid "Bass Drums"
msgstr ""

#: samples.json:drum:description
msgid "Drum Sounds"
msgstr ""

#: samples.json:elec:description
msgid "Electric Sounds"
msgstr ""

#: samples.json:glitch:description
msgid "Glitchy Sounds"
msgstr ""

#: samples.json:guit:description
msgid "Sounds featuring guitars"
msgstr ""

#: samples.json:loop:description
msgid "Sounds for Looping"
msgstr ""

#: samples.json:mehackit:description
msgid "Mehackit Sounds"
msgstr ""

#: samples.json:misc:description
msgid "Miscellaneous Sounds"
msgstr ""

#: samples.json:perc:description
msgid "Percussive Sounds"
msgstr ""

#: samples.json:sn:description
msgid "Snare Drums"
msgstr ""

#: samples.json:tabla:description
msgid "Sounds of a Tabla Drum"
msgstr ""

#: samples.json:vinyl:description
msgid "Vinyl sounds"
msgstr ""

#: synths.json:beep:description
msgid ""
"A simple pure sine wave. The sine wave is the simplest, purest sound there is "
"and is the fundamental building block of all noise. The mathematician Fourier "
"demonstrated that any sound could be built out of a number of sine waves (the "
"more complex the sound, the more sine waves needed). Have a play combining a n"
"umber of sine waves to design your own sounds!"
msgstr ""

#: synths.json:beep:opts:attack:description
#: synths.json:blade:opts:attack:description
#: synths.json:bnoise:opts:attack:description
#: synths.json:chipbass:opts:attack:description
#: synths.json:chiplead:opts:attack:description
#: synths.json:chipnoise:opts:attack:description
#: synths.json:cnoise:opts:attack:description
#: synths.json:dark_ambience:opts:attack:description
#: synths.json:dpulse:opts:attack:description
#: synths.json:dsaw:opts:attack:description
#: synths.json:dtri:opts:attack:description
#: synths.json:dull_bell:opts:attack:description
#: synths.json:fm:opts:attack:description
#: synths.json:gnoise:opts:attack:description
#: synths.json:growl:opts:attack:description
#: synths.json:hollow:opts:attack:description
#: synths.json:hoover:opts:attack:description
#: synths.json:mod_dsaw:opts:attack:description
#: synths.json:mod_fm:opts:attack:description
#: synths.json:mod_pulse:opts:attack:description
#: synths.json:mod_saw:opts:attack:description
#: synths.json:mod_sine:opts:attack:description
#: synths.json:mod_tri:opts:attack:description
#: synths.json:noise:opts:attack:description
#: synths.json:pluck:opts:attack:description
#: synths.json:pnoise:opts:attack:description
#: synths.json:pretty_bell:opts:attack:description
#: synths.json:prophet:opts:attack:description
#: synths.json:pulse:opts:attack:description
#: synths.json:rodeo:opts:attack:description
#: synths.json:saw:opts:attack:description
#: synths.json:sound_in:opts:attack:description
#: synths.json:sound_in_stereo:opts:attack:description
#: synths.json:square:opts:attack:description
#: synths.json:subpulse:opts:attack:description
#: synths.json:supersaw:opts:attack:description
#: synths.json:tb303:opts:attack:description
#: synths.json:tech_saws:opts:attack:description
#: synths.json:tri:opts:attack:description
#: synths.json:zawa:opts:attack:description
msgid ""
"Amount of time (in beats) for sound to reach full amplitude (attack_level). A "
"short attack (i.e. 0.01) makes the initial part of the sound very percussive l"
"ike a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full lengt"
"h of sound is attack + decay + sustain + release."
msgstr ""

#: synths.json:beep:opts:note:description
#: synths.json:blade:opts:note:description
#: synths.json:chipbass:opts:note:description
#: synths.json:chiplead:opts:note:description
#: synths.json:dark_ambience:opts:note:description
#: synths.json:dpulse:opts:note:description
#: synths.json:dsaw:opts:note:description
#: synths.json:dtri:opts:note:description
#: synths.json:dull_bell:opts:note:description
#: synths.json:fm:opts:note:description synths.json:growl:opts:note:description
#: synths.json:hollow:opts:note:description
#: synths.json:hoover:opts:note:description
#: synths.json:kalimba:opts:note:description
#: synths.json:mod_dsaw:opts:note:description
#: synths.json:mod_fm:opts:note:description
#: synths.json:mod_pulse:opts:note:description
#: synths.json:mod_saw:opts:note:description
#: synths.json:mod_sine:opts:note:description
#: synths.json:mod_tri:opts:note:description
#: synths.json:pretty_bell:opts:note:description
#: synths.json:prophet:opts:note:description
#: synths.json:pulse:opts:note:description
#: synths.json:rodeo:opts:note:description
#: synths.json:saw:opts:note:description
#: synths.json:square:opts:note:description
#: synths.json:subpulse:opts:note:description
#: synths.json:supersaw:opts:note:description
#: synths.json:tb303:opts:note:description
#: synths.json:tech_saws:opts:note:description
#: synths.json:tri:opts:note:description synths.json:zawa:opts:note:description
msgid ""
"Note to play. Either a MIDI number or a symbol representing a note. For exampl"
"e: `30`, `52`, `:C`, `:C2`, `:Eb4`, or `:Ds3`"
msgstr ""

#: synths.json:beep:opts:release:description
#: synths.json:blade:opts:release:description
#: synths.json:bnoise:opts:release:description
#: synths.json:chipbass:opts:release:description
#: synths.json:chiplead:opts:release:description
#: synths.json:chipnoise:opts:release:description
#: synths.json:cnoise:opts:release:description
#: synths.json:dark_ambience:opts:release:description
#: synths.json:dpulse:opts:release:description
#: synths.json:dsaw:opts:release:description
#: synths.json:dtri:opts:release:description
#: synths.json:dull_bell:opts:release:description
#: synths.json:fm:opts:release:description
#: synths.json:gnoise:opts:release:description
#: synths.json:growl:opts:release:description
#: synths.json:hollow:opts:release:description
#: synths.json:hoover:opts:release:description
#: synths.json:mod_dsaw:opts:release:description
#: synths.json:mod_fm:opts:release:description
#: synths.json:mod_pulse:opts:release:description
#: synths.json:mod_saw:opts:release:description
#: synths.json:mod_sine:opts:release:description
#: synths.json:mod_tri:opts:release:description
#: synths.json:noise:opts:release:description
#: synths.json:pnoise:opts:release:description
#: synths.json:pretty_bell:opts:release:description
#: synths.json:prophet:opts:release:description
#: synths.json:pulse:opts:release:description
#: synths.json:rodeo:opts:release:description
#: synths.json:saw:opts:release:description
#: synths.json:sound_in:opts:release:description
#: synths.json:sound_in_stereo:opts:release:description
#: synths.json:square:opts:release:description
#: synths.json:subpulse:opts:release:description
#: synths.json:supersaw:opts:release:description
#: synths.json:tb303:opts:release:description
#: synths.json:tech_saws:opts:release:description
#: synths.json:tri:opts:release:description
#: synths.json:zawa:opts:release:description
msgid ""
"Amount of time (in beats) for sound to move from sustain level amplitude to si"
"lent. A short release (i.e. 0.01) makes the final part of the sound very percu"
"ssive (potentially resulting in a click). A longer release (i.e 1) fades the s"
"ound out gently. Full length of sound is attack + decay + sustain + release."
msgstr ""

#: synths.json:blade:description
msgid ""
"Straight from the 70s, evoking the mists of Blade Runner, this simple electro-"
"style string synth is based on filtered saw waves and a variable vibrato."
msgstr ""

#: synths.json:blade:opts:vibrato_delay:description
msgid "How long in seconds before the vibrato kicks in."
msgstr ""

#: synths.json:blade:opts:vibrato_depth:description
msgid ""
"Amount of variation around the central note. 1 is the sensible maximum (but yo"
"u can go up to 5 if you want a special effect), 0 would mean no vibrato. Works"
" well around 0.15 but you can experiment."
msgstr ""

#: synths.json:blade:opts:vibrato_onset:description
msgid "How long in seconds before the vibrato reaches full power."
msgstr ""

#: synths.json:blade:opts:vibrato_rate:description
msgid ""
"Number of wobbles per second. For realism this should be between 6 and 8, mayb"
"e even faster for really high notes."
msgstr ""

#: synths.json:bnoise:description
msgid ""
"Noise whose spectrum falls off in power by 6 dB per octave. Useful for generat"
"ing percussive sounds such as snares and hand claps. Also useful for simulatin"
"g wind or sea effects."
msgstr ""

#: synths.json:chipbass:description
msgid ""
"A 16 step triangle wave modelled after the 2A03 chip found in voice 3 of the N"
"ES games console. This can be used for retro sounding basslines. For complete "
"authenticity with the 2A03 bear in mind that the triangle channel on that chip"
" didn't have a volume control."
msgstr ""

#: synths.json:chipbass:opts:note_resolution:description
#: synths.json:chiplead:opts:note_resolution:description
msgid ""
"Locks down the note resolution to be multiples of this (MIDI) number. For exam"
"ple, a `note_resolution:` of 1 will only allow semitones to be played. When us"
"ed in conjunction with `note_slide:` produces a staircase of notes rather than"
" a continuous line which is how things were on the NES. Set to 0 to disable. T"
"his wasn't a feature of this triangle (bass) channel on the original chip but "
"some emulators have added it in since."
msgstr ""

#: synths.json:chiplead:description
msgid ""
"A slightly clipped square (pulse) wave with phases of 12.5%, 25% or 50% modell"
"ed after the 2A03 chip found in voices 1 and 2 of the NES games console. This "
"can be used for retro sounding leads and harmonised lines. This also adds an o"
"pt 'note_resolution' which locks the note slide to certain pitches which are m"
"ultiples of the step size. This allows for emulation of the sweep setting on t"
"he 2A03."
msgstr ""

#: synths.json:chiplead:opts:width:description
msgid "Which of the three pulse_widths to use - 0 => 12.5%, 1 => 25%, 2 => 50%"
msgstr ""

#: synths.json:chipnoise:description
msgid ""
"Generates noise whose values are either -1 or 1 (like a pulse or square wave) "
"with one of 16 particular frequencies. This is similar to the noise channel on"
" the 2A03 chip used in the NES games console, although it lacks the same Pseud"
"o-Random Number Generator (PRNG) and doesn't implement the 2A03's lesser used "
"noise mode. The amplitude envelope defaults to moving by step to keep that 16 "
"bit feel and this synth also has a slight soft clipping to better imitate the "
"original sound of the device. Use for retro effects, hand claps, snare drums a"
"nd hi-hats."
msgstr ""

#: synths.json:chipnoise:opts:freq_band:description
msgid ""
"Which of the 16 frequency bands to use, from 0 to 15. These range from 220Hz t"
"o 225kHz as on the original chip. This arg will accept floats but round to the"
" nearest integer to allow for sweeping through the 16 set points with envelope"
"s."
msgstr ""

#: synths.json:cnoise:description
msgid ""
"Generates noise whose values are either -1 or 1. This produces the maximum ene"
"rgy for the least peak to peak amplitude. Useful for generating percussive sou"
"nds such as snares and hand claps. Also useful for simulating wind or sea effe"
"cts."
msgstr ""

#: synths.json:dark_ambience:description
msgid ""
"A slow rolling bass with a sparkle of light trying to escape the darkness. Gre"
"at for an ambient sound."
msgstr ""

#: synths.json:dark_ambience:opts:detune1:description
msgid ""
"Distance (in MIDI notes) between the main note and the second component of sou"
"nd. Affects thickness, sense of tuning and harmony."
msgstr ""

#: synths.json:dark_ambience:opts:detune2:description
msgid ""
"Distance (in MIDI notes) between the main note and the third component of soun"
"d. Affects thickness, sense of tuning and harmony. Tiny values such as 0.1 cre"
"ate a thick sound."
msgstr ""

#: synths.json:dark_ambience:opts:noise:description
msgid ""
"Noise source. Has a subtle effect on the timbre of the sound. 0=pink noise (th"
"e default), 1=brown noise, 2=white noise, 3=clip noise and 4=grey noise"
msgstr ""

#: synths.json:dark_ambience:opts:reverb_time:description
msgid "How long in beats the reverb should go on for."
msgstr ""

#: synths.json:dark_ambience:opts:ring:description
msgid ""
"Amount of ring in the sound. Lower values create a more rough sound, higher va"
"lues produce a sound with more focus."
msgstr ""

#: synths.json:dark_ambience:opts:room:description
msgid "Room size in squared metres used to calculate the reverb."
msgstr ""

#: synths.json:dpulse:description
msgid ""
"A pair of detuned pulse waves passed through a low pass filter. Two pulse wave"
"s with slightly different frequencies generates a nice thick sound which can b"
"e used as a basis for some nice bass sounds. Thicken the sound by increasing t"
"he detune value, or create an octave-playing synth by choosing a detune of 12 "
"(12 MIDI notes is an octave). Each pulse wave can also have individual widths "
"(although the default is for the detuned pulse to mirror the width of the main"
" pulse)."
msgstr ""

#: synths.json:dpulse:opts:detune:description
#: synths.json:dsaw:opts:detune:description
#: synths.json:dtri:opts:detune:description
#: synths.json:mod_dsaw:opts:detune:description
msgid ""
"Distance (in MIDI notes) between components of sound. Affects thickness, sense"
" of tuning and harmony. Tiny values such as 0.1 create a thick sound. Larger v"
"alues such as 0.5 make the tuning sound strange. Even bigger values such as 5 "
"create chord-like sounds."
msgstr ""

#: synths.json:dpulse:opts:dpulse_width:description
msgid ""
"The width of the second detuned pulse wave as a value between 0 and 1. A width"
" of 0.5 will produce a square wave. Different values will change the timbre of"
" the sound. Only valid if wave is type pulse."
msgstr ""

#: synths.json:dsaw:description
msgid ""
"A pair of detuned saw waves passed through a low pass filter. Two saw waves wi"
"th slightly different frequencies generates a nice thick sound which is the ba"
"sis for a lot of famous synth sounds. Thicken the sound by increasing the detu"
"ne value, or create an octave-playing synth by choosing a detune of 12 (12 MID"
"I notes is an octave)."
msgstr ""

#: synths.json:dtri:description
msgid ""
"A pair of detuned triangle waves passed through a low pass filter. Two pulse w"
"aves with slightly different frequencies generates a nice thick sound which ca"
"n be used as a basis for some nice bass sounds. Thicken the sound by increasin"
"g the detune value, or create an octave-playing synth by choosing a detune of "
"12 (12 MIDI notes is an octave)."
msgstr ""

#: synths.json:dull_bell:description
msgid "A simple dull discordant bell sound."
msgstr ""

#: synths.json:fm:description
msgid ""
"A sine wave with a fundamental frequency which is modulated at audio rate by a"
"nother sine wave with a specific modulation, division and depth. Useful for ge"
"nerating a wide range of sounds by playing with the divisor and depth params. "
"Great for deep powerful bass and crazy 70s sci-fi sounds."
msgstr ""

#: synths.json:fm:opts:depth:description
#: synths.json:mod_fm:opts:depth:description
msgid ""
"Modifies the depth of the carrier wave used to modify fundamental frequency. D"
"on't worry too much about what this means - just try different numbers out!"
msgstr ""

#: synths.json:fm:opts:divisor:description
#: synths.json:mod_fm:opts:divisor:description
msgid ""
"Modifies the frequency of the modulator oscillator relative to the carrier. Do"
"n't worry too much about what this means - just try different numbers out!"
msgstr ""

#: synths.json:gnoise:description
msgid ""
"Generates noise which results from flipping random bits in a word. The spectru"
"m is emphasised towards lower frequencies. Useful for generating percussive so"
"unds such as snares and hand claps. Also useful for simulating wind or sea eff"
"ects."
msgstr ""

#: synths.json:growl:description
msgid "A deep rumbling growl with a bright sine shining through at higher notes."
msgstr ""

#: synths.json:hollow:description
msgid "A hollow breathy sound constructed from random noise"
msgstr ""

#: synths.json:hollow:opts:noise:description
msgid ""
"Noise source. Has a subtle effect on the timbre of the sound. 0=pink noise, 1="
"brown noise (the default), 2=white noise, 3=clip noise and 4=grey noise"
msgstr ""

#: synths.json:hollow:opts:norm:description
msgid ""
"Normalise the audio (make quieter parts of the synth's sound louder and louder"
" parts quieter) - this is similar to the normaliser FX. This may emphasise any"
" clicks caused by clipping."
msgstr ""

#: synths.json:hollow:opts:res:description
msgid ""
"Filter resonance as a value between 0 and 1. Only functional if a cutoff value"
" is specified. Large amounts of resonance (a res: near 1) can create a whistli"
"ng sound around the cutoff frequency. Smaller values produce less resonance."
msgstr ""

#: synths.json:hoover:description
msgid ""
"Classic early 90's rave synth - 'a sort of slurry chorussy synth line like the"
" classic Dominator by Human Resource'. Based on Dan Stowell's implementation i"
"n SuperCollider and Daniel Turczanski's port to Overtone. Works really well wi"
"th portamento (see docs for the 'control' method)."
msgstr ""

#: synths.json:kalimba:description
msgid ""
"A synthesised kalimba (a type of African thumb piano). Note that due to the pl"
"ucked nature of this synth the envelope opts such as `attack:`, `sustain:` and"
" `release:` do not work as expected. They can only shorten the natural length "
"of the note, not prolong it. Note the default envelope is longer than usual - "
"sustain: 4 and release: 1"
msgstr ""

#: synths.json:kalimba:opts:attack:description
msgid ""
"Amount of time (in beats) for sound to reach full amplitude (attack_level). A "
"short attack (i.e. 0.01) makes the initial part of the sound very percussive l"
"ike a sharp tap. A longer attack (i.e 1) fades the sound in gently. With the k"
"alimba synth, this opt can only have the effect of shortening the attack phase"
", not prolonging it."
msgstr ""

#: synths.json:kalimba:opts:clickiness:description
msgid ""
"Ratio of percussive click to melodic note in the sound. A low clickiness like "
"0.1 works well - higher values might give the impression that the instrument i"
"s being played harder. Very high values (towards 1) will be louder!"
msgstr ""

#: synths.json:kalimba:opts:decay:description
msgid ""
"Amount of time (in beats) for the sound to move from full amplitude (attack_le"
"vel) to the sustain amplitude (sustain_level). With the kalimba synth, this op"
"t can only have the effect of controlling the amp within the natural duration "
"of the note and can not prolong the sound."
msgstr ""

#: synths.json:kalimba:opts:release:description
msgid ""
"Amount of time (in beats) for sound to move from sustain level amplitude to si"
"lent. A short release (i.e. 0.01) makes the final part of the sound very percu"
"ssive (potentially resulting in a click). A longer release (i.e 1) fades the s"
"ound out gently. With the kalimba synth, this opt can only have the effect of "
"controlling the amp within the natural duration of the note and can not prolon"
"g the sound."
msgstr ""

#: synths.json:kalimba:opts:sustain:description
msgid ""
"Amount of time (in beats) for sound to remain at sustain level amplitude. Long"
"er sustain values result in longer sounds. With the kalimba synth, this opt ca"
"n only have the effect of controlling the amp within the natural duration of t"
"he note and can not prolong the sound."
msgstr ""

#: synths.json:mod_dsaw:description
msgid ""
"A pair of detuned saw waves (see the dsaw synth) which are modulated between t"
"wo fixed notes at a given rate."
msgstr ""

#: synths.json:mod_dsaw:opts:mod_invert_wave:description
#: synths.json:mod_fm:opts:mod_invert_wave:description
#: synths.json:mod_pulse:opts:mod_invert_wave:description
#: synths.json:mod_saw:opts:mod_invert_wave:description
#: synths.json:mod_sine:opts:mod_invert_wave:description
#: synths.json:mod_tri:opts:mod_invert_wave:description
msgid ""
"Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wa"
"ve."
msgstr ""

#: synths.json:mod_dsaw:opts:mod_phase:description
#: synths.json:mod_fm:opts:mod_phase:description
#: synths.json:mod_pulse:opts:mod_phase:description
#: synths.json:mod_saw:opts:mod_phase:description
#: synths.json:mod_sine:opts:mod_phase:description
#: synths.json:mod_tri:opts:mod_phase:description
msgid ""
"Phase duration in beats of oscillations between the two notes. Time it takes t"
"o switch between the notes."
msgstr ""

#: synths.json:mod_dsaw:opts:mod_pulse_width:description
#: synths.json:mod_fm:opts:mod_pulse_width:description
#: synths.json:mod_pulse:opts:mod_pulse_width:description
#: synths.json:mod_saw:opts:mod_pulse_width:description
#: synths.json:mod_sine:opts:mod_pulse_width:description
#: synths.json:mod_tri:opts:mod_pulse_width:description
msgid ""
"The width of the modulated pulse wave as a value between 0 and 1. A width of 0"
".5 will produce a square wave. Only valid if mod wave is type pulse."
msgstr ""

#: synths.json:mod_dsaw:opts:mod_range:description
#: synths.json:mod_fm:opts:mod_range:description
#: synths.json:mod_pulse:opts:mod_range:description
#: synths.json:mod_saw:opts:mod_range:description
#: synths.json:mod_sine:opts:mod_range:description
#: synths.json:mod_tri:opts:mod_range:description
msgid "The size of gap between modulation notes. A gap of 12 is one octave."
msgstr ""

#: synths.json:mod_dsaw:opts:mod_wave:description
#: synths.json:mod_fm:opts:mod_wave:description
#: synths.json:mod_pulse:opts:mod_wave:description
#: synths.json:mod_saw:opts:mod_wave:description
#: synths.json:mod_sine:opts:mod_wave:description
#: synths.json:mod_tri:opts:mod_wave:description
msgid "Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave."
msgstr ""

#: synths.json:mod_fm:description
msgid ""
"The FM synth modulating between two notes - the duration of the modulation can"
" be modified using the mod_phase arg, the range (number of notes jumped betwee"
"n) by the mod_range arg and the width of the jumps by the mod_width param. The"
" FM synth is a sine wave with a fundamental frequency which is modulated at au"
"dio rate by another sine wave with a specific modulation, division and depth. "
"Useful for generating a wide range of sounds by playing with the `:divisor` an"
"d `:depth` params. Great for deep powerful bass and crazy 70s sci-fi sounds."
msgstr ""

#: synths.json:mod_pulse:description
msgid ""
"A pulse wave with a low pass filter modulating between two notes via a variety"
" of control waves (see mod_wave: arg). The pulse wave defaults to a square wav"
"e, but the timbre can be changed dramatically by adjusting the pulse_width arg"
" between 0 and 1."
msgstr ""

#: synths.json:mod_saw:description
msgid ""
"A saw wave passed through a low pass filter which modulates between two separa"
"te notes via a variety of control waves."
msgstr ""

#: synths.json:mod_sine:description
msgid ""
"A sine wave passed through a low pass filter which modulates between two separ"
"ate notes via a variety of control waves."
msgstr ""

#: synths.json:mod_tri:description
msgid ""
"A triangle wave passed through a low pass filter which modulates between two s"
"eparate notes via a variety of control waves."
msgstr ""

#: synths.json:noise:description
msgid ""
"Noise that contains equal amounts of energy at every frequency - comparable to"
" radio static. Useful for generating percussive sounds such as snares and hand"
" claps. Also useful for simulating wind or sea effects."
msgstr ""

#: synths.json:piano:description
msgid ""
"A basic piano synthesiser. Note that due to the plucked nature of this synth t"
"he envelope opts such as `attack:`, `sustain:` and `release:` do not work as e"
"xpected. They can only shorten the natural length of the note, not prolong it."
msgstr ""

#: synths.json:piano:opts:attack:description
msgid ""
"Amount of time (in beats) for sound to reach full amplitude (attack_level). A "
"short attack (i.e. 0.01) makes the initial part of the sound very percussive l"
"ike a sharp tap. A longer attack (i.e 1) fades the sound in gently. With the p"
"iano synth, this opt can only have the effect of shortening the attack phase, "
"not prolonging it."
msgstr ""

#: synths.json:piano:opts:decay:description
#: synths.json:pluck:opts:decay:description
msgid ""
"Amount of time (in beats) for the sound to move from full amplitude (attack_le"
"vel) to the sustain amplitude (sustain_level). With the piano synth, this opt "
"can only have the effect of controlling the amp within the natural duration of"
" the note and can not prolong the sound."
msgstr ""

#: synths.json:piano:opts:hard:description
msgid "Hardness of keypress. "
msgstr ""

#: synths.json:piano:opts:note:description
msgid ""
"Note to play. Either a MIDI number or a symbol representing a note. For exampl"
"e: `30`, `52`, 56.5, `:C`, `:C2`, `:Eb4`, or `:Ds3`."
msgstr ""

#: synths.json:piano:opts:release:description
#: synths.json:pluck:opts:release:description
msgid ""
"Amount of time (in beats) for sound to move from sustain level amplitude to si"
"lent. A short release (i.e. 0.01) makes the final part of the sound very percu"
"ssive (potentially resulting in a click). A longer release (i.e 1) fades the s"
"ound out gently. With the piano synth, this opt can only have the effect of co"
"ntrolling the amp within the natural duration of the note and can not prolong "
"the sound."
msgstr ""

#: synths.json:piano:opts:stereo_width:description
msgid ""
"Width of the stereo effect (which makes low notes sound towards the left, high"
" notes towards the right). 0 to 1."
msgstr ""

#: synths.json:piano:opts:sustain:description
#: synths.json:pluck:opts:sustain:description
msgid ""
"Amount of time (in beats) for sound to remain at sustain level amplitude. Long"
"er sustain values result in longer sounds. With the piano synth, this opt can "
"only have the effect of controlling the amp within the natural duration of the"
" note and can not prolong the sound."
msgstr ""

#: synths.json:piano:opts:vel:description
msgid "Velocity of keypress. "
msgstr ""

#: synths.json:pluck:description
msgid ""
"A basic plucked string synthesiser that uses Karplus-Strong synthesis. Note th"
"at due to the plucked nature of this synth the envelope opts such as `attack:`"
", `sustain:` and `release:` do not work as expected. They can only shorten the"
" natural length of the note, not prolong it. Also, the `note:` opt will only h"
"onour whole tones."
msgstr ""

#: synths.json:pluck:opts:coef:description
msgid ""
"Coefficient of the internal OnePole filter. Values around zero are resonant an"
"d bright, values towards 1 sound more dampened and cutoff. It's a little bit l"
"ike playing nearer the soundhole/fingerboard for values near zero and more tow"
"ard the bridge for values approaching one, although this isn't an exact compar"
"ison."
msgstr ""

#: synths.json:pluck:opts:max_delay_time:description
msgid "Maximum length of the delay line buffer."
msgstr ""

#: synths.json:pluck:opts:noise_amp:description
msgid "Amplitude of source (pink) noise."
msgstr ""

#: synths.json:pluck:opts:note:description
msgid ""
"Note to play. Either a MIDI number or a symbol representing a note. For exampl"
"e: `30`, `52`, `:C`, `:C2`, `:Eb4`, or `:Ds3`. Note that the piano synth can o"
"nly play whole tones such as 60 and does not handle floats such as 60.3"
msgstr ""

#: synths.json:pluck:opts:pluck_decay:description
msgid ""
"How long the pluck takes to stabilise on a note. This doesn't have a dramatic "
"effect on the sound."
msgstr ""

#: synths.json:pnoise:description
msgid ""
"Noise whose spectrum falls off in power by 3 dB per octave. Useful for generat"
"ing percussive sounds such as snares and hand claps. Also useful for simulatin"
"g wind or sea effects."
msgstr ""

#: synths.json:pretty_bell:description
msgid "A pretty bell sound. Works well with short attacks and long decays."
msgstr ""

#: synths.json:prophet:description
msgid ""
"Dark and swirly, this synth uses Pulse Width Modulation (PWM) to create a timb"
"re which continually moves around. This effect is created using the pulse ugen"
" which produces a variable width square wave. We then control the width of the"
" pulses using a variety of LFOs - sin-osc and lf-tri in this case. We use a nu"
"mber of these LFO modulated pulse ugens with varying LFO type and rate (and ph"
"ase in some cases) to provide the LFO with a different starting point. We then"
" mix all these pulses together to create a thick sound and then feed it throug"
"h a resonant low pass filter (rlpf). For extra bass, one of the pulses is an o"
"ctave lower (half the frequency) and its LFO has a little bit of randomisation"
" thrown into its frequency component for that extra bit of variety.\n"
"\n"
"Synth design adapted from:\n"
"The Prophet Speaks (page 2)\n"
"Steal This Sound,  Mitchell Sigman"
msgstr ""

#: synths.json:pulse:description
msgid ""
"A simple pulse wave with a low pass filter. This defaults to a square wave, bu"
"t the timbre can be changed dramatically by adjusting the pulse_width arg betw"
"een 0 and 1. The pulse wave is thick and heavy with lower notes and is a great"
" ingredient for bass sounds."
msgstr ""

#: synths.json:rodeo:description
msgid "Classic 70's electric piano sound, with built-in compressor and chorus."
msgstr ""

#: synths.json:rodeo:opts:use_chorus:description
msgid "Enable the chorus effect (on by default)."
msgstr ""

#: synths.json:rodeo:opts:use_compressor:description
msgid "Enable the compressor (on by default)."
msgstr ""

#: synths.json:saw:description
msgid ""
"A saw wave with a low pass filter. Great for using with FX such as the built i"
"n low pass filter (available via the cutoff arg) due to the complexity and thi"
"ckness of the sound."
msgstr ""

#: synths.json:sound_in:description
msgid ""
"Treat sound card input as a synth. If your audio card has inputs, you may use "
"this synth to feed the incoming audio into Sonic Pi. This synth will read in a"
" single mono audio stream - for example from a standard microphone or guitar. "
"See `:sound_in_stereo` for a similar synth capable of reading in a stereo sign"
"al.\n"
"\n"
"As with all Sonic Pi synths, there is a default envelope which determines the "
"duration of the lifetime of the synth. Therefore, to get a continuous stream o"
"f audio, you need to place consecutive calls to this synth in iteration or a `"
"live_loop`. For example:\n"
"\n"
"```\n"
"live_loop :playback do\n"
"```\n"
"\n"
"```\n"
"   synth :sound_in, sustain: 8\n"
"```\n"
"\n"
"```\n"
"   sleep 8\n"
"```\n"
"\n"
"```\n"
"end\n"
"```\n"
"\n"
"Note that if the microphone and speaker are close together (on a laptop or in "
"a small room) you will potentially get a harsh feedback sound.\n"
"\n"
"Also, note that audio in isn't yet supported on Raspberry Pi."
msgstr ""

#: synths.json:sound_in:opts:input:description
msgid ""
"Sound card input channel to obtain audio from. Indexing starts at 1 so input 1"
" represents the first channel, and channel 2 can be represented by `input: 2`"
msgstr ""

#: synths.json:sound_in_stereo:description
msgid ""
"Treat sound card input as a synth. If your audio card has inputs, you may use "
"this synth to feed the incoming audio into Sonic Pi. This synth will read in a"
" stereo audio stream - for example from a stereo microphone or external stereo"
" keyboard. See `:sound_in` for a similar synth capable of reading in a mono si"
"gnal. The stereo input is expected to be on consecutive sound card channels.\n"
"\n"
"As with all Sonic Pi synths, there is a default envelope which determines the "
"duration of the lifetime of the synth. Therefore, to get a continuous stream o"
"f audio, you need to place consecutive calls to this synth in iteration or a `"
"live_loop`. For example:\n"
"\n"
"```\n"
"live_loop :playback do\n"
"```\n"
"\n"
"```\n"
"   synth :sound_in_stereo, sustain: 8\n"
"```\n"
"\n"
"```\n"
"   sleep 8\n"
"```\n"
"\n"
"```\n"
"end\n"
"```\n"
"\n"
"Note that if the microphone and speaker are close together (on a laptop or in "
"a small room) you will potentially get a harsh feedback sound.\n"
"\n"
"Also, note that audio in isn't yet supported on Raspberry Pi."
msgstr ""

#: synths.json:sound_in_stereo:opts:input:description
msgid ""
"First of two consecutive sound card input channels to obtain audio from. Index"
"ing starts at 1 so input 1 represents the first channel, and channel 2 can be "
"represented by `input: 2`"
msgstr ""

#: synths.json:square:description
msgid ""
"A simple square wave with a low pass filter. The square wave is thick and heav"
"y with lower notes and is a great ingredient for bass sounds. If you wish to m"
"odulate the width of the square wave see the synth pulse."
msgstr ""

#: synths.json:subpulse:description
msgid ""
"A pulse wave with a sub sine wave passed through a low pass filter. The pulse "
"wave is thick and heavy with lower notes and is a great ingredient for bass so"
"unds - especially with the sub wave."
msgstr ""

#: synths.json:subpulse:opts:sub_amp:description
msgid "Amplitude for the additional sine wave."
msgstr ""

#: synths.json:subpulse:opts:sub_detune:description
msgid "Amount of detune from the note for the additional sine wave. Default is -12"
msgstr ""

#: synths.json:supersaw:description
msgid ""
"Thick swirly saw waves sparkling and moving about to create a rich trancy soun"
"d."
msgstr ""

#: synths.json:tb303:description
msgid ""
"Emulation of the classic Roland TB-303 Bass Line synthesiser. Overdrive the re"
"s (i.e. use very large values) for that classic late 80s acid sound."
msgstr ""

#: synths.json:tb303:opts:cutoff:description
msgid "The maximum cutoff value as a MIDI note"
msgstr ""

#: synths.json:tb303:opts:cutoff_attack:description
msgid ""
"Attack time for cutoff filter. Amount of time (in beats) for sound to reach fu"
"ll cutoff value. Default value is set to match amp envelope's attack value."
msgstr ""

#: synths.json:tb303:opts:cutoff_attack_level:description
msgid ""
"The peak cutoff (value of cutoff at peak of attack) as a value between 0 and 1"
" where 0 is the :cutoff_min and 1 is the :cutoff value"
msgstr ""

#: synths.json:tb303:opts:cutoff_decay:description
msgid ""
"Decay time for cutoff filter. Amount of time (in beats) for sound to move from"
" full cutoff value (cutoff attack level) to the cutoff sustain level. Default "
"value is set to match amp envelope's decay value."
msgstr ""

#: synths.json:tb303:opts:cutoff_decay_level:description
msgid ""
"The level of cutoff after the decay phase as a value between 0 and 1 where 0 i"
"s the :cutoff_min and 1 is the :cutoff value"
msgstr ""

#: synths.json:tb303:opts:cutoff_min:description
msgid "The minimum cutoff value."
msgstr ""

#: synths.json:tb303:opts:cutoff_release:description
msgid ""
"Amount of time (in beats) for sound to move from cutoff sustain value to cutof"
"f min value. Default value is set to match amp envelope's release value."
msgstr ""

#: synths.json:tb303:opts:cutoff_sustain:description
msgid ""
"Amount of time for cutoff value to remain at sustain level in beats. Default v"
"alue is set to match amp envelope's sustain value."
msgstr ""

#: synths.json:tb303:opts:cutoff_sustain_level:description
msgid ""
"The sustain cutoff (value of cutoff at sustain time) as a value between 0 and "
"1 where 0 is the :cutoff_min and 1 is the :cutoff value."
msgstr ""

#: synths.json:tb303:opts:wave:description
msgid ""
"Wave type - 0 saw, 1 pulse, 2 triangle. Different waves will produce different"
" sounds."
msgstr ""

#: synths.json:tech_saws:description
msgid "Slightly modified supersaw implementation based on http://sccode.org/1-4YS"
msgstr ""

#: synths.json:tri:description
msgid "A simple triangle wave with a low pass filter."
msgstr ""

#: synths.json:zawa:description
msgid ""
"Saw wave with oscillating timbre. Produces moving saw waves with a unique char"
"acter controllable with the control oscillator (usage similar to mod synths)."
msgstr ""

#: synths.json:zawa:opts:disable_wave:description
msgid "Enable and disable sync control wave (setting to 1 will stop timbre movement)."
msgstr ""

#: synths.json:zawa:opts:invert_wave:description
msgid ""
"Invert sync freq control waveform (i.e. flip it on the y axis). 0=uninverted w"
"ave, 1=inverted wave."
msgstr ""

#: synths.json:zawa:opts:phase:description
msgid "Phase duration in beats of timbre modulation."
msgstr ""

#: synths.json:zawa:opts:phase_offset:description
msgid "Initial phase offset of the sync wave (a value between 0 and 1)."
msgstr ""

#: synths.json:zawa:opts:range:description
msgid ""
"Range of the associated sync saw in MIDI notes from the main note. Modifies ti"
"mbre."
msgstr ""

#: synths.json:zawa:opts:wave:description
msgid ""
"Wave shape controlling freq sync saw wave. 0=saw wave, 1=pulse, 2=triangle wav"
"e and 3=sine wave."
msgstr ""
