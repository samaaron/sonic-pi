class:: Flock
summary:: An audio rate signal generated by running a flocking algorithm
related:: Classes/ElementaryCA
categories:: UGens>Generators>Deterministic

Description::
This UGen runs a flocking algorithm, where each 'boid' in the simulated flock controls its own sine wave. It is possible to influence several parameters of the simulation, such as the total number of boids in the flock, their initial speed, the maximum force they are allowed to experience as they travel, and whether any of the boids may possibly be designated as 'predators'.
In turn, the boids can modulate the sound of their individual sine waves in one of several ways (see the note_mod_source argument for details) and the strength of this modulation can also be adjusted.

Classmethods::

method::ar

argument::bufnum
The id of a buffer containing a collection of numbers treated as the source of a deterministic random number generator.

argument::freq
The basic frequency that each simulated boid modifies to produce its final sound. Valid values are numbers greater than or equal to 1.

argument::seed
A number used to deterministically offset an index into the random number buffer values.

argument::num_boids
The number of boids to include in the simulated flock (and therefore, the number of frequencies to combine into the final output signal). Valid values are numbers greater than or equal to 1.

argument::min_start_speed
The minimum value allowed when deciding the starting speed of each newly created boid. Valid values are numbers greater than or equal to 0. They must also be less than or equal to the value of max_speed. 

argument::max_speed
The maximum speed 'normal' boids are allowed to travel at. (Predator boids will always have a slightly higher maximum speed than this). Valid values are numbers greater than or equal to 0.

argument::max_force
The maximum amount of force (eg acceleration) that can be applied to 'normal' boids. (Predator boids will always have a slightly higher possible maximum force that they can experience than this). Valid values are numbers greater than 0.

argument::note_mod_source
Which property of a boid to use to affect its sine wave. Valid values are 0, 1, 2 or 3. 0 = x (horizontal) position, 1 = y (vertical) position, 2 = speed, 3 = angle of heading.

- X and y position will often have a very similar effect, both creating a sound that might start on a low note and slide up to a high note, (or high and slide down to low) and then repeat.

- Speed will often have a fairly subtle effect on the sound, as the boids may not dramatically change speed once they have all reached a certain limit.

- Angle will often have the most noticeable and unpredictable effect on the sound, since small changes in position, speed or angle can cause dramatic shifts in the direction that boids end up heading in.

argument::note_mod_amount
The amount of change that each boid's property (position, speed or angle of heading) has on its sine wave. Valid values are numbers between 0 and 1 inclusively.

argument::predator_probability
The probability that when each boid is created, it will be a predator. The more predators that there are in the flock, the wilder and more noisy the overall sound will be. Valid values are numbers between 0 and 1 inclusively.

Examples::

code::
// Create a buffer of random numbers for the deterministic random number generator
b = Buffer.alloc(s, 44100);
v = FloatArray.fill(44100, {1.0.rand});
b.loadCollection(v);

/*
  Generate a signal using 40 boids, where none may be predators,
  each in control of a sine wave at 440.0 Hz,
  each with a min_start_speed of 1, max_speed of 3.5, and max_force of 0.5,
  and modulate the boid sine waves to full effect based on their y (vertical) position.  
*/
{
  var env, snd;
  env = Env.new([0, 1, 1, 1, 0], [0, 0, 5, 5], 2);
  snd = Flock.ar(b.bufnum, 440.0, 0, 40, 1, 3.5, 0.5, 1, 1, 0);
  snd = Pan2.ar(snd * EnvGen.ar(env, doneAction: 2), 0);
}.play;

/*
  Generate a signal using 20 boids, each with 25% chance of being a predator,
  each in control of a sine wave at 440.0 Hz,
  each with a min_start_speed of 0, max_speed of 3.5, and max_force of 0.5,
  and modulate the boid sine waves with 50% effect based on their speed.  
*/
{
  var env, snd;
  env = Env.new([0, 1, 1, 1, 0], [0, 0, 5, 5], 2);
  snd = Flock.ar(b.bufnum, 440.0, 0, 20, 0, 3.5, 0.5, 2, 0.5, 0.25);
  snd = Pan2.ar(snd * EnvGen.ar(env, doneAction: 2), 0);
}.play;

/*
  Generate a signal using 20 boids, where none may be predators,
  each in control of a sine wave at 440.0 Hz,
  each with a min_start_speed of 0, max_speed of 4 and max_force of 1,
  and modulate the boid sine waves to full effect based on their angle of heading.  
*/
{
  var env, snd;
  env = Env.new([0, 1, 1, 1, 0], [0, 0, 5, 5], 2);
  snd = Flock.ar(b.bufnum, 440.0, 0, 20, 0, 4, 1, 3, 1, 0);
  snd = Pan2.ar(snd * EnvGen.ar(env, doneAction: 2), 0);
}.play;

// Free the memory used by the random number buffer.
b.free;

::
